
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000009ea  00000a7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  0080012a  0080012a  00000aa8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ad8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001261  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bcc  00000000  00000000  00001e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a7  00000000  00000000  000029ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00003194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000534  00000000  00000000  000033cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000be1  00000000  00000000  00003900  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000044e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea ee       	ldi	r30, 0xEA	; 234
  70:	f9 e0       	ldi	r31, 0x09	; 9
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 32       	cpi	r26, 0x2A	; 42
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e2       	ldi	r26, 0x2A	; 42
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a5 35       	cpi	r26, 0x55	; 85
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <main>
  92:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar.part.0>:

bool is_prime(long i) { // Den här har vi lagt till -------------------------------------------------------
	// check if i is divisible with any number that is not 1 or itself
	for (int j = 2; j < i; j++) {
		if(i % j == 0) {
			return false;
  9a:	81 53       	subi	r24, 0x31	; 49
  9c:	89 30       	cpi	r24, 0x09	; 9
  9e:	08 f0       	brcs	.+2      	; 0xa2 <writeChar.part.0+0x8>
  a0:	54 c0       	rjmp	.+168    	; 0x14a <writeChar.part.0+0xb0>
  a2:	e8 2f       	mov	r30, r24
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	ee 0f       	add	r30, r30
  a8:	ff 1f       	adc	r31, r31
  aa:	e8 5e       	subi	r30, 0xE8	; 232
  ac:	fe 4f       	sbci	r31, 0xFE	; 254
  ae:	80 81       	ld	r24, Z
  b0:	91 81       	ldd	r25, Z+1	; 0x01
  b2:	62 30       	cpi	r22, 0x02	; 2
  b4:	71 05       	cpc	r23, r1
  b6:	09 f4       	brne	.+2      	; 0xba <writeChar.part.0+0x20>
  b8:	4e c0       	rjmp	.+156    	; 0x156 <writeChar.part.0+0xbc>
  ba:	63 30       	cpi	r22, 0x03	; 3
  bc:	71 05       	cpc	r23, r1
  be:	0c f4       	brge	.+2      	; 0xc2 <writeChar.part.0+0x28>
  c0:	80 c0       	rjmp	.+256    	; 0x1c2 <writeChar.part.0+0x128>
  c2:	64 30       	cpi	r22, 0x04	; 4
  c4:	71 05       	cpc	r23, r1
  c6:	09 f4       	brne	.+2      	; 0xca <writeChar.part.0+0x30>
  c8:	be c0       	rjmp	.+380    	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
  ca:	0c f4       	brge	.+2      	; 0xce <writeChar.part.0+0x34>
  cc:	f4 c0       	rjmp	.+488    	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
  ce:	65 30       	cpi	r22, 0x05	; 5
  d0:	71 05       	cpc	r23, r1
  d2:	09 f0       	breq	.+2      	; 0xd6 <writeChar.part.0+0x3c>
  d4:	ee c0       	rjmp	.+476    	; 0x2b2 <__EEPROM_REGION_LENGTH__+0xb2>
  d6:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	fc 01       	movw	r30, r24
  e0:	e0 50       	subi	r30, 0x00	; 0
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	80 81       	ld	r24, Z
  e6:	91 81       	ldd	r25, Z+1	; 0x01
  e8:	82 95       	swap	r24
  ea:	92 95       	swap	r25
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	98 27       	eor	r25, r24
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	98 27       	eor	r25, r24
  f4:	92 2f       	mov	r25, r18
  f6:	9f 70       	andi	r25, 0x0F	; 15
  f8:	89 2b       	or	r24, r25
  fa:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
  fe:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 102:	90 81       	ld	r25, Z
 104:	90 7f       	andi	r25, 0xF0	; 240
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	89 2b       	or	r24, r25
 10a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 10e:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	88 27       	eor	r24, r24
 118:	9f 70       	andi	r25, 0x0F	; 15
 11a:	95 95       	asr	r25
 11c:	87 95       	ror	r24
 11e:	95 95       	asr	r25
 120:	87 95       	ror	r24
 122:	95 95       	asr	r25
 124:	87 95       	ror	r24
 126:	95 95       	asr	r25
 128:	87 95       	ror	r24
 12a:	92 2f       	mov	r25, r18
 12c:	9f 70       	andi	r25, 0x0F	; 15
 12e:	89 2b       	or	r24, r25
 130:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 134:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 138:	20 81       	ld	r18, Z
 13a:	31 81       	ldd	r19, Z+1	; 0x01
 13c:	22 27       	eor	r18, r18
 13e:	30 7f       	andi	r19, 0xF0	; 240
 140:	8f 70       	andi	r24, 0x0F	; 15
 142:	83 2b       	or	r24, r19
 144:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 148:	08 95       	ret
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	62 30       	cpi	r22, 0x02	; 2
 150:	71 05       	cpc	r23, r1
 152:	09 f0       	breq	.+2      	; 0x156 <writeChar.part.0+0xbc>
 154:	b2 cf       	rjmp	.-156    	; 0xba <writeChar.part.0+0x20>
 156:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	fc 01       	movw	r30, r24
 160:	e0 50       	subi	r30, 0x00	; 0
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	80 81       	ld	r24, Z
 166:	98 2f       	mov	r25, r24
 168:	9f 70       	andi	r25, 0x0F	; 15
 16a:	82 2f       	mov	r24, r18
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	89 2b       	or	r24, r25
 170:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 174:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 178:	80 81       	ld	r24, Z
 17a:	91 81       	ldd	r25, Z+1	; 0x01
 17c:	80 7f       	andi	r24, 0xF0	; 240
 17e:	99 27       	eor	r25, r25
 180:	95 95       	asr	r25
 182:	87 95       	ror	r24
 184:	95 95       	asr	r25
 186:	87 95       	ror	r24
 188:	95 95       	asr	r25
 18a:	87 95       	ror	r24
 18c:	95 95       	asr	r25
 18e:	87 95       	ror	r24
 190:	92 2f       	mov	r25, r18
 192:	90 7f       	andi	r25, 0xF0	; 240
 194:	89 2b       	or	r24, r25
 196:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 19a:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 19e:	20 81       	ld	r18, Z
 1a0:	31 81       	ldd	r19, Z+1	; 0x01
 1a2:	22 27       	eor	r18, r18
 1a4:	3f 70       	andi	r19, 0x0F	; 15
 1a6:	80 7f       	andi	r24, 0xF0	; 240
 1a8:	83 2b       	or	r24, r19
 1aa:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 1ae:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 1b2:	91 81       	ldd	r25, Z+1	; 0x01
 1b4:	92 95       	swap	r25
 1b6:	9f 70       	andi	r25, 0x0F	; 15
 1b8:	80 7f       	andi	r24, 0xF0	; 240
 1ba:	89 2b       	or	r24, r25
 1bc:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 1c0:	08 95       	ret
 1c2:	61 15       	cp	r22, r1
 1c4:	71 05       	cpc	r23, r1
 1c6:	09 f4       	brne	.+2      	; 0x1ca <writeChar.part.0+0x130>
 1c8:	b0 c0       	rjmp	.+352    	; 0x32a <__EEPROM_REGION_LENGTH__+0x12a>
 1ca:	61 30       	cpi	r22, 0x01	; 1
 1cc:	71 05       	cpc	r23, r1
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <writeChar.part.0+0x138>
 1d0:	71 c0       	rjmp	.+226    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
 1d2:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	fc 01       	movw	r30, r24
 1dc:	e0 50       	subi	r30, 0x00	; 0
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	80 81       	ld	r24, Z
 1e2:	91 81       	ldd	r25, Z+1	; 0x01
 1e4:	82 95       	swap	r24
 1e6:	92 95       	swap	r25
 1e8:	90 7f       	andi	r25, 0xF0	; 240
 1ea:	98 27       	eor	r25, r24
 1ec:	80 7f       	andi	r24, 0xF0	; 240
 1ee:	98 27       	eor	r25, r24
 1f0:	92 2f       	mov	r25, r18
 1f2:	9f 70       	andi	r25, 0x0F	; 15
 1f4:	89 2b       	or	r24, r25
 1f6:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 1fa:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 1fe:	90 81       	ld	r25, Z
 200:	90 7f       	andi	r25, 0xF0	; 240
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	89 2b       	or	r24, r25
 206:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 20a:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 20e:	80 81       	ld	r24, Z
 210:	91 81       	ldd	r25, Z+1	; 0x01
 212:	88 27       	eor	r24, r24
 214:	9f 70       	andi	r25, 0x0F	; 15
 216:	95 95       	asr	r25
 218:	87 95       	ror	r24
 21a:	95 95       	asr	r25
 21c:	87 95       	ror	r24
 21e:	95 95       	asr	r25
 220:	87 95       	ror	r24
 222:	95 95       	asr	r25
 224:	87 95       	ror	r24
 226:	92 2f       	mov	r25, r18
 228:	9f 70       	andi	r25, 0x0F	; 15
 22a:	89 2b       	or	r24, r25
 22c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 230:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 234:	20 81       	ld	r18, Z
 236:	31 81       	ldd	r19, Z+1	; 0x01
 238:	22 27       	eor	r18, r18
 23a:	30 7f       	andi	r19, 0xF0	; 240
 23c:	8f 70       	andi	r24, 0x0F	; 15
 23e:	83 2b       	or	r24, r19
 240:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 244:	08 95       	ret
 246:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	fc 01       	movw	r30, r24
 250:	e0 50       	subi	r30, 0x00	; 0
 252:	ff 4f       	sbci	r31, 0xFF	; 255
 254:	80 81       	ld	r24, Z
 256:	98 2f       	mov	r25, r24
 258:	9f 70       	andi	r25, 0x0F	; 15
 25a:	82 2f       	mov	r24, r18
 25c:	80 7f       	andi	r24, 0xF0	; 240
 25e:	89 2b       	or	r24, r25
 260:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 264:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 268:	80 81       	ld	r24, Z
 26a:	91 81       	ldd	r25, Z+1	; 0x01
 26c:	80 7f       	andi	r24, 0xF0	; 240
 26e:	99 27       	eor	r25, r25
 270:	95 95       	asr	r25
 272:	87 95       	ror	r24
 274:	95 95       	asr	r25
 276:	87 95       	ror	r24
 278:	95 95       	asr	r25
 27a:	87 95       	ror	r24
 27c:	95 95       	asr	r25
 27e:	87 95       	ror	r24
 280:	92 2f       	mov	r25, r18
 282:	90 7f       	andi	r25, 0xF0	; 240
 284:	89 2b       	or	r24, r25
 286:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 28a:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 28e:	20 81       	ld	r18, Z
 290:	31 81       	ldd	r19, Z+1	; 0x01
 292:	22 27       	eor	r18, r18
 294:	3f 70       	andi	r19, 0x0F	; 15
 296:	80 7f       	andi	r24, 0xF0	; 240
 298:	83 2b       	or	r24, r19
 29a:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 29e:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 2a2:	91 81       	ldd	r25, Z+1	; 0x01
 2a4:	92 95       	swap	r25
 2a6:	9f 70       	andi	r25, 0x0F	; 15
 2a8:	80 7f       	andi	r24, 0xF0	; 240
 2aa:	89 2b       	or	r24, r25
 2ac:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 2b0:	08 95       	ret
 2b2:	08 95       	ret
 2b4:	08 95       	ret
 2b6:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	fc 01       	movw	r30, r24
 2c0:	e0 50       	subi	r30, 0x00	; 0
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	80 81       	ld	r24, Z
 2c6:	91 81       	ldd	r25, Z+1	; 0x01
 2c8:	82 95       	swap	r24
 2ca:	92 95       	swap	r25
 2cc:	90 7f       	andi	r25, 0xF0	; 240
 2ce:	98 27       	eor	r25, r24
 2d0:	80 7f       	andi	r24, 0xF0	; 240
 2d2:	98 27       	eor	r25, r24
 2d4:	92 2f       	mov	r25, r18
 2d6:	9f 70       	andi	r25, 0x0F	; 15
 2d8:	89 2b       	or	r24, r25
 2da:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 2de:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 2e2:	90 81       	ld	r25, Z
 2e4:	90 7f       	andi	r25, 0xF0	; 240
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	89 2b       	or	r24, r25
 2ea:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 2ee:	20 91 f7 00 	lds	r18, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 2f2:	80 81       	ld	r24, Z
 2f4:	91 81       	ldd	r25, Z+1	; 0x01
 2f6:	88 27       	eor	r24, r24
 2f8:	9f 70       	andi	r25, 0x0F	; 15
 2fa:	95 95       	asr	r25
 2fc:	87 95       	ror	r24
 2fe:	95 95       	asr	r25
 300:	87 95       	ror	r24
 302:	95 95       	asr	r25
 304:	87 95       	ror	r24
 306:	95 95       	asr	r25
 308:	87 95       	ror	r24
 30a:	92 2f       	mov	r25, r18
 30c:	9f 70       	andi	r25, 0x0F	; 15
 30e:	89 2b       	or	r24, r25
 310:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 314:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 318:	20 81       	ld	r18, Z
 31a:	31 81       	ldd	r19, Z+1	; 0x01
 31c:	22 27       	eor	r18, r18
 31e:	30 7f       	andi	r19, 0xF0	; 240
 320:	8f 70       	andi	r24, 0x0F	; 15
 322:	83 2b       	or	r24, r19
 324:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 328:	08 95       	ret
 32a:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	fc 01       	movw	r30, r24
 334:	e0 50       	subi	r30, 0x00	; 0
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	80 81       	ld	r24, Z
 33a:	98 2f       	mov	r25, r24
 33c:	9f 70       	andi	r25, 0x0F	; 15
 33e:	82 2f       	mov	r24, r18
 340:	80 7f       	andi	r24, 0xF0	; 240
 342:	89 2b       	or	r24, r25
 344:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 348:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 34c:	80 81       	ld	r24, Z
 34e:	91 81       	ldd	r25, Z+1	; 0x01
 350:	80 7f       	andi	r24, 0xF0	; 240
 352:	99 27       	eor	r25, r25
 354:	95 95       	asr	r25
 356:	87 95       	ror	r24
 358:	95 95       	asr	r25
 35a:	87 95       	ror	r24
 35c:	95 95       	asr	r25
 35e:	87 95       	ror	r24
 360:	95 95       	asr	r25
 362:	87 95       	ror	r24
 364:	92 2f       	mov	r25, r18
 366:	90 7f       	andi	r25, 0xF0	; 240
 368:	89 2b       	or	r24, r25
 36a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 36e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 372:	20 81       	ld	r18, Z
 374:	31 81       	ldd	r19, Z+1	; 0x01
 376:	22 27       	eor	r18, r18
 378:	3f 70       	andi	r19, 0x0F	; 15
 37a:	80 7f       	andi	r24, 0xF0	; 240
 37c:	83 2b       	or	r24, r19
 37e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 382:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 386:	91 81       	ldd	r25, Z+1	; 0x01
 388:	92 95       	swap	r25
 38a:	9f 70       	andi	r25, 0x0F	; 15
 38c:	80 7f       	andi	r24, 0xF0	; 240
 38e:	89 2b       	or	r24, r25
 390:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 394:	08 95       	ret

00000396 <printAt>:
		}
	}
	return true;
} 

void printAt(long num, int pos) {
 396:	cf 92       	push	r12
 398:	df 92       	push	r13
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <printAt+0x12>
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	6b 01       	movw	r12, r22
 3ae:	7c 01       	movw	r14, r24
 3b0:	8a 01       	movw	r16, r20
	lock(&m);
 3b2:	8a e2       	ldi	r24, 0x2A	; 42
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <lock>
	//LCD_clear();// Den här ar vi lagt till ------------------------------------------------------------------
    pp = pos;
 3ba:	10 93 33 01 	sts	0x0133, r17	; 0x800133 <pp+0x1>
 3be:	00 93 32 01 	sts	0x0132, r16	; 0x800132 <pp>
}

void writeChar(char ch, int pos){ // Den här har vi lagt till -------------------------------------------------------
	int i = 0;
    // if outside supported range, do nothing
    if(pos < 0 || pos > 5) {
 3c2:	06 30       	cpi	r16, 0x06	; 6
 3c4:	11 05       	cpc	r17, r1
 3c6:	b0 f1       	brcs	.+108    	; 0x434 <__DATA_REGION_LENGTH__+0x34>
void printAt(long num, int pos) {
	lock(&m);
	//LCD_clear();// Den här ar vi lagt till ------------------------------------------------------------------
    pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
	for(volatile int i=0;i<10000;i++);
 3c8:	1a 82       	std	Y+2, r1	; 0x02
 3ca:	19 82       	std	Y+1, r1	; 0x01
 3cc:	89 81       	ldd	r24, Y+1	; 0x01
 3ce:	9a 81       	ldd	r25, Y+2	; 0x02
 3d0:	80 31       	cpi	r24, 0x10	; 16
 3d2:	97 42       	sbci	r25, 0x27	; 39
 3d4:	54 f4       	brge	.+20     	; 0x3ea <printAt+0x54>
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	9a 81       	ldd	r25, Y+2	; 0x02
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	9a 83       	std	Y+2, r25	; 0x02
 3de:	89 83       	std	Y+1, r24	; 0x01
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	9a 81       	ldd	r25, Y+2	; 0x02
 3e4:	80 31       	cpi	r24, 0x10	; 16
 3e6:	97 42       	sbci	r25, 0x27	; 39
 3e8:	b4 f3       	brlt	.-20     	; 0x3d6 <printAt+0x40>
    pp++;
 3ea:	0f 5f       	subi	r16, 0xFF	; 255
 3ec:	1f 4f       	sbci	r17, 0xFF	; 255
 3ee:	10 93 33 01 	sts	0x0133, r17	; 0x800133 <pp+0x1>
 3f2:	00 93 32 01 	sts	0x0132, r16	; 0x800132 <pp>
}

void writeChar(char ch, int pos){ // Den här har vi lagt till -------------------------------------------------------
	int i = 0;
    // if outside supported range, do nothing
    if(pos < 0 || pos > 5) {
 3f6:	06 30       	cpi	r16, 0x06	; 6
 3f8:	11 05       	cpc	r17, r1
 3fa:	68 f4       	brcc	.+26     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
 3fc:	c7 01       	movw	r24, r14
 3fe:	b6 01       	movw	r22, r12
 400:	2a e0       	ldi	r18, 0x0A	; 10
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	50 e0       	ldi	r21, 0x00	; 0
 408:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__divmodsi4>
 40c:	86 2f       	mov	r24, r22
 40e:	b8 01       	movw	r22, r16
 410:	80 5d       	subi	r24, 0xD0	; 208
 412:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar.part.0>
    pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
	for(volatile int i=0;i<10000;i++);
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m);
 416:	8a e2       	ldi	r24, 0x2A	; 42
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	0e 94 34 04 	call	0x868	; 0x868 <unlock>
}
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	ff 90       	pop	r15
 42c:	ef 90       	pop	r14
 42e:	df 90       	pop	r13
 430:	cf 90       	pop	r12
 432:	08 95       	ret
 434:	c7 01       	movw	r24, r14
 436:	b6 01       	movw	r22, r12
 438:	24 e6       	ldi	r18, 0x64	; 100
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__divmodsi4>
 444:	2a e0       	ldi	r18, 0x0A	; 10
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	40 e0       	ldi	r20, 0x00	; 0
 44a:	50 e0       	ldi	r21, 0x00	; 0
 44c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__divmodsi4>
 450:	b8 01       	movw	r22, r16
 452:	80 e3       	ldi	r24, 0x30	; 48
 454:	82 0f       	add	r24, r18
 456:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar.part.0>
 45a:	00 91 32 01 	lds	r16, 0x0132	; 0x800132 <pp>
 45e:	10 91 33 01 	lds	r17, 0x0133	; 0x800133 <pp+0x1>
 462:	b2 cf       	rjmp	.-156    	; 0x3c8 <printAt+0x32>

00000464 <computePrimes>:

void computePrimes(int pos) {
 464:	ec 01       	movw	r28, r24
	
    long n;
    for(n = 1; ; n++) {
 466:	81 2c       	mov	r8, r1
 468:	91 2c       	mov	r9, r1
 46a:	54 01       	movw	r10, r8
 46c:	83 94       	inc	r8

}

bool is_prime(long i) { // Den här har vi lagt till -------------------------------------------------------
	// check if i is divisible with any number that is not 1 or itself
	for (int j = 2; j < i; j++) {
 46e:	83 e0       	ldi	r24, 0x03	; 3
 470:	88 16       	cp	r8, r24
 472:	91 04       	cpc	r9, r1
 474:	a1 04       	cpc	r10, r1
 476:	b1 04       	cpc	r11, r1
 478:	e4 f0       	brlt	.+56     	; 0x4b2 <computePrimes+0x4e>
		if(i % j == 0) {
 47a:	80 fe       	sbrs	r8, 0
 47c:	1f c0       	rjmp	.+62     	; 0x4bc <computePrimes+0x58>
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	c8 2e       	mov	r12, r24
 482:	d1 2c       	mov	r13, r1
 484:	e1 2c       	mov	r14, r1
 486:	f1 2c       	mov	r15, r1
 488:	0d c0       	rjmp	.+26     	; 0x4a4 <computePrimes+0x40>
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	c8 1a       	sub	r12, r24
 48e:	d8 0a       	sbc	r13, r24
 490:	e8 0a       	sbc	r14, r24
 492:	f8 0a       	sbc	r15, r24
 494:	c5 01       	movw	r24, r10
 496:	b4 01       	movw	r22, r8
 498:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__divmodsi4>
 49c:	67 2b       	or	r22, r23
 49e:	68 2b       	or	r22, r24
 4a0:	69 2b       	or	r22, r25
 4a2:	61 f0       	breq	.+24     	; 0x4bc <computePrimes+0x58>

}

bool is_prime(long i) { // Den här har vi lagt till -------------------------------------------------------
	// check if i is divisible with any number that is not 1 or itself
	for (int j = 2; j < i; j++) {
 4a4:	96 01       	movw	r18, r12
 4a6:	a7 01       	movw	r20, r14
 4a8:	c8 14       	cp	r12, r8
 4aa:	d9 04       	cpc	r13, r9
 4ac:	ea 04       	cpc	r14, r10
 4ae:	fb 04       	cpc	r15, r11
 4b0:	61 f7       	brne	.-40     	; 0x48a <computePrimes+0x26>
	
    long n;
    for(n = 1; ; n++) {
        if (is_prime(n)) {
			;
            printAt(n, pos);
 4b2:	ae 01       	movw	r20, r28
 4b4:	c5 01       	movw	r24, r10
 4b6:	b4 01       	movw	r22, r8
 4b8:	0e 94 cb 01 	call	0x396	; 0x396 <printAt>
}

void computePrimes(int pos) {
	
    long n;
    for(n = 1; ; n++) {
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	88 1a       	sub	r8, r24
 4c0:	98 0a       	sbc	r9, r24
 4c2:	a8 0a       	sbc	r10, r24
 4c4:	b8 0a       	sbc	r11, r24
        if (is_prime(n)) {
			;
            printAt(n, pos);
			
        }
    }
 4c6:	d3 cf       	rjmp	.-90     	; 0x46e <computePrimes+0xa>

000004c8 <main>:
	
}

int main() {
	CLKPR = (0x80);
 4c8:	e1 e6       	ldi	r30, 0x61	; 97
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 e8       	ldi	r24, 0x80	; 128
 4ce:	80 83       	st	Z, r24
	CLKPR = (0x00);
 4d0:	10 82       	st	Z, r1

	
void LCD_init() { // Den här har vi lagt till -------------------------------------------------------
	
	// Asynchronous clock, 1/3 bias, 1/4 duty cycle,   25 segments
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
 4d2:	87 eb       	ldi	r24, 0xB7	; 183
 4d4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	// Set volt to 3.35V
	LCDCCR = (1<<LCDCC3) |(1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
 4d8:	8f e0       	ldi	r24, 0x0F	; 15
 4da:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	//Clock division factor to 8, and prescaler to 16
	LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 4de:	87 e0       	ldi	r24, 0x07	; 7
 4e0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	//low power waveform, no frame interrupt, no blanking
	LCDCRA = (1<<LCDAB) | (1<<LCDEN);
 4e4:	80 ec       	ldi	r24, 0xC0	; 192
 4e6:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

int main() {
	CLKPR = (0x80);
	CLKPR = (0x00);
	LCD_init();
    spawn(computePrimes, 0);
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	82 e3       	ldi	r24, 0x32	; 50
 4f0:	92 e0       	ldi	r25, 0x02	; 2
 4f2:	0e 94 9f 02 	call	0x53e	; 0x53e <spawn>
	computePrimes(3);
 4f6:	83 e0       	ldi	r24, 0x03	; 3
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 32 02 	call	0x464	; 0x464 <computePrimes>

000004fe <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	00 d0       	rcall	.+0      	; 0x504 <__stack+0x5>
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62
 508:	9a 83       	std	Y+2, r25	; 0x02
 50a:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 50c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 510:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 514:	06 96       	adiw	r24, 0x06	; 6
 516:	0e 94 b2 04 	call	0x964	; 0x964 <setjmp>
 51a:	89 2b       	or	r24, r25
 51c:	29 f0       	breq	.+10     	; 0x528 <__stack+0x29>
        current = next;
        longjmp(next->context,1);
    }
}
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	08 95       	ret
    return p;
}

static void dispatch(thread next) {
    if (setjmp(current->context) == 0) {
        current = next;
 528:	89 81       	ldd	r24, Y+1	; 0x01
 52a:	9a 81       	ldd	r25, Y+2	; 0x02
 52c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <current+0x1>
 530:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <current>
        longjmp(next->context,1);
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	06 96       	adiw	r24, 0x06	; 6
 53a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <longjmp>

0000053e <spawn>:
    }
}

void spawn(void (* function)(int), int arg) {
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	00 d0       	rcall	.+0      	; 0x544 <spawn+0x6>
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 548:	f8 94       	cli
    if (!initialized) initialize();
 54a:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <initialized>
 54e:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <initialized+0x1>
 552:	23 2b       	or	r18, r19
 554:	09 f4       	brne	.+2      	; 0x558 <spawn+0x1a>
 556:	43 c0       	rjmp	.+134    	; 0x5de <spawn+0xa0>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 558:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <freeQ>
 55c:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <freeQ+0x1>
 560:	3a 83       	std	Y+2, r19	; 0x02
 562:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 564:	23 2b       	or	r18, r19
 566:	09 f4       	brne	.+2      	; 0x56a <spawn+0x2c>
 568:	7f c0       	rjmp	.+254    	; 0x668 <spawn+0x12a>
        *queue = (*queue)->next;
 56a:	e9 81       	ldd	r30, Y+1	; 0x01
 56c:	fa 81       	ldd	r31, Y+2	; 0x02
 56e:	44 81       	ldd	r20, Z+4	; 0x04
 570:	55 81       	ldd	r21, Z+5	; 0x05
 572:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <freeQ+0x1>
 576:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 57a:	91 83       	std	Z+1, r25	; 0x01
 57c:	80 83       	st	Z, r24
    newp->arg = arg;
 57e:	73 83       	std	Z+3, r23	; 0x03
 580:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 582:	15 82       	std	Z+5, r1	; 0x05
 584:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 586:	cf 01       	movw	r24, r30
 588:	06 96       	adiw	r24, 0x06	; 6
 58a:	0e 94 b2 04 	call	0x964	; 0x964 <setjmp>
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	09 f4       	brne	.+2      	; 0x594 <spawn+0x56>
 592:	77 c0       	rjmp	.+238    	; 0x682 <spawn+0x144>
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);
 594:	e9 81       	ldd	r30, Y+1	; 0x01
 596:	fa 81       	ldd	r31, Y+2	; 0x02
 598:	36 96       	adiw	r30, 0x06	; 6
 59a:	89 81       	ldd	r24, Y+1	; 0x01
 59c:	9a 81       	ldd	r25, Y+2	; 0x02
 59e:	87 59       	subi	r24, 0x97	; 151
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	91 8b       	std	Z+17, r25	; 0x11
 5a4:	80 8b       	std	Z+16, r24	; 0x10
 5a6:	93 8b       	std	Z+19, r25	; 0x13
 5a8:	82 8b       	std	Z+18, r24	; 0x12

ISR(TIMER1_COMPA_vect) { // Step 2
	yield();
}
static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 5aa:	e9 81       	ldd	r30, Y+1	; 0x01
 5ac:	fa 81       	ldd	r31, Y+2	; 0x02
 5ae:	15 82       	std	Z+5, r1	; 0x05
 5b0:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 5b2:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <readyQ>
 5b6:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <readyQ+0x1>
 5ba:	30 97       	sbiw	r30, 0x00	; 0
 5bc:	11 f4       	brne	.+4      	; 0x5c2 <spawn+0x84>
 5be:	55 c0       	rjmp	.+170    	; 0x66a <spawn+0x12c>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 5c0:	fc 01       	movw	r30, r24
 5c2:	84 81       	ldd	r24, Z+4	; 0x04
 5c4:	95 81       	ldd	r25, Z+5	; 0x05
 5c6:	00 97       	sbiw	r24, 0x00	; 0
 5c8:	d9 f7       	brne	.-10     	; 0x5c0 <spawn+0x82>
            q = q->next;
        q->next = p;
 5ca:	89 81       	ldd	r24, Y+1	; 0x01
 5cc:	9a 81       	ldd	r25, Y+2	; 0x02
 5ce:	95 83       	std	Z+5, r25	; 0x05
 5d0:	84 83       	std	Z+4, r24	; 0x04
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 5d2:	78 94       	sei
}
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 5de:	2e e0       	ldi	r18, 0x0E	; 14
 5e0:	32 e0       	ldi	r19, 0x02	; 2
 5e2:	30 93 a6 01 	sts	0x01A6, r19	; 0x8001a6 <threads+0x5>
 5e6:	20 93 a5 01 	sts	0x01A5, r18	; 0x8001a5 <threads+0x4>
 5ea:	2b e7       	ldi	r18, 0x7B	; 123
 5ec:	32 e0       	ldi	r19, 0x02	; 2
 5ee:	30 93 13 02 	sts	0x0213, r19	; 0x800213 <threads+0x72>
 5f2:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <threads+0x71>
 5f6:	28 ee       	ldi	r18, 0xE8	; 232
 5f8:	32 e0       	ldi	r19, 0x02	; 2
 5fa:	30 93 80 02 	sts	0x0280, r19	; 0x800280 <threads+0xdf>
 5fe:	20 93 7f 02 	sts	0x027F, r18	; 0x80027f <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 602:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <threads+0x14c>
 606:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <threads+0x14b>
	
	
	// Set the pull-up resistor for the joystick
	PORTB |= (1<<7);
 60a:	2f 9a       	sbi	0x05, 7	; 5
	

	// Enable interrupts
	EIMSK |= (1<<PCIE1); // 7th bit enabled for PCIE1 (1<<7)
 60c:	ef 9a       	sbi	0x1d, 7	; 29
	PCMSK1 |= (1<<PCINT15); // 7th bit enabled for PCINT (1<<7)
 60e:	ec e6       	ldi	r30, 0x6C	; 108
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	20 81       	ld	r18, Z
 614:	20 68       	ori	r18, 0x80	; 128
 616:	20 83       	st	Z, r18

	// 8Mh clock

	// Set OC1A to 1
	TCCR1A |= (1<<COM1A0) | (1<<COM1A1); 
 618:	e0 e8       	ldi	r30, 0x80	; 128
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	20 81       	ld	r18, Z
 61e:	20 6c       	ori	r18, 0xC0	; 192
 620:	20 83       	st	Z, r18
	// Set the mode to CTC and prescaler to 1024
	TCCR1B |= (1<<WGM12) | (1<<CS10) | (1<<CS12); 
 622:	e1 e8       	ldi	r30, 0x81	; 129
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	20 81       	ld	r18, Z
 628:	2d 60       	ori	r18, 0x0D	; 13
 62a:	20 83       	st	Z, r18
	//Activate "timer output"
	TIMSK1 |= (1<<OCIE1A); 
 62c:	ef e6       	ldi	r30, 0x6F	; 111
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	20 81       	ld	r18, Z
 632:	22 60       	ori	r18, 0x02	; 2
 634:	20 83       	st	Z, r18
	
	
	OCR1A = 391; //8000000/1024 * 0.05 (391)
 636:	27 e8       	ldi	r18, 0x87	; 135
 638:	31 e0       	ldi	r19, 0x01	; 1
 63a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 63e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	
	// set timer to 0
	TCNT1 = 0;
 642:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 646:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    initialized = 1;
 64a:	21 e0       	ldi	r18, 0x01	; 1
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <initialized+0x1>
 652:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <initialized>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 656:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <freeQ>
 65a:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <freeQ+0x1>
 65e:	3a 83       	std	Y+2, r19	; 0x02
 660:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 662:	23 2b       	or	r18, r19
 664:	09 f0       	breq	.+2      	; 0x668 <spawn+0x12a>
 666:	81 cf       	rjmp	.-254    	; 0x56a <spawn+0x2c>
 668:	ff cf       	rjmp	.-2      	; 0x668 <spawn+0x12a>
	yield();
}
static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 66a:	29 81       	ldd	r18, Y+1	; 0x01
 66c:	3a 81       	ldd	r19, Y+2	; 0x02
 66e:	30 93 31 01 	sts	0x0131, r19	; 0x800131 <readyQ+0x1>
 672:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 676:	78 94       	sei
}
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	08 95       	ret
    newp = dequeue(&freeQ);
    newp->function = function;
    newp->arg = arg;
    newp->next = NULL;
    if (setjmp(newp->context) == 1) {
        ENABLE();
 682:	78 94       	sei
        current->function(current->arg);
 684:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 688:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
 68c:	ed 91       	ld	r30, X+
 68e:	fc 91       	ld	r31, X
 690:	11 97       	sbiw	r26, 0x01	; 1
 692:	12 96       	adiw	r26, 0x02	; 2
 694:	8d 91       	ld	r24, X+
 696:	9c 91       	ld	r25, X
 698:	13 97       	sbiw	r26, 0x03	; 3
 69a:	09 95       	icall
        DISABLE();
 69c:	f8 94       	cli
        enqueue(current, &freeQ);
 69e:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 6a2:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>

ISR(TIMER1_COMPA_vect) { // Step 2
	yield();
}
static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 6a6:	15 96       	adiw	r26, 0x05	; 5
 6a8:	1c 92       	st	X, r1
 6aa:	1e 92       	st	-X, r1
 6ac:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 6ae:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <freeQ>
 6b2:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <freeQ+0x1>
 6b6:	30 97       	sbiw	r30, 0x00	; 0
 6b8:	11 f4       	brne	.+4      	; 0x6be <spawn+0x180>
 6ba:	17 c0       	rjmp	.+46     	; 0x6ea <spawn+0x1ac>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 6bc:	fc 01       	movw	r30, r24
 6be:	84 81       	ldd	r24, Z+4	; 0x04
 6c0:	95 81       	ldd	r25, Z+5	; 0x05
 6c2:	00 97       	sbiw	r24, 0x00	; 0
 6c4:	d9 f7       	brne	.-10     	; 0x6bc <spawn+0x17e>
            q = q->next;
        q->next = p;
 6c6:	b5 83       	std	Z+5, r27	; 0x05
 6c8:	a4 83       	std	Z+4, r26	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 6ca:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <readyQ>
 6ce:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <readyQ+0x1>
    if (*queue) {
 6d2:	00 97       	sbiw	r24, 0x00	; 0
 6d4:	a1 f0       	breq	.+40     	; 0x6fe <spawn+0x1c0>
        *queue = (*queue)->next;
 6d6:	fc 01       	movw	r30, r24
 6d8:	24 81       	ldd	r18, Z+4	; 0x04
 6da:	35 81       	ldd	r19, Z+5	; 0x05
 6dc:	30 93 31 01 	sts	0x0131, r19	; 0x800131 <readyQ+0x1>
 6e0:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 6e4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <dispatch>
 6e8:	55 cf       	rjmp	.-342    	; 0x594 <spawn+0x56>
	yield();
}
static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 6ea:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <freeQ+0x1>
 6ee:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <freeQ>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 6f2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <readyQ>
 6f6:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <readyQ+0x1>
    if (*queue) {
 6fa:	00 97       	sbiw	r24, 0x00	; 0
 6fc:	61 f7       	brne	.-40     	; 0x6d6 <spawn+0x198>
 6fe:	ff cf       	rjmp	.-2      	; 0x6fe <spawn+0x1c0>

00000700 <yield>:
    ENABLE();
}

void yield(void) {
	
	DISABLE();
 700:	f8 94       	cli
	enqueue(current,(&readyQ));
 702:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 706:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>

ISR(TIMER1_COMPA_vect) { // Step 2
	yield();
}
static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 70a:	fc 01       	movw	r30, r24
 70c:	15 82       	std	Z+5, r1	; 0x05
 70e:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 710:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <readyQ>
 714:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <readyQ+0x1>
 718:	10 97       	sbiw	r26, 0x00	; 0
 71a:	b9 f0       	breq	.+46     	; 0x74a <yield+0x4a>
 71c:	fd 01       	movw	r30, r26
 71e:	01 c0       	rjmp	.+2      	; 0x722 <yield+0x22>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 720:	f9 01       	movw	r30, r18
 722:	24 81       	ldd	r18, Z+4	; 0x04
 724:	35 81       	ldd	r19, Z+5	; 0x05
 726:	21 15       	cp	r18, r1
 728:	31 05       	cpc	r19, r1
 72a:	d1 f7       	brne	.-12     	; 0x720 <yield+0x20>
            q = q->next;
        q->next = p;
 72c:	95 83       	std	Z+5, r25	; 0x05
 72e:	84 83       	std	Z+4, r24	; 0x04
 730:	14 96       	adiw	r26, 0x04	; 4
 732:	2d 91       	ld	r18, X+
 734:	3c 91       	ld	r19, X
 736:	15 97       	sbiw	r26, 0x05	; 5
 738:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 73a:	30 93 31 01 	sts	0x0131, r19	; 0x800131 <readyQ+0x1>
 73e:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <readyQ>

void yield(void) {
	
	DISABLE();
	enqueue(current,(&readyQ));
	dispatch(dequeue(&readyQ));
 742:	0e 94 7f 02 	call	0x4fe	; 0x4fe <dispatch>
	ENABLE();
 746:	78 94       	sei
}
 748:	08 95       	ret
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 74a:	00 97       	sbiw	r24, 0x00	; 0
 74c:	09 f4       	brne	.+2      	; 0x750 <yield+0x50>
 74e:	ff cf       	rjmp	.-2      	; 0x74e <yield+0x4e>
 750:	20 e0       	ldi	r18, 0x00	; 0
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	f2 cf       	rjmp	.-28     	; 0x73a <yield+0x3a>

00000756 <__vector_3>:
	// set timer to 0
	TCNT1 = 0;
    initialized = 1;
}

ISR(PCINT1_vect) { // Step 2
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	2f 93       	push	r18
 762:	3f 93       	push	r19
 764:	4f 93       	push	r20
 766:	5f 93       	push	r21
 768:	6f 93       	push	r22
 76a:	7f 93       	push	r23
 76c:	8f 93       	push	r24
 76e:	9f 93       	push	r25
 770:	af 93       	push	r26
 772:	bf 93       	push	r27
 774:	ef 93       	push	r30
 776:	ff 93       	push	r31
	// Check the status of PORTB bit 7 before calling yield()
	if (PORTB & (1<<7)) {
 778:	2f 99       	sbic	0x05, 7	; 5
 77a:	11 c0       	rjmp	.+34     	; 0x79e <__vector_3+0x48>
		yield();
	}
}
 77c:	ff 91       	pop	r31
 77e:	ef 91       	pop	r30
 780:	bf 91       	pop	r27
 782:	af 91       	pop	r26
 784:	9f 91       	pop	r25
 786:	8f 91       	pop	r24
 788:	7f 91       	pop	r23
 78a:	6f 91       	pop	r22
 78c:	5f 91       	pop	r21
 78e:	4f 91       	pop	r20
 790:	3f 91       	pop	r19
 792:	2f 91       	pop	r18
 794:	0f 90       	pop	r0
 796:	0f be       	out	0x3f, r0	; 63
 798:	0f 90       	pop	r0
 79a:	1f 90       	pop	r1
 79c:	18 95       	reti
}

ISR(PCINT1_vect) { // Step 2
	// Check the status of PORTB bit 7 before calling yield()
	if (PORTB & (1<<7)) {
		yield();
 79e:	0e 94 80 03 	call	0x700	; 0x700 <yield>
	}
}
 7a2:	ec cf       	rjmp	.-40     	; 0x77c <__vector_3+0x26>

000007a4 <__vector_7>:

ISR(TIMER1_COMPA_vect) { // Step 2
 7a4:	1f 92       	push	r1
 7a6:	0f 92       	push	r0
 7a8:	0f b6       	in	r0, 0x3f	; 63
 7aa:	0f 92       	push	r0
 7ac:	11 24       	eor	r1, r1
 7ae:	2f 93       	push	r18
 7b0:	3f 93       	push	r19
 7b2:	4f 93       	push	r20
 7b4:	5f 93       	push	r21
 7b6:	6f 93       	push	r22
 7b8:	7f 93       	push	r23
 7ba:	8f 93       	push	r24
 7bc:	9f 93       	push	r25
 7be:	af 93       	push	r26
 7c0:	bf 93       	push	r27
 7c2:	ef 93       	push	r30
 7c4:	ff 93       	push	r31
	yield();
 7c6:	0e 94 80 03 	call	0x700	; 0x700 <yield>
}
 7ca:	ff 91       	pop	r31
 7cc:	ef 91       	pop	r30
 7ce:	bf 91       	pop	r27
 7d0:	af 91       	pop	r26
 7d2:	9f 91       	pop	r25
 7d4:	8f 91       	pop	r24
 7d6:	7f 91       	pop	r23
 7d8:	6f 91       	pop	r22
 7da:	5f 91       	pop	r21
 7dc:	4f 91       	pop	r20
 7de:	3f 91       	pop	r19
 7e0:	2f 91       	pop	r18
 7e2:	0f 90       	pop	r0
 7e4:	0f be       	out	0x3f, r0	; 63
 7e6:	0f 90       	pop	r0
 7e8:	1f 90       	pop	r1
 7ea:	18 95       	reti

000007ec <lock>:
	enqueue(current,(&readyQ));
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 7ec:	cf 93       	push	r28
 7ee:	df 93       	push	r29
 7f0:	dc 01       	movw	r26, r24
	DISABLE();
 7f2:	f8 94       	cli
	if(m ->locked  == 0) {
 7f4:	8d 91       	ld	r24, X+
 7f6:	9c 91       	ld	r25, X
 7f8:	11 97       	sbiw	r26, 0x01	; 1
 7fa:	89 2b       	or	r24, r25
 7fc:	41 f1       	breq	.+80     	; 0x84e <lock+0x62>
		m ->locked  = 1;	
	}
	else {
		enqueue(current,&(m ->waitQ));
 7fe:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <current>
 802:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <current+0x1>

ISR(TIMER1_COMPA_vect) { // Step 2
	yield();
}
static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 806:	1d 82       	std	Y+5, r1	; 0x05
 808:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 80a:	12 96       	adiw	r26, 0x02	; 2
 80c:	ed 91       	ld	r30, X+
 80e:	fc 91       	ld	r31, X
 810:	13 97       	sbiw	r26, 0x03	; 3
 812:	30 97       	sbiw	r30, 0x00	; 0
 814:	11 f4       	brne	.+4      	; 0x81a <lock+0x2e>
 816:	23 c0       	rjmp	.+70     	; 0x85e <lock+0x72>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 818:	fc 01       	movw	r30, r24
 81a:	84 81       	ldd	r24, Z+4	; 0x04
 81c:	95 81       	ldd	r25, Z+5	; 0x05
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	d9 f7       	brne	.-10     	; 0x818 <lock+0x2c>
            q = q->next;
        q->next = p;
 822:	d5 83       	std	Z+5, r29	; 0x05
 824:	c4 83       	std	Z+4, r28	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 826:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <readyQ>
 82a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <readyQ+0x1>
    if (*queue) {
 82e:	00 97       	sbiw	r24, 0x00	; 0
 830:	69 f0       	breq	.+26     	; 0x84c <lock+0x60>
        *queue = (*queue)->next;
 832:	fc 01       	movw	r30, r24
 834:	24 81       	ldd	r18, Z+4	; 0x04
 836:	35 81       	ldd	r19, Z+5	; 0x05
 838:	30 93 31 01 	sts	0x0131, r19	; 0x800131 <readyQ+0x1>
 83c:	20 93 30 01 	sts	0x0130, r18	; 0x800130 <readyQ>
	if(m ->locked  == 0) {
		m ->locked  = 1;	
	}
	else {
		enqueue(current,&(m ->waitQ));
		dispatch(dequeue(&readyQ));
 840:	0e 94 7f 02 	call	0x4fe	; 0x4fe <dispatch>
	}
	ENABLE();
 844:	78 94       	sei
}
 846:	df 91       	pop	r29
 848:	cf 91       	pop	r28
 84a:	08 95       	ret
 84c:	ff cf       	rjmp	.-2      	; 0x84c <lock+0x60>
}

void lock(mutex *m) {
	DISABLE();
	if(m ->locked  == 0) {
		m ->locked  = 1;	
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	8d 93       	st	X+, r24
 854:	9c 93       	st	X, r25
	}
	else {
		enqueue(current,&(m ->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 856:	78 94       	sei
}
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	08 95       	ret
	yield();
}
static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 85e:	13 96       	adiw	r26, 0x03	; 3
 860:	dc 93       	st	X, r29
 862:	ce 93       	st	-X, r28
 864:	12 97       	sbiw	r26, 0x02	; 2
 866:	df cf       	rjmp	.-66     	; 0x826 <lock+0x3a>

00000868 <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	fc 01       	movw	r30, r24
	DISABLE();
 86e:	f8 94       	cli
	if(m -> waitQ == NULL) {
 870:	82 81       	ldd	r24, Z+2	; 0x02
 872:	93 81       	ldd	r25, Z+3	; 0x03
 874:	89 2b       	or	r24, r25
 876:	51 f1       	breq	.+84     	; 0x8cc <unlock+0x64>
		m ->locked  = 0;
	}
	else {
		enqueue(current, (&readyQ));
 878:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <current>
 87c:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <current+0x1>

ISR(TIMER1_COMPA_vect) { // Step 2
	yield();
}
static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 880:	1d 82       	std	Y+5, r1	; 0x05
 882:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 884:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <readyQ>
 888:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <readyQ+0x1>
 88c:	10 97       	sbiw	r26, 0x00	; 0
 88e:	11 f4       	brne	.+4      	; 0x894 <unlock+0x2c>
 890:	23 c0       	rjmp	.+70     	; 0x8d8 <unlock+0x70>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 892:	dc 01       	movw	r26, r24
 894:	14 96       	adiw	r26, 0x04	; 4
 896:	8d 91       	ld	r24, X+
 898:	9c 91       	ld	r25, X
 89a:	15 97       	sbiw	r26, 0x05	; 5
 89c:	00 97       	sbiw	r24, 0x00	; 0
 89e:	c9 f7       	brne	.-14     	; 0x892 <unlock+0x2a>
            q = q->next;
        q->next = p;
 8a0:	15 96       	adiw	r26, 0x05	; 5
 8a2:	dc 93       	st	X, r29
 8a4:	ce 93       	st	-X, r28
 8a6:	14 97       	sbiw	r26, 0x04	; 4
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 8a8:	82 81       	ldd	r24, Z+2	; 0x02
 8aa:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 8ac:	00 97       	sbiw	r24, 0x00	; 0
 8ae:	69 f0       	breq	.+26     	; 0x8ca <unlock+0x62>
        *queue = (*queue)->next;
 8b0:	dc 01       	movw	r26, r24
 8b2:	14 96       	adiw	r26, 0x04	; 4
 8b4:	2d 91       	ld	r18, X+
 8b6:	3c 91       	ld	r19, X
 8b8:	15 97       	sbiw	r26, 0x05	; 5
 8ba:	33 83       	std	Z+3, r19	; 0x03
 8bc:	22 83       	std	Z+2, r18	; 0x02
	if(m -> waitQ == NULL) {
		m ->locked  = 0;
	}
	else {
		enqueue(current, (&readyQ));
		dispatch(dequeue(&(m -> waitQ)));
 8be:	0e 94 7f 02 	call	0x4fe	; 0x4fe <dispatch>
	}
	
	ENABLE();
 8c2:	78 94       	sei
}
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	08 95       	ret
 8ca:	ff cf       	rjmp	.-2      	; 0x8ca <unlock+0x62>
}

void unlock(mutex *m) {
	DISABLE();
	if(m -> waitQ == NULL) {
		m ->locked  = 0;
 8cc:	11 82       	std	Z+1, r1	; 0x01
 8ce:	10 82       	st	Z, r1
	else {
		enqueue(current, (&readyQ));
		dispatch(dequeue(&(m -> waitQ)));
	}
	
	ENABLE();
 8d0:	78 94       	sei
}
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	08 95       	ret
	yield();
}
static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 8d8:	d0 93 31 01 	sts	0x0131, r29	; 0x800131 <readyQ+0x1>
 8dc:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <readyQ>
 8e0:	e3 cf       	rjmp	.-58     	; 0x8a8 <unlock+0x40>

000008e2 <__divmodsi4>:
 8e2:	05 2e       	mov	r0, r21
 8e4:	97 fb       	bst	r25, 7
 8e6:	1e f4       	brtc	.+6      	; 0x8ee <__divmodsi4+0xc>
 8e8:	00 94       	com	r0
 8ea:	0e 94 88 04 	call	0x910	; 0x910 <__negsi2>
 8ee:	57 fd       	sbrc	r21, 7
 8f0:	07 d0       	rcall	.+14     	; 0x900 <__divmodsi4_neg2>
 8f2:	0e 94 90 04 	call	0x920	; 0x920 <__udivmodsi4>
 8f6:	07 fc       	sbrc	r0, 7
 8f8:	03 d0       	rcall	.+6      	; 0x900 <__divmodsi4_neg2>
 8fa:	4e f4       	brtc	.+18     	; 0x90e <__divmodsi4_exit>
 8fc:	0c 94 88 04 	jmp	0x910	; 0x910 <__negsi2>

00000900 <__divmodsi4_neg2>:
 900:	50 95       	com	r21
 902:	40 95       	com	r20
 904:	30 95       	com	r19
 906:	21 95       	neg	r18
 908:	3f 4f       	sbci	r19, 0xFF	; 255
 90a:	4f 4f       	sbci	r20, 0xFF	; 255
 90c:	5f 4f       	sbci	r21, 0xFF	; 255

0000090e <__divmodsi4_exit>:
 90e:	08 95       	ret

00000910 <__negsi2>:
 910:	90 95       	com	r25
 912:	80 95       	com	r24
 914:	70 95       	com	r23
 916:	61 95       	neg	r22
 918:	7f 4f       	sbci	r23, 0xFF	; 255
 91a:	8f 4f       	sbci	r24, 0xFF	; 255
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	08 95       	ret

00000920 <__udivmodsi4>:
 920:	a1 e2       	ldi	r26, 0x21	; 33
 922:	1a 2e       	mov	r1, r26
 924:	aa 1b       	sub	r26, r26
 926:	bb 1b       	sub	r27, r27
 928:	fd 01       	movw	r30, r26
 92a:	0d c0       	rjmp	.+26     	; 0x946 <__udivmodsi4_ep>

0000092c <__udivmodsi4_loop>:
 92c:	aa 1f       	adc	r26, r26
 92e:	bb 1f       	adc	r27, r27
 930:	ee 1f       	adc	r30, r30
 932:	ff 1f       	adc	r31, r31
 934:	a2 17       	cp	r26, r18
 936:	b3 07       	cpc	r27, r19
 938:	e4 07       	cpc	r30, r20
 93a:	f5 07       	cpc	r31, r21
 93c:	20 f0       	brcs	.+8      	; 0x946 <__udivmodsi4_ep>
 93e:	a2 1b       	sub	r26, r18
 940:	b3 0b       	sbc	r27, r19
 942:	e4 0b       	sbc	r30, r20
 944:	f5 0b       	sbc	r31, r21

00000946 <__udivmodsi4_ep>:
 946:	66 1f       	adc	r22, r22
 948:	77 1f       	adc	r23, r23
 94a:	88 1f       	adc	r24, r24
 94c:	99 1f       	adc	r25, r25
 94e:	1a 94       	dec	r1
 950:	69 f7       	brne	.-38     	; 0x92c <__udivmodsi4_loop>
 952:	60 95       	com	r22
 954:	70 95       	com	r23
 956:	80 95       	com	r24
 958:	90 95       	com	r25
 95a:	9b 01       	movw	r18, r22
 95c:	ac 01       	movw	r20, r24
 95e:	bd 01       	movw	r22, r26
 960:	cf 01       	movw	r24, r30
 962:	08 95       	ret

00000964 <setjmp>:
 964:	dc 01       	movw	r26, r24
 966:	2d 92       	st	X+, r2
 968:	3d 92       	st	X+, r3
 96a:	4d 92       	st	X+, r4
 96c:	5d 92       	st	X+, r5
 96e:	6d 92       	st	X+, r6
 970:	7d 92       	st	X+, r7
 972:	8d 92       	st	X+, r8
 974:	9d 92       	st	X+, r9
 976:	ad 92       	st	X+, r10
 978:	bd 92       	st	X+, r11
 97a:	cd 92       	st	X+, r12
 97c:	dd 92       	st	X+, r13
 97e:	ed 92       	st	X+, r14
 980:	fd 92       	st	X+, r15
 982:	0d 93       	st	X+, r16
 984:	1d 93       	st	X+, r17
 986:	cd 93       	st	X+, r28
 988:	dd 93       	st	X+, r29
 98a:	ff 91       	pop	r31
 98c:	ef 91       	pop	r30
 98e:	8d b7       	in	r24, 0x3d	; 61
 990:	8d 93       	st	X+, r24
 992:	8e b7       	in	r24, 0x3e	; 62
 994:	8d 93       	st	X+, r24
 996:	8f b7       	in	r24, 0x3f	; 63
 998:	8d 93       	st	X+, r24
 99a:	ed 93       	st	X+, r30
 99c:	fd 93       	st	X+, r31
 99e:	88 27       	eor	r24, r24
 9a0:	99 27       	eor	r25, r25
 9a2:	09 94       	ijmp

000009a4 <longjmp>:
 9a4:	dc 01       	movw	r26, r24
 9a6:	cb 01       	movw	r24, r22
 9a8:	81 30       	cpi	r24, 0x01	; 1
 9aa:	91 05       	cpc	r25, r1
 9ac:	81 1d       	adc	r24, r1
 9ae:	2d 90       	ld	r2, X+
 9b0:	3d 90       	ld	r3, X+
 9b2:	4d 90       	ld	r4, X+
 9b4:	5d 90       	ld	r5, X+
 9b6:	6d 90       	ld	r6, X+
 9b8:	7d 90       	ld	r7, X+
 9ba:	8d 90       	ld	r8, X+
 9bc:	9d 90       	ld	r9, X+
 9be:	ad 90       	ld	r10, X+
 9c0:	bd 90       	ld	r11, X+
 9c2:	cd 90       	ld	r12, X+
 9c4:	dd 90       	ld	r13, X+
 9c6:	ed 90       	ld	r14, X+
 9c8:	fd 90       	ld	r15, X+
 9ca:	0d 91       	ld	r16, X+
 9cc:	1d 91       	ld	r17, X+
 9ce:	cd 91       	ld	r28, X+
 9d0:	dd 91       	ld	r29, X+
 9d2:	ed 91       	ld	r30, X+
 9d4:	fd 91       	ld	r31, X+
 9d6:	0d 90       	ld	r0, X+
 9d8:	f8 94       	cli
 9da:	fe bf       	out	0x3e, r31	; 62
 9dc:	0f be       	out	0x3f, r0	; 63
 9de:	ed bf       	out	0x3d, r30	; 61
 9e0:	ed 91       	ld	r30, X+
 9e2:	fd 91       	ld	r31, X+
 9e4:	09 94       	ijmp

000009e6 <_exit>:
 9e6:	f8 94       	cli

000009e8 <__stop_program>:
 9e8:	ff cf       	rjmp	.-2      	; 0x9e8 <__stop_program>
