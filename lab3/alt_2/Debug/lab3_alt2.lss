
lab3_alt2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000009a8  00000a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000235  0080012a  0080012a  00000a66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f7  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4d  00000000  00000000  00001f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d5  00000000  00000000  00002be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  000033bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000593  00000000  00000000  0000360c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000afc  00000000  00000000  00003b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000469b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 27 04 	jmp	0x84e	; 0x84e <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 01 04 	jmp	0x802	; 0x802 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 ea       	ldi	r30, 0xA8	; 168
  70:	f9 e0       	ldi	r31, 0x09	; 9
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 32       	cpi	r26, 0x2A	; 42
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e2       	ldi	r26, 0x2A	; 42
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	af 35       	cpi	r26, 0x5F	; 95
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <main>
  92:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
     */

    for (int j = 2; j < i; j++) {
        if(i % j == 0) {
            /* is not prime */
            return false;
  9a:	82 e3       	ldi	r24, 0x32	; 50
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	0e 94 a3 03 	call	0x746	; 0x746 <lock>
  a2:	0e 94 c5 02 	call	0x58a	; 0x58a <addBlinkCounter>
  a6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <getBlinkCounter>
  aa:	0a 97       	sbiw	r24, 0x0a	; 10
  ac:	b4 f3       	brlt	.-20     	; 0x9a <blink>
  ae:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	91 11       	cpse	r25, r1
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <blink+0x28>
  b8:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
  bc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <resetBlinkCounter>
  c0:	ec cf       	rjmp	.-40     	; 0x9a <blink>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	f9 cf       	rjmp	.-14     	; 0xb8 <blink+0x1e>

000000c6 <writeChar.part.0>:
  c6:	81 53       	subi	r24, 0x31	; 49
  c8:	89 30       	cpi	r24, 0x09	; 9
  ca:	08 f0       	brcs	.+2      	; 0xce <writeChar.part.0+0x8>
  cc:	54 c0       	rjmp	.+168    	; 0x176 <writeChar.part.0+0xb0>
  ce:	e8 2f       	mov	r30, r24
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	ee 0f       	add	r30, r30
  d4:	ff 1f       	adc	r31, r31
  d6:	e8 5e       	subi	r30, 0xE8	; 232
  d8:	fe 4f       	sbci	r31, 0xFE	; 254
  da:	80 81       	ld	r24, Z
  dc:	91 81       	ldd	r25, Z+1	; 0x01
  de:	62 30       	cpi	r22, 0x02	; 2
  e0:	71 05       	cpc	r23, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <writeChar.part.0+0x20>
  e4:	4e c0       	rjmp	.+156    	; 0x182 <writeChar.part.0+0xbc>
  e6:	63 30       	cpi	r22, 0x03	; 3
  e8:	71 05       	cpc	r23, r1
  ea:	0c f4       	brge	.+2      	; 0xee <writeChar.part.0+0x28>
  ec:	80 c0       	rjmp	.+256    	; 0x1ee <writeChar.part.0+0x128>
  ee:	64 30       	cpi	r22, 0x04	; 4
  f0:	71 05       	cpc	r23, r1
  f2:	09 f4       	brne	.+2      	; 0xf6 <writeChar.part.0+0x30>
  f4:	be c0       	rjmp	.+380    	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
  f6:	0c f4       	brge	.+2      	; 0xfa <writeChar.part.0+0x34>
  f8:	f4 c0       	rjmp	.+488    	; 0x2e2 <__EEPROM_REGION_LENGTH__+0xe2>
  fa:	65 30       	cpi	r22, 0x05	; 5
  fc:	71 05       	cpc	r23, r1
  fe:	09 f0       	breq	.+2      	; 0x102 <writeChar.part.0+0x3c>
 100:	ee c0       	rjmp	.+476    	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
 102:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	fc 01       	movw	r30, r24
 10c:	e0 50       	subi	r30, 0x00	; 0
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	80 81       	ld	r24, Z
 112:	91 81       	ldd	r25, Z+1	; 0x01
 114:	82 95       	swap	r24
 116:	92 95       	swap	r25
 118:	90 7f       	andi	r25, 0xF0	; 240
 11a:	98 27       	eor	r25, r24
 11c:	80 7f       	andi	r24, 0xF0	; 240
 11e:	98 27       	eor	r25, r24
 120:	92 2f       	mov	r25, r18
 122:	9f 70       	andi	r25, 0x0F	; 15
 124:	89 2b       	or	r24, r25
 126:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 12a:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 12e:	90 81       	ld	r25, Z
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	89 2b       	or	r24, r25
 136:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 13a:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 13e:	80 81       	ld	r24, Z
 140:	91 81       	ldd	r25, Z+1	; 0x01
 142:	88 27       	eor	r24, r24
 144:	9f 70       	andi	r25, 0x0F	; 15
 146:	95 95       	asr	r25
 148:	87 95       	ror	r24
 14a:	95 95       	asr	r25
 14c:	87 95       	ror	r24
 14e:	95 95       	asr	r25
 150:	87 95       	ror	r24
 152:	95 95       	asr	r25
 154:	87 95       	ror	r24
 156:	92 2f       	mov	r25, r18
 158:	9f 70       	andi	r25, 0x0F	; 15
 15a:	89 2b       	or	r24, r25
 15c:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 160:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 164:	20 81       	ld	r18, Z
 166:	31 81       	ldd	r19, Z+1	; 0x01
 168:	22 27       	eor	r18, r18
 16a:	30 7f       	andi	r19, 0xF0	; 240
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	83 2b       	or	r24, r19
 170:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 174:	08 95       	ret
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	62 30       	cpi	r22, 0x02	; 2
 17c:	71 05       	cpc	r23, r1
 17e:	09 f0       	breq	.+2      	; 0x182 <writeChar.part.0+0xbc>
 180:	b2 cf       	rjmp	.-156    	; 0xe6 <writeChar.part.0+0x20>
 182:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	fc 01       	movw	r30, r24
 18c:	e0 50       	subi	r30, 0x00	; 0
 18e:	ff 4f       	sbci	r31, 0xFF	; 255
 190:	80 81       	ld	r24, Z
 192:	98 2f       	mov	r25, r24
 194:	9f 70       	andi	r25, 0x0F	; 15
 196:	82 2f       	mov	r24, r18
 198:	80 7f       	andi	r24, 0xF0	; 240
 19a:	89 2b       	or	r24, r25
 19c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 1a0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 1a4:	80 81       	ld	r24, Z
 1a6:	91 81       	ldd	r25, Z+1	; 0x01
 1a8:	80 7f       	andi	r24, 0xF0	; 240
 1aa:	99 27       	eor	r25, r25
 1ac:	95 95       	asr	r25
 1ae:	87 95       	ror	r24
 1b0:	95 95       	asr	r25
 1b2:	87 95       	ror	r24
 1b4:	95 95       	asr	r25
 1b6:	87 95       	ror	r24
 1b8:	95 95       	asr	r25
 1ba:	87 95       	ror	r24
 1bc:	92 2f       	mov	r25, r18
 1be:	90 7f       	andi	r25, 0xF0	; 240
 1c0:	89 2b       	or	r24, r25
 1c2:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 1c6:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 1ca:	20 81       	ld	r18, Z
 1cc:	31 81       	ldd	r19, Z+1	; 0x01
 1ce:	22 27       	eor	r18, r18
 1d0:	3f 70       	andi	r19, 0x0F	; 15
 1d2:	80 7f       	andi	r24, 0xF0	; 240
 1d4:	83 2b       	or	r24, r19
 1d6:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 1da:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 1de:	91 81       	ldd	r25, Z+1	; 0x01
 1e0:	92 95       	swap	r25
 1e2:	9f 70       	andi	r25, 0x0F	; 15
 1e4:	80 7f       	andi	r24, 0xF0	; 240
 1e6:	89 2b       	or	r24, r25
 1e8:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 1ec:	08 95       	ret
 1ee:	61 15       	cp	r22, r1
 1f0:	71 05       	cpc	r23, r1
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <writeChar.part.0+0x130>
 1f4:	b0 c0       	rjmp	.+352    	; 0x356 <__EEPROM_REGION_LENGTH__+0x156>
 1f6:	61 30       	cpi	r22, 0x01	; 1
 1f8:	71 05       	cpc	r23, r1
 1fa:	09 f0       	breq	.+2      	; 0x1fe <writeChar.part.0+0x138>
 1fc:	71 c0       	rjmp	.+226    	; 0x2e0 <__EEPROM_REGION_LENGTH__+0xe0>
 1fe:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	fc 01       	movw	r30, r24
 208:	e0 50       	subi	r30, 0x00	; 0
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	80 81       	ld	r24, Z
 20e:	91 81       	ldd	r25, Z+1	; 0x01
 210:	82 95       	swap	r24
 212:	92 95       	swap	r25
 214:	90 7f       	andi	r25, 0xF0	; 240
 216:	98 27       	eor	r25, r24
 218:	80 7f       	andi	r24, 0xF0	; 240
 21a:	98 27       	eor	r25, r24
 21c:	92 2f       	mov	r25, r18
 21e:	9f 70       	andi	r25, 0x0F	; 15
 220:	89 2b       	or	r24, r25
 222:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 226:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 22a:	90 81       	ld	r25, Z
 22c:	90 7f       	andi	r25, 0xF0	; 240
 22e:	8f 70       	andi	r24, 0x0F	; 15
 230:	89 2b       	or	r24, r25
 232:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 236:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 23a:	80 81       	ld	r24, Z
 23c:	91 81       	ldd	r25, Z+1	; 0x01
 23e:	88 27       	eor	r24, r24
 240:	9f 70       	andi	r25, 0x0F	; 15
 242:	95 95       	asr	r25
 244:	87 95       	ror	r24
 246:	95 95       	asr	r25
 248:	87 95       	ror	r24
 24a:	95 95       	asr	r25
 24c:	87 95       	ror	r24
 24e:	95 95       	asr	r25
 250:	87 95       	ror	r24
 252:	92 2f       	mov	r25, r18
 254:	9f 70       	andi	r25, 0x0F	; 15
 256:	89 2b       	or	r24, r25
 258:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 25c:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 260:	20 81       	ld	r18, Z
 262:	31 81       	ldd	r19, Z+1	; 0x01
 264:	22 27       	eor	r18, r18
 266:	30 7f       	andi	r19, 0xF0	; 240
 268:	8f 70       	andi	r24, 0x0F	; 15
 26a:	83 2b       	or	r24, r19
 26c:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 270:	08 95       	ret
 272:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	fc 01       	movw	r30, r24
 27c:	e0 50       	subi	r30, 0x00	; 0
 27e:	ff 4f       	sbci	r31, 0xFF	; 255
 280:	80 81       	ld	r24, Z
 282:	98 2f       	mov	r25, r24
 284:	9f 70       	andi	r25, 0x0F	; 15
 286:	82 2f       	mov	r24, r18
 288:	80 7f       	andi	r24, 0xF0	; 240
 28a:	89 2b       	or	r24, r25
 28c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 290:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 294:	80 81       	ld	r24, Z
 296:	91 81       	ldd	r25, Z+1	; 0x01
 298:	80 7f       	andi	r24, 0xF0	; 240
 29a:	99 27       	eor	r25, r25
 29c:	95 95       	asr	r25
 29e:	87 95       	ror	r24
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	95 95       	asr	r25
 2aa:	87 95       	ror	r24
 2ac:	92 2f       	mov	r25, r18
 2ae:	90 7f       	andi	r25, 0xF0	; 240
 2b0:	89 2b       	or	r24, r25
 2b2:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 2b6:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 2ba:	20 81       	ld	r18, Z
 2bc:	31 81       	ldd	r19, Z+1	; 0x01
 2be:	22 27       	eor	r18, r18
 2c0:	3f 70       	andi	r19, 0x0F	; 15
 2c2:	80 7f       	andi	r24, 0xF0	; 240
 2c4:	83 2b       	or	r24, r19
 2c6:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 2ca:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 2ce:	91 81       	ldd	r25, Z+1	; 0x01
 2d0:	92 95       	swap	r25
 2d2:	9f 70       	andi	r25, 0x0F	; 15
 2d4:	80 7f       	andi	r24, 0xF0	; 240
 2d6:	89 2b       	or	r24, r25
 2d8:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 2dc:	08 95       	ret
 2de:	08 95       	ret
 2e0:	08 95       	ret
 2e2:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	fc 01       	movw	r30, r24
 2ec:	e0 50       	subi	r30, 0x00	; 0
 2ee:	ff 4f       	sbci	r31, 0xFF	; 255
 2f0:	80 81       	ld	r24, Z
 2f2:	91 81       	ldd	r25, Z+1	; 0x01
 2f4:	82 95       	swap	r24
 2f6:	92 95       	swap	r25
 2f8:	90 7f       	andi	r25, 0xF0	; 240
 2fa:	98 27       	eor	r25, r24
 2fc:	80 7f       	andi	r24, 0xF0	; 240
 2fe:	98 27       	eor	r25, r24
 300:	92 2f       	mov	r25, r18
 302:	9f 70       	andi	r25, 0x0F	; 15
 304:	89 2b       	or	r24, r25
 306:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 30a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 30e:	90 81       	ld	r25, Z
 310:	90 7f       	andi	r25, 0xF0	; 240
 312:	8f 70       	andi	r24, 0x0F	; 15
 314:	89 2b       	or	r24, r25
 316:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 31a:	20 91 f7 00 	lds	r18, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 31e:	80 81       	ld	r24, Z
 320:	91 81       	ldd	r25, Z+1	; 0x01
 322:	88 27       	eor	r24, r24
 324:	9f 70       	andi	r25, 0x0F	; 15
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	95 95       	asr	r25
 32c:	87 95       	ror	r24
 32e:	95 95       	asr	r25
 330:	87 95       	ror	r24
 332:	95 95       	asr	r25
 334:	87 95       	ror	r24
 336:	92 2f       	mov	r25, r18
 338:	9f 70       	andi	r25, 0x0F	; 15
 33a:	89 2b       	or	r24, r25
 33c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 340:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 344:	20 81       	ld	r18, Z
 346:	31 81       	ldd	r19, Z+1	; 0x01
 348:	22 27       	eor	r18, r18
 34a:	30 7f       	andi	r19, 0xF0	; 240
 34c:	8f 70       	andi	r24, 0x0F	; 15
 34e:	83 2b       	or	r24, r19
 350:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 354:	08 95       	ret
 356:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	fc 01       	movw	r30, r24
 360:	e0 50       	subi	r30, 0x00	; 0
 362:	ff 4f       	sbci	r31, 0xFF	; 255
 364:	80 81       	ld	r24, Z
 366:	98 2f       	mov	r25, r24
 368:	9f 70       	andi	r25, 0x0F	; 15
 36a:	82 2f       	mov	r24, r18
 36c:	80 7f       	andi	r24, 0xF0	; 240
 36e:	89 2b       	or	r24, r25
 370:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 374:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 378:	80 81       	ld	r24, Z
 37a:	91 81       	ldd	r25, Z+1	; 0x01
 37c:	80 7f       	andi	r24, 0xF0	; 240
 37e:	99 27       	eor	r25, r25
 380:	95 95       	asr	r25
 382:	87 95       	ror	r24
 384:	95 95       	asr	r25
 386:	87 95       	ror	r24
 388:	95 95       	asr	r25
 38a:	87 95       	ror	r24
 38c:	95 95       	asr	r25
 38e:	87 95       	ror	r24
 390:	92 2f       	mov	r25, r18
 392:	90 7f       	andi	r25, 0xF0	; 240
 394:	89 2b       	or	r24, r25
 396:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 39a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 39e:	20 81       	ld	r18, Z
 3a0:	31 81       	ldd	r19, Z+1	; 0x01
 3a2:	22 27       	eor	r18, r18
 3a4:	3f 70       	andi	r19, 0x0F	; 15
 3a6:	80 7f       	andi	r24, 0xF0	; 240
 3a8:	83 2b       	or	r24, r19
 3aa:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 3ae:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 3b2:	91 81       	ldd	r25, Z+1	; 0x01
 3b4:	92 95       	swap	r25
 3b6:	9f 70       	andi	r25, 0x0F	; 15
 3b8:	80 7f       	andi	r24, 0xF0	; 240
 3ba:	89 2b       	or	r24, r25
 3bc:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 3c0:	08 95       	ret

000003c2 <printAt>:
    }
    /* is prime */
    return true;
}

void printAt(long num, int pos) {
 3c2:	cf 92       	push	r12
 3c4:	df 92       	push	r13
 3c6:	ef 92       	push	r14
 3c8:	ff 92       	push	r15
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	6b 01       	movw	r12, r22
 3d0:	7c 01       	movw	r14, r24
 3d2:	ea 01       	movw	r28, r20
	lock(&m_primes);
 3d4:	8a e2       	ldi	r24, 0x2A	; 42
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 a3 03 	call	0x746	; 0x746 <lock>
     */

    int i = 0;

    /* checks if pos is within fixed range */
    if(pos < 0 || pos > 5) {
 3dc:	c6 30       	cpi	r28, 0x06	; 6
 3de:	d1 05       	cpc	r29, r1
 3e0:	d8 f0       	brcs	.+54     	; 0x418 <__DATA_REGION_LENGTH__+0x18>
     * returns: none
     */

    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
    pp++;
 3e2:	21 96       	adiw	r28, 0x01	; 1
     */

    int i = 0;

    /* checks if pos is within fixed range */
    if(pos < 0 || pos > 5) {
 3e4:	c6 30       	cpi	r28, 0x06	; 6
 3e6:	d1 05       	cpc	r29, r1
 3e8:	68 f4       	brcc	.+26     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3ea:	c7 01       	movw	r24, r14
 3ec:	b6 01       	movw	r22, r12
 3ee:	2a e0       	ldi	r18, 0x0A	; 10
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__divmodsi4>
 3fa:	86 2f       	mov	r24, r22
 3fc:	be 01       	movw	r22, r28
 3fe:	80 5d       	subi	r24, 0xD0	; 208
 400:	0e 94 63 00 	call	0xc6	; 0xc6 <writeChar.part.0>

    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m_primes);
 404:	8a e2       	ldi	r24, 0x2A	; 42
 406:	91 e0       	ldi	r25, 0x01	; 1
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12

    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m_primes);
 414:	0c 94 cf 03 	jmp	0x79e	; 0x79e <unlock>
 418:	c7 01       	movw	r24, r14
 41a:	b6 01       	movw	r22, r12
 41c:	24 e6       	ldi	r18, 0x64	; 100
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__divmodsi4>
 428:	2a e0       	ldi	r18, 0x0A	; 10
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__divmodsi4>
 434:	be 01       	movw	r22, r28
 436:	80 e3       	ldi	r24, 0x30	; 48
 438:	82 0f       	add	r24, r18
 43a:	0e 94 63 00 	call	0xc6	; 0xc6 <writeChar.part.0>
 43e:	d1 cf       	rjmp	.-94     	; 0x3e2 <printAt+0x20>

00000440 <button>:
     * code that counts button activations
     * and writes them onto LCD.
     *
     * returns: none
     */
	bool pressP4 = true;
 440:	c1 e0       	ldi	r28, 0x01	; 1
	while (true) {
	lock(&m_button);
	
    PORTB = 0x0080;
 442:	d0 e8       	ldi	r29, 0x80	; 128
 444:	17 c0       	rjmp	.+46     	; 0x474 <button+0x34>
        if(!(PINB & (0X0080))) {

            if(pressP4){
                count ++;
 446:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <count>
 44a:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <count+0x1>
	lock(&m_button);
	
    PORTB = 0x0080;
        if(!(PINB & (0X0080))) {

            if(pressP4){
 44e:	cc 23       	and	r28, r28
 450:	39 f0       	breq	.+14     	; 0x460 <button+0x20>
                count ++;
 452:	6f 5f       	subi	r22, 0xFF	; 255
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <count+0x1>
 45a:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <count>
                pressP4 = false;
 45e:	c0 e0       	ldi	r28, 0x00	; 0
            }
        }
        if(PINB & (0X0080)) {
 460:	1f 99       	sbic	0x03, 7	; 3
 462:	15 c0       	rjmp	.+42     	; 0x48e <button+0x4e>
            pressP4 = true;
        }
        printAt(count, 4);
 464:	07 2e       	mov	r0, r23
 466:	00 0c       	add	r0, r0
 468:	88 0b       	sbc	r24, r24
 46a:	99 0b       	sbc	r25, r25
 46c:	44 e0       	ldi	r20, 0x04	; 4
 46e:	50 e0       	ldi	r21, 0x00	; 0
 470:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <printAt>
     *
     * returns: none
     */
	bool pressP4 = true;
	while (true) {
	lock(&m_button);
 474:	8e e2       	ldi	r24, 0x2E	; 46
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 a3 03 	call	0x746	; 0x746 <lock>
	
    PORTB = 0x0080;
 47c:	d5 b9       	out	0x05, r29	; 5
        if(!(PINB & (0X0080))) {
 47e:	1f 9b       	sbis	0x03, 7	; 3
 480:	e2 cf       	rjmp	.-60     	; 0x446 <button+0x6>
 482:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <count>
 486:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <count+0x1>
            if(pressP4){
                count ++;
                pressP4 = false;
            }
        }
        if(PINB & (0X0080)) {
 48a:	1f 9b       	sbis	0x03, 7	; 3
 48c:	eb cf       	rjmp	.-42     	; 0x464 <button+0x24>
            pressP4 = true;
 48e:	c1 e0       	ldi	r28, 0x01	; 1
 490:	e9 cf       	rjmp	.-46     	; 0x464 <button+0x24>

00000492 <computePrimes>:
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m_primes);
}

void computePrimes(int pos) {
 492:	ec 01       	movw	r28, r24
     * writes prime values to LCD
     * at positions 0 and 1.
     * returns: none
     */
    long n;
    for(n = 1; ; n++) {
 494:	81 2c       	mov	r8, r1
 496:	91 2c       	mov	r9, r1
 498:	54 01       	movw	r10, r8
 49a:	83 94       	inc	r8
     * a prime value or not.
     *
     * returns: bool
     */

    for (int j = 2; j < i; j++) {
 49c:	83 e0       	ldi	r24, 0x03	; 3
 49e:	88 16       	cp	r8, r24
 4a0:	91 04       	cpc	r9, r1
 4a2:	a1 04       	cpc	r10, r1
 4a4:	b1 04       	cpc	r11, r1
 4a6:	e4 f0       	brlt	.+56     	; 0x4e0 <computePrimes+0x4e>
        if(i % j == 0) {
 4a8:	80 fe       	sbrs	r8, 0
 4aa:	1f c0       	rjmp	.+62     	; 0x4ea <computePrimes+0x58>
 4ac:	83 e0       	ldi	r24, 0x03	; 3
 4ae:	c8 2e       	mov	r12, r24
 4b0:	d1 2c       	mov	r13, r1
 4b2:	e1 2c       	mov	r14, r1
 4b4:	f1 2c       	mov	r15, r1
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <computePrimes+0x40>
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	c8 1a       	sub	r12, r24
 4bc:	d8 0a       	sbc	r13, r24
 4be:	e8 0a       	sbc	r14, r24
 4c0:	f8 0a       	sbc	r15, r24
 4c2:	c5 01       	movw	r24, r10
 4c4:	b4 01       	movw	r22, r8
 4c6:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__divmodsi4>
 4ca:	67 2b       	or	r22, r23
 4cc:	68 2b       	or	r22, r24
 4ce:	69 2b       	or	r22, r25
 4d0:	61 f0       	breq	.+24     	; 0x4ea <computePrimes+0x58>
     * a prime value or not.
     *
     * returns: bool
     */

    for (int j = 2; j < i; j++) {
 4d2:	96 01       	movw	r18, r12
 4d4:	a7 01       	movw	r20, r14
 4d6:	c8 14       	cp	r12, r8
 4d8:	d9 04       	cpc	r13, r9
 4da:	ea 04       	cpc	r14, r10
 4dc:	fb 04       	cpc	r15, r11
 4de:	61 f7       	brne	.-40     	; 0x4b8 <computePrimes+0x26>
     * returns: none
     */
    long n;
    for(n = 1; ; n++) {
        if (is_prime(n)) {
            printAt(n, pos);
 4e0:	ae 01       	movw	r20, r28
 4e2:	c5 01       	movw	r24, r10
 4e4:	b4 01       	movw	r22, r8
 4e6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <printAt>
     * writes prime values to LCD
     * at positions 0 and 1.
     * returns: none
     */
    long n;
    for(n = 1; ; n++) {
 4ea:	8f ef       	ldi	r24, 0xFF	; 255
 4ec:	88 1a       	sub	r8, r24
 4ee:	98 0a       	sbc	r9, r24
 4f0:	a8 0a       	sbc	r10, r24
 4f2:	b8 0a       	sbc	r11, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 4f4:	d3 cf       	rjmp	.-90     	; 0x49c <computePrimes+0xa>

000004f6 <main>:
	}
}

int main() {
	//Initialize button
	PORTB |= (1<<7);
 4f6:	2f 9a       	sbi	0x05, 7	; 5
	
	//Initialize clock 
	CLKPR = (0x80);
 4f8:	e1 e6       	ldi	r30, 0x61	; 97
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 e8       	ldi	r24, 0x80	; 128
 4fe:	80 83       	st	Z, r24
	CLKPR = (0x00);
 500:	10 82       	st	Z, r1
     *
     * returns: none
     */

    /* Asynchronous clock, 1/3 bias, 1/4 duty cycle,   25 segments */
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
 502:	87 eb       	ldi	r24, 0xB7	; 183
 504:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
    /* Set volt to 3.35V */
    LCDCCR = (1<<LCDCC3) |(1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
 508:	8f e0       	ldi	r24, 0x0F	; 15
 50a:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    /* Clock division factor to 8, and prescaler to 16 */
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 50e:	87 e0       	ldi	r24, 0x07	; 7
 510:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    /* low power waveform, no frame interrupt, no blanking */
    LCDCRA = (1<<LCDAB) | (1<<LCDEN);
 514:	80 ec       	ldi	r24, 0xC0	; 192
 516:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	//Initialize clock 
	CLKPR = (0x80);
	CLKPR = (0x00);
	
	LCD_init();
	lock(&m_blink);
 51a:	82 e3       	ldi	r24, 0x32	; 50
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 a3 03 	call	0x746	; 0x746 <lock>
	lock(&m_button);
 522:	8e e2       	ldi	r24, 0x2E	; 46
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0e 94 a3 03 	call	0x746	; 0x746 <lock>
	
	
	spawn(button, 0);
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	80 e2       	ldi	r24, 0x20	; 32
 530:	92 e0       	ldi	r25, 0x02	; 2
 532:	0e 94 df 02 	call	0x5be	; 0x5be <spawn>
	//yield();
	spawn(blink, 0);
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	8d e4       	ldi	r24, 0x4D	; 77
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 df 02 	call	0x5be	; 0x5be <spawn>
	//yield();
	computePrimes(0);
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 49 02 	call	0x492	; 0x492 <computePrimes>

0000054a <dispatch>:
	
	DISABLE();
	enqueue(current,(&readyQ));
	dispatch(dequeue(&readyQ));
	ENABLE();
}
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	00 d0       	rcall	.+0      	; 0x550 <dispatch+0x6>
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
 554:	9a 83       	std	Y+2, r25	; 0x02
 556:	89 83       	std	Y+1, r24	; 0x01
 558:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 55c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 560:	06 96       	adiw	r24, 0x06	; 6
 562:	0e 94 91 04 	call	0x922	; 0x922 <setjmp>
 566:	89 2b       	or	r24, r25
 568:	29 f0       	breq	.+10     	; 0x574 <dispatch+0x2a>
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret
 574:	89 81       	ldd	r24, Y+1	; 0x01
 576:	9a 81       	ldd	r25, Y+2	; 0x02
 578:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <current+0x1>
 57c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <current>
 580:	61 e0       	ldi	r22, 0x01	; 1
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	06 96       	adiw	r24, 0x06	; 6
 586:	0e 94 b1 04 	call	0x962	; 0x962 <longjmp>

0000058a <addBlinkCounter>:
 58a:	f8 94       	cli
 58c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <blinkCounter>
 590:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <blinkCounter+0x1>
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <blinkCounter+0x1>
 59a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <blinkCounter>
 59e:	78 94       	sei
 5a0:	08 95       	ret

000005a2 <getBlinkCounter>:
 5a2:	f8 94       	cli
 5a4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <blinkCounter>
 5a8:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <blinkCounter+0x1>
 5ac:	78 94       	sei
 5ae:	08 95       	ret

000005b0 <resetBlinkCounter>:
 5b0:	f8 94       	cli
 5b2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <blinkCounter+0x1>
 5b6:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <blinkCounter>
 5ba:	78 94       	sei
 5bc:	08 95       	ret

000005be <spawn>:
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	00 d0       	rcall	.+0      	; 0x5c4 <spawn+0x6>
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	f8 94       	cli
 5ca:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <initialized>
 5ce:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <initialized+0x1>
 5d2:	23 2b       	or	r18, r19
 5d4:	09 f4       	brne	.+2      	; 0x5d8 <spawn+0x1a>
 5d6:	43 c0       	rjmp	.+134    	; 0x65e <spawn+0xa0>
 5d8:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <freeQ>
 5dc:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <freeQ+0x1>
 5e0:	3a 83       	std	Y+2, r19	; 0x02
 5e2:	29 83       	std	Y+1, r18	; 0x01
 5e4:	23 2b       	or	r18, r19
 5e6:	09 f4       	brne	.+2      	; 0x5ea <spawn+0x2c>
 5e8:	7e c0       	rjmp	.+252    	; 0x6e6 <spawn+0x128>
 5ea:	e9 81       	ldd	r30, Y+1	; 0x01
 5ec:	fa 81       	ldd	r31, Y+2	; 0x02
 5ee:	44 81       	ldd	r20, Z+4	; 0x04
 5f0:	55 81       	ldd	r21, Z+5	; 0x05
 5f2:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <freeQ+0x1>
 5f6:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <freeQ>
 5fa:	91 83       	std	Z+1, r25	; 0x01
 5fc:	80 83       	st	Z, r24
 5fe:	73 83       	std	Z+3, r23	; 0x03
 600:	62 83       	std	Z+2, r22	; 0x02
 602:	15 82       	std	Z+5, r1	; 0x05
 604:	14 82       	std	Z+4, r1	; 0x04
 606:	cf 01       	movw	r24, r30
 608:	06 96       	adiw	r24, 0x06	; 6
 60a:	0e 94 91 04 	call	0x922	; 0x922 <setjmp>
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	09 f4       	brne	.+2      	; 0x614 <spawn+0x56>
 612:	6a c0       	rjmp	.+212    	; 0x6e8 <spawn+0x12a>
 614:	e9 81       	ldd	r30, Y+1	; 0x01
 616:	fa 81       	ldd	r31, Y+2	; 0x02
 618:	36 96       	adiw	r30, 0x06	; 6
 61a:	89 81       	ldd	r24, Y+1	; 0x01
 61c:	9a 81       	ldd	r25, Y+2	; 0x02
 61e:	87 59       	subi	r24, 0x97	; 151
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	91 8b       	std	Z+17, r25	; 0x11
 624:	80 8b       	std	Z+16, r24	; 0x10
 626:	93 8b       	std	Z+19, r25	; 0x13
 628:	82 8b       	std	Z+18, r24	; 0x12
 62a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <current>
 62e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <current+0x1>
 632:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <readyQ>
 636:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <readyQ+0x1>
 63a:	00 97       	sbiw	r24, 0x00	; 0
 63c:	11 f0       	breq	.+4      	; 0x642 <spawn+0x84>
 63e:	95 83       	std	Z+5, r25	; 0x05
 640:	84 83       	std	Z+4, r24	; 0x04
 642:	f0 93 3b 01 	sts	0x013B, r31	; 0x80013b <readyQ+0x1>
 646:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <readyQ>
 64a:	89 81       	ldd	r24, Y+1	; 0x01
 64c:	9a 81       	ldd	r25, Y+2	; 0x02
 64e:	0e 94 a5 02 	call	0x54a	; 0x54a <dispatch>
 652:	78 94       	sei
 654:	0f 90       	pop	r0
 656:	0f 90       	pop	r0
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret
 65e:	28 e1       	ldi	r18, 0x18	; 24
 660:	32 e0       	ldi	r19, 0x02	; 2
 662:	30 93 b0 01 	sts	0x01B0, r19	; 0x8001b0 <threads+0x5>
 666:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <threads+0x4>
 66a:	25 e8       	ldi	r18, 0x85	; 133
 66c:	32 e0       	ldi	r19, 0x02	; 2
 66e:	30 93 1d 02 	sts	0x021D, r19	; 0x80021d <threads+0x72>
 672:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <threads+0x71>
 676:	22 ef       	ldi	r18, 0xF2	; 242
 678:	32 e0       	ldi	r19, 0x02	; 2
 67a:	30 93 8a 02 	sts	0x028A, r19	; 0x80028a <threads+0xdf>
 67e:	20 93 89 02 	sts	0x0289, r18	; 0x800289 <threads+0xde>
 682:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <threads+0x14c>
 686:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <threads+0x14b>
 68a:	ef 9a       	sbi	0x1d, 7	; 29
 68c:	ec e6       	ldi	r30, 0x6C	; 108
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	20 81       	ld	r18, Z
 692:	20 68       	ori	r18, 0x80	; 128
 694:	20 83       	st	Z, r18
 696:	e0 e8       	ldi	r30, 0x80	; 128
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	20 81       	ld	r18, Z
 69c:	20 6c       	ori	r18, 0xC0	; 192
 69e:	20 83       	st	Z, r18
 6a0:	e1 e8       	ldi	r30, 0x81	; 129
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	20 81       	ld	r18, Z
 6a6:	2d 60       	ori	r18, 0x0D	; 13
 6a8:	20 83       	st	Z, r18
 6aa:	ef e6       	ldi	r30, 0x6F	; 111
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	20 81       	ld	r18, Z
 6b0:	22 60       	ori	r18, 0x02	; 2
 6b2:	20 83       	st	Z, r18
 6b4:	27 e8       	ldi	r18, 0x87	; 135
 6b6:	31 e0       	ldi	r19, 0x01	; 1
 6b8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 6bc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
 6c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 6c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 6c8:	21 e0       	ldi	r18, 0x01	; 1
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <initialized+0x1>
 6d0:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <initialized>
 6d4:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <freeQ>
 6d8:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <freeQ+0x1>
 6dc:	3a 83       	std	Y+2, r19	; 0x02
 6de:	29 83       	std	Y+1, r18	; 0x01
 6e0:	23 2b       	or	r18, r19
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <spawn+0x128>
 6e4:	82 cf       	rjmp	.-252    	; 0x5ea <spawn+0x2c>
 6e6:	ff cf       	rjmp	.-2      	; 0x6e6 <spawn+0x128>
 6e8:	78 94       	sei
 6ea:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 6ee:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
 6f2:	ed 91       	ld	r30, X+
 6f4:	fc 91       	ld	r31, X
 6f6:	11 97       	sbiw	r26, 0x01	; 1
 6f8:	12 96       	adiw	r26, 0x02	; 2
 6fa:	8d 91       	ld	r24, X+
 6fc:	9c 91       	ld	r25, X
 6fe:	13 97       	sbiw	r26, 0x03	; 3
 700:	09 95       	icall
 702:	f8 94       	cli
 704:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <current>
 708:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <current+0x1>
 70c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <freeQ>
 710:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <freeQ+0x1>
 714:	00 97       	sbiw	r24, 0x00	; 0
 716:	11 f0       	breq	.+4      	; 0x71c <spawn+0x15e>
 718:	95 83       	std	Z+5, r25	; 0x05
 71a:	84 83       	std	Z+4, r24	; 0x04
 71c:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <freeQ+0x1>
 720:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <freeQ>
 724:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <readyQ>
 728:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <readyQ+0x1>
 72c:	00 97       	sbiw	r24, 0x00	; 0
 72e:	51 f0       	breq	.+20     	; 0x744 <spawn+0x186>
 730:	fc 01       	movw	r30, r24
 732:	24 81       	ldd	r18, Z+4	; 0x04
 734:	35 81       	ldd	r19, Z+5	; 0x05
 736:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <readyQ+0x1>
 73a:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <readyQ>
 73e:	0e 94 a5 02 	call	0x54a	; 0x54a <dispatch>
 742:	68 cf       	rjmp	.-304    	; 0x614 <spawn+0x56>
 744:	ff cf       	rjmp	.-2      	; 0x744 <spawn+0x186>

00000746 <lock>:

void lock(mutex *m) {
 746:	fc 01       	movw	r30, r24
	DISABLE();
 748:	f8 94       	cli
	if(m ->locked  == 0) {
 74a:	80 81       	ld	r24, Z
 74c:	91 81       	ldd	r25, Z+1	; 0x01
 74e:	89 2b       	or	r24, r25
 750:	01 f1       	breq	.+64     	; 0x792 <lock+0x4c>
		m ->locked  = 1;
	}
	else {
		enqueue(current,&(m ->waitQ));
 752:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 756:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
	blinkCounter = 0;
	ENABLE();
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
 75a:	82 81       	ldd	r24, Z+2	; 0x02
 75c:	93 81       	ldd	r25, Z+3	; 0x03
 75e:	00 97       	sbiw	r24, 0x00	; 0
 760:	21 f0       	breq	.+8      	; 0x76a <lock+0x24>
        *queue = p;
    } else {
        p->next = *queue;
 762:	15 96       	adiw	r26, 0x05	; 5
 764:	9c 93       	st	X, r25
 766:	8e 93       	st	-X, r24
 768:	14 97       	sbiw	r26, 0x04	; 4
		*queue = p;
 76a:	b3 83       	std	Z+3, r27	; 0x03
 76c:	a2 83       	std	Z+2, r26	; 0x02

    }
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 76e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <readyQ>
 772:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <readyQ+0x1>
	if (*queue) {
 776:	00 97       	sbiw	r24, 0x00	; 0
 778:	59 f0       	breq	.+22     	; 0x790 <lock+0x4a>
		*queue = (*queue)->next;
 77a:	fc 01       	movw	r30, r24
 77c:	24 81       	ldd	r18, Z+4	; 0x04
 77e:	35 81       	ldd	r19, Z+5	; 0x05
 780:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <readyQ+0x1>
 784:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <readyQ>
	if(m ->locked  == 0) {
		m ->locked  = 1;
	}
	else {
		enqueue(current,&(m ->waitQ));
		dispatch(dequeue(&readyQ));
 788:	0e 94 a5 02 	call	0x54a	; 0x54a <dispatch>
	}
	ENABLE();
 78c:	78 94       	sei
 78e:	08 95       	ret
 790:	ff cf       	rjmp	.-2      	; 0x790 <lock+0x4a>
}

void lock(mutex *m) {
	DISABLE();
	if(m ->locked  == 0) {
		m ->locked  = 1;
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	91 83       	std	Z+1, r25	; 0x01
 798:	80 83       	st	Z, r24
	}
	else {
		enqueue(current,&(m ->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 79a:	78 94       	sei
 79c:	08 95       	ret

0000079e <unlock>:
}

void unlock(mutex *m) {
 79e:	fc 01       	movw	r30, r24
	DISABLE();
 7a0:	f8 94       	cli
	if(m -> waitQ == NULL) {
 7a2:	82 81       	ldd	r24, Z+2	; 0x02
 7a4:	93 81       	ldd	r25, Z+3	; 0x03
 7a6:	00 97       	sbiw	r24, 0x00	; 0
 7a8:	19 f1       	breq	.+70     	; 0x7f0 <unlock+0x52>
		m ->locked  = 0;
	}
	else {
		enqueue(current, (&readyQ));
 7aa:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 7ae:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
	blinkCounter = 0;
	ENABLE();
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
 7b2:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <readyQ>
 7b6:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <readyQ+0x1>
 7ba:	21 15       	cp	r18, r1
 7bc:	31 05       	cpc	r19, r1
 7be:	e1 f0       	breq	.+56     	; 0x7f8 <unlock+0x5a>
        *queue = p;
    } else {
        p->next = *queue;
 7c0:	15 96       	adiw	r26, 0x05	; 5
 7c2:	3c 93       	st	X, r19
 7c4:	2e 93       	st	-X, r18
 7c6:	14 97       	sbiw	r26, 0x04	; 4
		*queue = p;
 7c8:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <readyQ+0x1>
 7cc:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <readyQ>
 7d0:	82 81       	ldd	r24, Z+2	; 0x02
 7d2:	93 81       	ldd	r25, Z+3	; 0x03
    }
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
 7d4:	00 97       	sbiw	r24, 0x00	; 0
 7d6:	59 f0       	breq	.+22     	; 0x7ee <unlock+0x50>
		*queue = (*queue)->next;
 7d8:	dc 01       	movw	r26, r24
 7da:	14 96       	adiw	r26, 0x04	; 4
 7dc:	2d 91       	ld	r18, X+
 7de:	3c 91       	ld	r19, X
 7e0:	15 97       	sbiw	r26, 0x05	; 5
 7e2:	33 83       	std	Z+3, r19	; 0x03
 7e4:	22 83       	std	Z+2, r18	; 0x02
	if(m -> waitQ == NULL) {
		m ->locked  = 0;
	}
	else {
		enqueue(current, (&readyQ));
		dispatch(dequeue(&(m -> waitQ)));
 7e6:	0e 94 a5 02 	call	0x54a	; 0x54a <dispatch>
	}
	
	ENABLE();
 7ea:	78 94       	sei
 7ec:	08 95       	ret
 7ee:	ff cf       	rjmp	.-2      	; 0x7ee <unlock+0x50>
}

void unlock(mutex *m) {
	DISABLE();
	if(m -> waitQ == NULL) {
		m ->locked  = 0;
 7f0:	11 82       	std	Z+1, r1	; 0x01
 7f2:	10 82       	st	Z, r1
	else {
		enqueue(current, (&readyQ));
		dispatch(dequeue(&(m -> waitQ)));
	}
	
	ENABLE();
 7f4:	78 94       	sei
 7f6:	08 95       	ret
	ENABLE();
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
        *queue = p;
 7f8:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <readyQ+0x1>
 7fc:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <readyQ>
 800:	eb cf       	rjmp	.-42     	; 0x7d8 <unlock+0x3a>

00000802 <__vector_7>:
	blinkCounter++;
	ENABLE();
}


ISR(TIMER1_COMPA_vect) {
 802:	1f 92       	push	r1
 804:	0f 92       	push	r0
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	0f 92       	push	r0
 80a:	11 24       	eor	r1, r1
 80c:	2f 93       	push	r18
 80e:	3f 93       	push	r19
 810:	4f 93       	push	r20
 812:	5f 93       	push	r21
 814:	6f 93       	push	r22
 816:	7f 93       	push	r23
 818:	8f 93       	push	r24
 81a:	9f 93       	push	r25
 81c:	af 93       	push	r26
 81e:	bf 93       	push	r27
 820:	ef 93       	push	r30
 822:	ff 93       	push	r31
	/*addBlinkCounter();*/
	unlock(&m_blink);
 824:	82 e3       	ldi	r24, 0x32	; 50
 826:	91 e0       	ldi	r25, 0x01	; 1
 828:	0e 94 cf 03 	call	0x79e	; 0x79e <unlock>
}
 82c:	ff 91       	pop	r31
 82e:	ef 91       	pop	r30
 830:	bf 91       	pop	r27
 832:	af 91       	pop	r26
 834:	9f 91       	pop	r25
 836:	8f 91       	pop	r24
 838:	7f 91       	pop	r23
 83a:	6f 91       	pop	r22
 83c:	5f 91       	pop	r21
 83e:	4f 91       	pop	r20
 840:	3f 91       	pop	r19
 842:	2f 91       	pop	r18
 844:	0f 90       	pop	r0
 846:	0f be       	out	0x3f, r0	; 63
 848:	0f 90       	pop	r0
 84a:	1f 90       	pop	r1
 84c:	18 95       	reti

0000084e <__vector_3>:

ISR(PCINT1_vect) {
 84e:	1f 92       	push	r1
 850:	0f 92       	push	r0
 852:	0f b6       	in	r0, 0x3f	; 63
 854:	0f 92       	push	r0
 856:	11 24       	eor	r1, r1
 858:	2f 93       	push	r18
 85a:	3f 93       	push	r19
 85c:	4f 93       	push	r20
 85e:	5f 93       	push	r21
 860:	6f 93       	push	r22
 862:	7f 93       	push	r23
 864:	8f 93       	push	r24
 866:	9f 93       	push	r25
 868:	af 93       	push	r26
 86a:	bf 93       	push	r27
 86c:	ef 93       	push	r30
 86e:	ff 93       	push	r31
	// Check the status of PORTB bit 7 before calling yield()
	if (PORTB & (1<<7)) {
 870:	2f 99       	sbic	0x05, 7	; 5
 872:	11 c0       	rjmp	.+34     	; 0x896 <__vector_3+0x48>
		
		unlock(&m_button);
	}
}
 874:	ff 91       	pop	r31
 876:	ef 91       	pop	r30
 878:	bf 91       	pop	r27
 87a:	af 91       	pop	r26
 87c:	9f 91       	pop	r25
 87e:	8f 91       	pop	r24
 880:	7f 91       	pop	r23
 882:	6f 91       	pop	r22
 884:	5f 91       	pop	r21
 886:	4f 91       	pop	r20
 888:	3f 91       	pop	r19
 88a:	2f 91       	pop	r18
 88c:	0f 90       	pop	r0
 88e:	0f be       	out	0x3f, r0	; 63
 890:	0f 90       	pop	r0
 892:	1f 90       	pop	r1
 894:	18 95       	reti

ISR(PCINT1_vect) {
	// Check the status of PORTB bit 7 before calling yield()
	if (PORTB & (1<<7)) {
		
		unlock(&m_button);
 896:	8e e2       	ldi	r24, 0x2E	; 46
 898:	91 e0       	ldi	r25, 0x01	; 1
 89a:	0e 94 cf 03 	call	0x79e	; 0x79e <unlock>
	}
}
 89e:	ea cf       	rjmp	.-44     	; 0x874 <__vector_3+0x26>

000008a0 <__divmodsi4>:
 8a0:	05 2e       	mov	r0, r21
 8a2:	97 fb       	bst	r25, 7
 8a4:	1e f4       	brtc	.+6      	; 0x8ac <__divmodsi4+0xc>
 8a6:	00 94       	com	r0
 8a8:	0e 94 67 04 	call	0x8ce	; 0x8ce <__negsi2>
 8ac:	57 fd       	sbrc	r21, 7
 8ae:	07 d0       	rcall	.+14     	; 0x8be <__divmodsi4_neg2>
 8b0:	0e 94 6f 04 	call	0x8de	; 0x8de <__udivmodsi4>
 8b4:	07 fc       	sbrc	r0, 7
 8b6:	03 d0       	rcall	.+6      	; 0x8be <__divmodsi4_neg2>
 8b8:	4e f4       	brtc	.+18     	; 0x8cc <__divmodsi4_exit>
 8ba:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__negsi2>

000008be <__divmodsi4_neg2>:
 8be:	50 95       	com	r21
 8c0:	40 95       	com	r20
 8c2:	30 95       	com	r19
 8c4:	21 95       	neg	r18
 8c6:	3f 4f       	sbci	r19, 0xFF	; 255
 8c8:	4f 4f       	sbci	r20, 0xFF	; 255
 8ca:	5f 4f       	sbci	r21, 0xFF	; 255

000008cc <__divmodsi4_exit>:
 8cc:	08 95       	ret

000008ce <__negsi2>:
 8ce:	90 95       	com	r25
 8d0:	80 95       	com	r24
 8d2:	70 95       	com	r23
 8d4:	61 95       	neg	r22
 8d6:	7f 4f       	sbci	r23, 0xFF	; 255
 8d8:	8f 4f       	sbci	r24, 0xFF	; 255
 8da:	9f 4f       	sbci	r25, 0xFF	; 255
 8dc:	08 95       	ret

000008de <__udivmodsi4>:
 8de:	a1 e2       	ldi	r26, 0x21	; 33
 8e0:	1a 2e       	mov	r1, r26
 8e2:	aa 1b       	sub	r26, r26
 8e4:	bb 1b       	sub	r27, r27
 8e6:	fd 01       	movw	r30, r26
 8e8:	0d c0       	rjmp	.+26     	; 0x904 <__udivmodsi4_ep>

000008ea <__udivmodsi4_loop>:
 8ea:	aa 1f       	adc	r26, r26
 8ec:	bb 1f       	adc	r27, r27
 8ee:	ee 1f       	adc	r30, r30
 8f0:	ff 1f       	adc	r31, r31
 8f2:	a2 17       	cp	r26, r18
 8f4:	b3 07       	cpc	r27, r19
 8f6:	e4 07       	cpc	r30, r20
 8f8:	f5 07       	cpc	r31, r21
 8fa:	20 f0       	brcs	.+8      	; 0x904 <__udivmodsi4_ep>
 8fc:	a2 1b       	sub	r26, r18
 8fe:	b3 0b       	sbc	r27, r19
 900:	e4 0b       	sbc	r30, r20
 902:	f5 0b       	sbc	r31, r21

00000904 <__udivmodsi4_ep>:
 904:	66 1f       	adc	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	1a 94       	dec	r1
 90e:	69 f7       	brne	.-38     	; 0x8ea <__udivmodsi4_loop>
 910:	60 95       	com	r22
 912:	70 95       	com	r23
 914:	80 95       	com	r24
 916:	90 95       	com	r25
 918:	9b 01       	movw	r18, r22
 91a:	ac 01       	movw	r20, r24
 91c:	bd 01       	movw	r22, r26
 91e:	cf 01       	movw	r24, r30
 920:	08 95       	ret

00000922 <setjmp>:
 922:	dc 01       	movw	r26, r24
 924:	2d 92       	st	X+, r2
 926:	3d 92       	st	X+, r3
 928:	4d 92       	st	X+, r4
 92a:	5d 92       	st	X+, r5
 92c:	6d 92       	st	X+, r6
 92e:	7d 92       	st	X+, r7
 930:	8d 92       	st	X+, r8
 932:	9d 92       	st	X+, r9
 934:	ad 92       	st	X+, r10
 936:	bd 92       	st	X+, r11
 938:	cd 92       	st	X+, r12
 93a:	dd 92       	st	X+, r13
 93c:	ed 92       	st	X+, r14
 93e:	fd 92       	st	X+, r15
 940:	0d 93       	st	X+, r16
 942:	1d 93       	st	X+, r17
 944:	cd 93       	st	X+, r28
 946:	dd 93       	st	X+, r29
 948:	ff 91       	pop	r31
 94a:	ef 91       	pop	r30
 94c:	8d b7       	in	r24, 0x3d	; 61
 94e:	8d 93       	st	X+, r24
 950:	8e b7       	in	r24, 0x3e	; 62
 952:	8d 93       	st	X+, r24
 954:	8f b7       	in	r24, 0x3f	; 63
 956:	8d 93       	st	X+, r24
 958:	ed 93       	st	X+, r30
 95a:	fd 93       	st	X+, r31
 95c:	88 27       	eor	r24, r24
 95e:	99 27       	eor	r25, r25
 960:	09 94       	ijmp

00000962 <longjmp>:
 962:	dc 01       	movw	r26, r24
 964:	cb 01       	movw	r24, r22
 966:	81 30       	cpi	r24, 0x01	; 1
 968:	91 05       	cpc	r25, r1
 96a:	81 1d       	adc	r24, r1
 96c:	2d 90       	ld	r2, X+
 96e:	3d 90       	ld	r3, X+
 970:	4d 90       	ld	r4, X+
 972:	5d 90       	ld	r5, X+
 974:	6d 90       	ld	r6, X+
 976:	7d 90       	ld	r7, X+
 978:	8d 90       	ld	r8, X+
 97a:	9d 90       	ld	r9, X+
 97c:	ad 90       	ld	r10, X+
 97e:	bd 90       	ld	r11, X+
 980:	cd 90       	ld	r12, X+
 982:	dd 90       	ld	r13, X+
 984:	ed 90       	ld	r14, X+
 986:	fd 90       	ld	r15, X+
 988:	0d 91       	ld	r16, X+
 98a:	1d 91       	ld	r17, X+
 98c:	cd 91       	ld	r28, X+
 98e:	dd 91       	ld	r29, X+
 990:	ed 91       	ld	r30, X+
 992:	fd 91       	ld	r31, X+
 994:	0d 90       	ld	r0, X+
 996:	f8 94       	cli
 998:	fe bf       	out	0x3e, r31	; 62
 99a:	0f be       	out	0x3f, r0	; 63
 99c:	ed bf       	out	0x3d, r30	; 61
 99e:	ed 91       	ld	r30, X+
 9a0:	fd 91       	ld	r31, X+
 9a2:	09 94       	ijmp

000009a4 <_exit>:
 9a4:	f8 94       	cli

000009a6 <__stop_program>:
 9a6:	ff cf       	rjmp	.-2      	; 0x9a6 <__stop_program>
