
lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000946  000009da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000946  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  0080012a  0080012a  00000a04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012fd  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2a  00000000  00000000  00001e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000831  00000000  00000000  00002a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00003294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d00  00000000  00000000  00003a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00004793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e6 e4       	ldi	r30, 0x46	; 70
  70:	f9 e0       	ldi	r31, 0x09	; 9
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 32       	cpi	r26, 0x2A	; 42
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e2       	ldi	r26, 0x2A	; 42
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 35       	cpi	r26, 0x53	; 83
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <main>
  92:	0c 94 a1 04 	jmp	0x942	; 0x942 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
     */

    for (int j = 2; j < i; j++) {
        if(i % j == 0) {
            /* is not prime */
            return false;
  9a:	0e 94 b0 02 	call	0x560	; 0x560 <getBlinkCounter>
  9e:	0a 97       	sbiw	r24, 0x0a	; 10
  a0:	e4 f3       	brlt	.-8      	; 0x9a <blink>
  a2:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	91 11       	cpse	r25, r1
  aa:	05 c0       	rjmp	.+10     	; 0xb6 <blink+0x1c>
  ac:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
  b0:	0e 94 b7 02 	call	0x56e	; 0x56e <resetBlinkCounter>
  b4:	f2 cf       	rjmp	.-28     	; 0x9a <blink>
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	f9 cf       	rjmp	.-14     	; 0xac <blink+0x12>

000000ba <writeChar.part.0>:
  ba:	81 53       	subi	r24, 0x31	; 49
  bc:	89 30       	cpi	r24, 0x09	; 9
  be:	08 f0       	brcs	.+2      	; 0xc2 <writeChar.part.0+0x8>
  c0:	54 c0       	rjmp	.+168    	; 0x16a <writeChar.part.0+0xb0>
  c2:	e8 2f       	mov	r30, r24
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	e8 5e       	subi	r30, 0xE8	; 232
  cc:	fe 4f       	sbci	r31, 0xFE	; 254
  ce:	80 81       	ld	r24, Z
  d0:	91 81       	ldd	r25, Z+1	; 0x01
  d2:	62 30       	cpi	r22, 0x02	; 2
  d4:	71 05       	cpc	r23, r1
  d6:	09 f4       	brne	.+2      	; 0xda <writeChar.part.0+0x20>
  d8:	4e c0       	rjmp	.+156    	; 0x176 <writeChar.part.0+0xbc>
  da:	63 30       	cpi	r22, 0x03	; 3
  dc:	71 05       	cpc	r23, r1
  de:	0c f4       	brge	.+2      	; 0xe2 <writeChar.part.0+0x28>
  e0:	80 c0       	rjmp	.+256    	; 0x1e2 <writeChar.part.0+0x128>
  e2:	64 30       	cpi	r22, 0x04	; 4
  e4:	71 05       	cpc	r23, r1
  e6:	09 f4       	brne	.+2      	; 0xea <writeChar.part.0+0x30>
  e8:	be c0       	rjmp	.+380    	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
  ea:	0c f4       	brge	.+2      	; 0xee <writeChar.part.0+0x34>
  ec:	f4 c0       	rjmp	.+488    	; 0x2d6 <__EEPROM_REGION_LENGTH__+0xd6>
  ee:	65 30       	cpi	r22, 0x05	; 5
  f0:	71 05       	cpc	r23, r1
  f2:	09 f0       	breq	.+2      	; 0xf6 <writeChar.part.0+0x3c>
  f4:	ee c0       	rjmp	.+476    	; 0x2d2 <__EEPROM_REGION_LENGTH__+0xd2>
  f6:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	fc 01       	movw	r30, r24
 100:	e0 50       	subi	r30, 0x00	; 0
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	80 81       	ld	r24, Z
 106:	91 81       	ldd	r25, Z+1	; 0x01
 108:	82 95       	swap	r24
 10a:	92 95       	swap	r25
 10c:	90 7f       	andi	r25, 0xF0	; 240
 10e:	98 27       	eor	r25, r24
 110:	80 7f       	andi	r24, 0xF0	; 240
 112:	98 27       	eor	r25, r24
 114:	92 2f       	mov	r25, r18
 116:	9f 70       	andi	r25, 0x0F	; 15
 118:	89 2b       	or	r24, r25
 11a:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 11e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 122:	90 81       	ld	r25, Z
 124:	90 7f       	andi	r25, 0xF0	; 240
 126:	8f 70       	andi	r24, 0x0F	; 15
 128:	89 2b       	or	r24, r25
 12a:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 12e:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 132:	80 81       	ld	r24, Z
 134:	91 81       	ldd	r25, Z+1	; 0x01
 136:	88 27       	eor	r24, r24
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	95 95       	asr	r25
 13c:	87 95       	ror	r24
 13e:	95 95       	asr	r25
 140:	87 95       	ror	r24
 142:	95 95       	asr	r25
 144:	87 95       	ror	r24
 146:	95 95       	asr	r25
 148:	87 95       	ror	r24
 14a:	92 2f       	mov	r25, r18
 14c:	9f 70       	andi	r25, 0x0F	; 15
 14e:	89 2b       	or	r24, r25
 150:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 154:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 158:	20 81       	ld	r18, Z
 15a:	31 81       	ldd	r19, Z+1	; 0x01
 15c:	22 27       	eor	r18, r18
 15e:	30 7f       	andi	r19, 0xF0	; 240
 160:	8f 70       	andi	r24, 0x0F	; 15
 162:	83 2b       	or	r24, r19
 164:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 168:	08 95       	ret
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	62 30       	cpi	r22, 0x02	; 2
 170:	71 05       	cpc	r23, r1
 172:	09 f0       	breq	.+2      	; 0x176 <writeChar.part.0+0xbc>
 174:	b2 cf       	rjmp	.-156    	; 0xda <writeChar.part.0+0x20>
 176:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	fc 01       	movw	r30, r24
 180:	e0 50       	subi	r30, 0x00	; 0
 182:	ff 4f       	sbci	r31, 0xFF	; 255
 184:	80 81       	ld	r24, Z
 186:	98 2f       	mov	r25, r24
 188:	9f 70       	andi	r25, 0x0F	; 15
 18a:	82 2f       	mov	r24, r18
 18c:	80 7f       	andi	r24, 0xF0	; 240
 18e:	89 2b       	or	r24, r25
 190:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 194:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 198:	80 81       	ld	r24, Z
 19a:	91 81       	ldd	r25, Z+1	; 0x01
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	99 27       	eor	r25, r25
 1a0:	95 95       	asr	r25
 1a2:	87 95       	ror	r24
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	95 95       	asr	r25
 1aa:	87 95       	ror	r24
 1ac:	95 95       	asr	r25
 1ae:	87 95       	ror	r24
 1b0:	92 2f       	mov	r25, r18
 1b2:	90 7f       	andi	r25, 0xF0	; 240
 1b4:	89 2b       	or	r24, r25
 1b6:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 1ba:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 1be:	20 81       	ld	r18, Z
 1c0:	31 81       	ldd	r19, Z+1	; 0x01
 1c2:	22 27       	eor	r18, r18
 1c4:	3f 70       	andi	r19, 0x0F	; 15
 1c6:	80 7f       	andi	r24, 0xF0	; 240
 1c8:	83 2b       	or	r24, r19
 1ca:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 1ce:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 1d2:	91 81       	ldd	r25, Z+1	; 0x01
 1d4:	92 95       	swap	r25
 1d6:	9f 70       	andi	r25, 0x0F	; 15
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	89 2b       	or	r24, r25
 1dc:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 1e0:	08 95       	ret
 1e2:	61 15       	cp	r22, r1
 1e4:	71 05       	cpc	r23, r1
 1e6:	09 f4       	brne	.+2      	; 0x1ea <writeChar.part.0+0x130>
 1e8:	b0 c0       	rjmp	.+352    	; 0x34a <__EEPROM_REGION_LENGTH__+0x14a>
 1ea:	61 30       	cpi	r22, 0x01	; 1
 1ec:	71 05       	cpc	r23, r1
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <writeChar.part.0+0x138>
 1f0:	71 c0       	rjmp	.+226    	; 0x2d4 <__EEPROM_REGION_LENGTH__+0xd4>
 1f2:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	fc 01       	movw	r30, r24
 1fc:	e0 50       	subi	r30, 0x00	; 0
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
 200:	80 81       	ld	r24, Z
 202:	91 81       	ldd	r25, Z+1	; 0x01
 204:	82 95       	swap	r24
 206:	92 95       	swap	r25
 208:	90 7f       	andi	r25, 0xF0	; 240
 20a:	98 27       	eor	r25, r24
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	98 27       	eor	r25, r24
 210:	92 2f       	mov	r25, r18
 212:	9f 70       	andi	r25, 0x0F	; 15
 214:	89 2b       	or	r24, r25
 216:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 21a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 21e:	90 81       	ld	r25, Z
 220:	90 7f       	andi	r25, 0xF0	; 240
 222:	8f 70       	andi	r24, 0x0F	; 15
 224:	89 2b       	or	r24, r25
 226:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 22a:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 22e:	80 81       	ld	r24, Z
 230:	91 81       	ldd	r25, Z+1	; 0x01
 232:	88 27       	eor	r24, r24
 234:	9f 70       	andi	r25, 0x0F	; 15
 236:	95 95       	asr	r25
 238:	87 95       	ror	r24
 23a:	95 95       	asr	r25
 23c:	87 95       	ror	r24
 23e:	95 95       	asr	r25
 240:	87 95       	ror	r24
 242:	95 95       	asr	r25
 244:	87 95       	ror	r24
 246:	92 2f       	mov	r25, r18
 248:	9f 70       	andi	r25, 0x0F	; 15
 24a:	89 2b       	or	r24, r25
 24c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 250:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 254:	20 81       	ld	r18, Z
 256:	31 81       	ldd	r19, Z+1	; 0x01
 258:	22 27       	eor	r18, r18
 25a:	30 7f       	andi	r19, 0xF0	; 240
 25c:	8f 70       	andi	r24, 0x0F	; 15
 25e:	83 2b       	or	r24, r19
 260:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 264:	08 95       	ret
 266:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	fc 01       	movw	r30, r24
 270:	e0 50       	subi	r30, 0x00	; 0
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	80 81       	ld	r24, Z
 276:	98 2f       	mov	r25, r24
 278:	9f 70       	andi	r25, 0x0F	; 15
 27a:	82 2f       	mov	r24, r18
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	89 2b       	or	r24, r25
 280:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 284:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 288:	80 81       	ld	r24, Z
 28a:	91 81       	ldd	r25, Z+1	; 0x01
 28c:	80 7f       	andi	r24, 0xF0	; 240
 28e:	99 27       	eor	r25, r25
 290:	95 95       	asr	r25
 292:	87 95       	ror	r24
 294:	95 95       	asr	r25
 296:	87 95       	ror	r24
 298:	95 95       	asr	r25
 29a:	87 95       	ror	r24
 29c:	95 95       	asr	r25
 29e:	87 95       	ror	r24
 2a0:	92 2f       	mov	r25, r18
 2a2:	90 7f       	andi	r25, 0xF0	; 240
 2a4:	89 2b       	or	r24, r25
 2a6:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 2aa:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 2ae:	20 81       	ld	r18, Z
 2b0:	31 81       	ldd	r19, Z+1	; 0x01
 2b2:	22 27       	eor	r18, r18
 2b4:	3f 70       	andi	r19, 0x0F	; 15
 2b6:	80 7f       	andi	r24, 0xF0	; 240
 2b8:	83 2b       	or	r24, r19
 2ba:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 2be:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 2c2:	91 81       	ldd	r25, Z+1	; 0x01
 2c4:	92 95       	swap	r25
 2c6:	9f 70       	andi	r25, 0x0F	; 15
 2c8:	80 7f       	andi	r24, 0xF0	; 240
 2ca:	89 2b       	or	r24, r25
 2cc:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 2d0:	08 95       	ret
 2d2:	08 95       	ret
 2d4:	08 95       	ret
 2d6:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	fc 01       	movw	r30, r24
 2e0:	e0 50       	subi	r30, 0x00	; 0
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	80 81       	ld	r24, Z
 2e6:	91 81       	ldd	r25, Z+1	; 0x01
 2e8:	82 95       	swap	r24
 2ea:	92 95       	swap	r25
 2ec:	90 7f       	andi	r25, 0xF0	; 240
 2ee:	98 27       	eor	r25, r24
 2f0:	80 7f       	andi	r24, 0xF0	; 240
 2f2:	98 27       	eor	r25, r24
 2f4:	92 2f       	mov	r25, r18
 2f6:	9f 70       	andi	r25, 0x0F	; 15
 2f8:	89 2b       	or	r24, r25
 2fa:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 2fe:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 302:	90 81       	ld	r25, Z
 304:	90 7f       	andi	r25, 0xF0	; 240
 306:	8f 70       	andi	r24, 0x0F	; 15
 308:	89 2b       	or	r24, r25
 30a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 30e:	20 91 f7 00 	lds	r18, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 312:	80 81       	ld	r24, Z
 314:	91 81       	ldd	r25, Z+1	; 0x01
 316:	88 27       	eor	r24, r24
 318:	9f 70       	andi	r25, 0x0F	; 15
 31a:	95 95       	asr	r25
 31c:	87 95       	ror	r24
 31e:	95 95       	asr	r25
 320:	87 95       	ror	r24
 322:	95 95       	asr	r25
 324:	87 95       	ror	r24
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	92 2f       	mov	r25, r18
 32c:	9f 70       	andi	r25, 0x0F	; 15
 32e:	89 2b       	or	r24, r25
 330:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 334:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 338:	20 81       	ld	r18, Z
 33a:	31 81       	ldd	r19, Z+1	; 0x01
 33c:	22 27       	eor	r18, r18
 33e:	30 7f       	andi	r19, 0xF0	; 240
 340:	8f 70       	andi	r24, 0x0F	; 15
 342:	83 2b       	or	r24, r19
 344:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 348:	08 95       	ret
 34a:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	fc 01       	movw	r30, r24
 354:	e0 50       	subi	r30, 0x00	; 0
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	80 81       	ld	r24, Z
 35a:	98 2f       	mov	r25, r24
 35c:	9f 70       	andi	r25, 0x0F	; 15
 35e:	82 2f       	mov	r24, r18
 360:	80 7f       	andi	r24, 0xF0	; 240
 362:	89 2b       	or	r24, r25
 364:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 368:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 36c:	80 81       	ld	r24, Z
 36e:	91 81       	ldd	r25, Z+1	; 0x01
 370:	80 7f       	andi	r24, 0xF0	; 240
 372:	99 27       	eor	r25, r25
 374:	95 95       	asr	r25
 376:	87 95       	ror	r24
 378:	95 95       	asr	r25
 37a:	87 95       	ror	r24
 37c:	95 95       	asr	r25
 37e:	87 95       	ror	r24
 380:	95 95       	asr	r25
 382:	87 95       	ror	r24
 384:	92 2f       	mov	r25, r18
 386:	90 7f       	andi	r25, 0xF0	; 240
 388:	89 2b       	or	r24, r25
 38a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 38e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 392:	20 81       	ld	r18, Z
 394:	31 81       	ldd	r19, Z+1	; 0x01
 396:	22 27       	eor	r18, r18
 398:	3f 70       	andi	r19, 0x0F	; 15
 39a:	80 7f       	andi	r24, 0xF0	; 240
 39c:	83 2b       	or	r24, r19
 39e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 3a2:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 3a6:	91 81       	ldd	r25, Z+1	; 0x01
 3a8:	92 95       	swap	r25
 3aa:	9f 70       	andi	r25, 0x0F	; 15
 3ac:	80 7f       	andi	r24, 0xF0	; 240
 3ae:	89 2b       	or	r24, r25
 3b0:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 3b4:	08 95       	ret

000003b6 <printAt>:
    }
    /* is prime */
    return true;
}

void printAt(long num, int pos) {
 3b6:	cf 92       	push	r12
 3b8:	df 92       	push	r13
 3ba:	ef 92       	push	r14
 3bc:	ff 92       	push	r15
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	6b 01       	movw	r12, r22
 3c4:	7c 01       	movw	r14, r24
 3c6:	ea 01       	movw	r28, r20
     */

    int i = 0;

    /* checks if pos is within fixed range */
    if(pos < 0 || pos > 5) {
 3c8:	46 30       	cpi	r20, 0x06	; 6
 3ca:	51 05       	cpc	r21, r1
 3cc:	f0 f0       	brcs	.+60     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
     * returns: none
     */

    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
    pp++;
 3ce:	21 96       	adiw	r28, 0x01	; 1
     */

    int i = 0;

    /* checks if pos is within fixed range */
    if(pos < 0 || pos > 5) {
 3d0:	c6 30       	cpi	r28, 0x06	; 6
 3d2:	d1 05       	cpc	r29, r1
 3d4:	38 f0       	brcs	.+14     	; 0x3e4 <printAt+0x2e>
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
    pp++;
    writeChar( num % 10 + '0', pp);

}
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	ff 90       	pop	r15
 3dc:	ef 90       	pop	r14
 3de:	df 90       	pop	r13
 3e0:	cf 90       	pop	r12
 3e2:	08 95       	ret
 3e4:	c7 01       	movw	r24, r14
 3e6:	b6 01       	movw	r22, r12
 3e8:	2a e0       	ldi	r18, 0x0A	; 10
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	0e 94 1f 04 	call	0x83e	; 0x83e <__divmodsi4>
 3f4:	86 2f       	mov	r24, r22
 3f6:	be 01       	movw	r22, r28
 3f8:	80 5d       	subi	r24, 0xD0	; 208
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	df 90       	pop	r13
 404:	cf 90       	pop	r12
 406:	0c 94 5d 00 	jmp	0xba	; 0xba <writeChar.part.0>
 40a:	24 e6       	ldi	r18, 0x64	; 100
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	0e 94 1f 04 	call	0x83e	; 0x83e <__divmodsi4>
 416:	2a e0       	ldi	r18, 0x0A	; 10
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	40 e0       	ldi	r20, 0x00	; 0
 41c:	50 e0       	ldi	r21, 0x00	; 0
 41e:	0e 94 1f 04 	call	0x83e	; 0x83e <__divmodsi4>
 422:	be 01       	movw	r22, r28
 424:	80 e3       	ldi	r24, 0x30	; 48
 426:	82 0f       	add	r24, r18
 428:	0e 94 5d 00 	call	0xba	; 0xba <writeChar.part.0>
 42c:	d0 cf       	rjmp	.-96     	; 0x3ce <printAt+0x18>

0000042e <button>:
     * and writes them onto LCD.
     *
     * returns: none
     */
	bool pressP4 = true;
    PORTB = 0x0080;
 42e:	80 e8       	ldi	r24, 0x80	; 128
 430:	85 b9       	out	0x05, r24	; 5
     * code that counts button activations
     * and writes them onto LCD.
     *
     * returns: none
     */
	bool pressP4 = true;
 432:	c1 e0       	ldi	r28, 0x01	; 1
 434:	17 c0       	rjmp	.+46     	; 0x464 <button+0x36>
	
    while(true) {
        if(!(PINB & (0X0080))) {

            if(pressP4){
                count ++;
 436:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <count>
 43a:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <count+0x1>
    PORTB = 0x0080;
	
    while(true) {
        if(!(PINB & (0X0080))) {

            if(pressP4){
 43e:	cc 23       	and	r28, r28
 440:	39 f0       	breq	.+14     	; 0x450 <button+0x22>
                count ++;
 442:	6f 5f       	subi	r22, 0xFF	; 255
 444:	7f 4f       	sbci	r23, 0xFF	; 255
 446:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <count+0x1>
 44a:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <count>
                pressP4 = false;
 44e:	c0 e0       	ldi	r28, 0x00	; 0
            }
        }
        if(PINB & (0X0080)) {
 450:	1f 99       	sbic	0x03, 7	; 3
 452:	10 c0       	rjmp	.+32     	; 0x474 <button+0x46>
            pressP4 = true;
        }
        printAt(count, 4);
 454:	07 2e       	mov	r0, r23
 456:	00 0c       	add	r0, r0
 458:	88 0b       	sbc	r24, r24
 45a:	99 0b       	sbc	r25, r25
 45c:	44 e0       	ldi	r20, 0x04	; 4
 45e:	50 e0       	ldi	r21, 0x00	; 0
 460:	0e 94 db 01 	call	0x3b6	; 0x3b6 <printAt>
     */
	bool pressP4 = true;
    PORTB = 0x0080;
	
    while(true) {
        if(!(PINB & (0X0080))) {
 464:	1f 9b       	sbis	0x03, 7	; 3
 466:	e7 cf       	rjmp	.-50     	; 0x436 <button+0x8>
 468:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <count>
 46c:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <count+0x1>
            if(pressP4){
                count ++;
                pressP4 = false;
            }
        }
        if(PINB & (0X0080)) {
 470:	1f 9b       	sbis	0x03, 7	; 3
 472:	f0 cf       	rjmp	.-32     	; 0x454 <button+0x26>
            pressP4 = true;
 474:	c1 e0       	ldi	r28, 0x01	; 1
 476:	ee cf       	rjmp	.-36     	; 0x454 <button+0x26>

00000478 <computePrimes>:
    pp++;
    writeChar( num % 10 + '0', pp);

}

void computePrimes(int pos) {
 478:	ec 01       	movw	r28, r24
     * at positions 0 and 1.
     * returns: none
     */

    long n;
    for(n = 1; ; n++) {
 47a:	81 2c       	mov	r8, r1
 47c:	91 2c       	mov	r9, r1
 47e:	54 01       	movw	r10, r8
 480:	83 94       	inc	r8
     * a prime value or not.
     *
     * returns: bool
     */

    for (int j = 2; j < i; j++) {
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	88 16       	cp	r8, r24
 486:	91 04       	cpc	r9, r1
 488:	a1 04       	cpc	r10, r1
 48a:	b1 04       	cpc	r11, r1
 48c:	e4 f0       	brlt	.+56     	; 0x4c6 <computePrimes+0x4e>
        if(i % j == 0) {
 48e:	80 fe       	sbrs	r8, 0
 490:	1f c0       	rjmp	.+62     	; 0x4d0 <computePrimes+0x58>
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	c8 2e       	mov	r12, r24
 496:	d1 2c       	mov	r13, r1
 498:	e1 2c       	mov	r14, r1
 49a:	f1 2c       	mov	r15, r1
 49c:	0d c0       	rjmp	.+26     	; 0x4b8 <computePrimes+0x40>
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	c8 1a       	sub	r12, r24
 4a2:	d8 0a       	sbc	r13, r24
 4a4:	e8 0a       	sbc	r14, r24
 4a6:	f8 0a       	sbc	r15, r24
 4a8:	c5 01       	movw	r24, r10
 4aa:	b4 01       	movw	r22, r8
 4ac:	0e 94 1f 04 	call	0x83e	; 0x83e <__divmodsi4>
 4b0:	67 2b       	or	r22, r23
 4b2:	68 2b       	or	r22, r24
 4b4:	69 2b       	or	r22, r25
 4b6:	61 f0       	breq	.+24     	; 0x4d0 <computePrimes+0x58>
     * a prime value or not.
     *
     * returns: bool
     */

    for (int j = 2; j < i; j++) {
 4b8:	96 01       	movw	r18, r12
 4ba:	a7 01       	movw	r20, r14
 4bc:	c8 14       	cp	r12, r8
 4be:	d9 04       	cpc	r13, r9
 4c0:	ea 04       	cpc	r14, r10
 4c2:	fb 04       	cpc	r15, r11
 4c4:	61 f7       	brne	.-40     	; 0x49e <computePrimes+0x26>
     */

    long n;
    for(n = 1; ; n++) {
        if (is_prime(n)) {
            printAt(n, pos);
 4c6:	ae 01       	movw	r20, r28
 4c8:	c5 01       	movw	r24, r10
 4ca:	b4 01       	movw	r22, r8
 4cc:	0e 94 db 01 	call	0x3b6	; 0x3b6 <printAt>
     * at positions 0 and 1.
     * returns: none
     */

    long n;
    for(n = 1; ; n++) {
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	88 1a       	sub	r8, r24
 4d4:	98 0a       	sbc	r9, r24
 4d6:	a8 0a       	sbc	r10, r24
 4d8:	b8 0a       	sbc	r11, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 4da:	d3 cf       	rjmp	.-90     	; 0x482 <computePrimes+0xa>

000004dc <main>:

}

int main() {
	//Initialize button
	PORTB |= (1<<7);
 4dc:	2f 9a       	sbi	0x05, 7	; 5
	
	//Initialize clock 
	CLKPR = (0x80);
 4de:	e1 e6       	ldi	r30, 0x61	; 97
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 e8       	ldi	r24, 0x80	; 128
 4e4:	80 83       	st	Z, r24
	CLKPR = (0x00);
 4e6:	10 82       	st	Z, r1
     *
     * returns: none
     */

    /* Asynchronous clock, 1/3 bias, 1/4 duty cycle,   25 segments */
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
 4e8:	87 eb       	ldi	r24, 0xB7	; 183
 4ea:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
    /* Set volt to 3.35V */
    LCDCCR = (1<<LCDCC3) |(1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
 4ee:	8f e0       	ldi	r24, 0x0F	; 15
 4f0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    /* Clock division factor to 8, and prescaler to 16 */
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 4f4:	87 e0       	ldi	r24, 0x07	; 7
 4f6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    /* low power waveform, no frame interrupt, no blanking */
    LCDCRA = (1<<LCDAB) | (1<<LCDEN);
 4fa:	80 ec       	ldi	r24, 0xC0	; 192
 4fc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	CLKPR = (0x80);
	CLKPR = (0x00);
	
	LCD_init();
	
	spawn(button, 0);
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	87 e1       	ldi	r24, 0x17	; 23
 506:	92 e0       	ldi	r25, 0x02	; 2
 508:	0e 94 be 02 	call	0x57c	; 0x57c <spawn>
	spawn(blink, 0);
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	8d e4       	ldi	r24, 0x4D	; 77
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 be 02 	call	0x57c	; 0x57c <spawn>
	computePrimes(0);
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 3c 02 	call	0x478	; 0x478 <computePrimes>

00000520 <dispatch>:

void addBlinkCounter(){
	// add 50ms to counter
	DISABLE();
	blinkCounter++;
	ENABLE();
 520:	cf 93       	push	r28
 522:	df 93       	push	r29
 524:	00 d0       	rcall	.+0      	; 0x526 <dispatch+0x6>
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	9a 83       	std	Y+2, r25	; 0x02
 52c:	89 83       	std	Y+1, r24	; 0x01
 52e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 532:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 536:	06 96       	adiw	r24, 0x06	; 6
 538:	0e 94 60 04 	call	0x8c0	; 0x8c0 <setjmp>
 53c:	89 2b       	or	r24, r25
 53e:	29 f0       	breq	.+10     	; 0x54a <dispatch+0x2a>
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	08 95       	ret
 54a:	89 81       	ldd	r24, Y+1	; 0x01
 54c:	9a 81       	ldd	r25, Y+2	; 0x02
 54e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <current+0x1>
 552:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <current>
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	06 96       	adiw	r24, 0x06	; 6
 55c:	0e 94 80 04 	call	0x900	; 0x900 <longjmp>

00000560 <getBlinkCounter>:
		yield();
	}
}

int getBlinkCounter() {
	DISABLE();
 560:	f8 94       	cli
	int temp = blinkCounter;
 562:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 566:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
	ENABLE();
 56a:	78 94       	sei
	return temp;
}
 56c:	08 95       	ret

0000056e <resetBlinkCounter>:

int resetBlinkCounter() {
	DISABLE();
 56e:	f8 94       	cli
	blinkCounter = 0;
 570:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x1>
 574:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
	ENABLE();
 578:	78 94       	sei
}
 57a:	08 95       	ret

0000057c <spawn>:
		current = next;
		longjmp(next->context,1);
	}
}

void spawn(void (* function)(int), int arg) {
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	00 d0       	rcall	.+0      	; 0x582 <spawn+0x6>
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
	thread newp;

	DISABLE();
 586:	f8 94       	cli
	if (!initialized) initialize();
 588:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <initialized>
 58c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <initialized+0x1>
 590:	23 2b       	or	r18, r19
 592:	09 f4       	brne	.+2      	; 0x596 <spawn+0x1a>
 594:	43 c0       	rjmp	.+134    	; 0x61c <spawn+0xa0>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 596:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <freeQ>
 59a:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <freeQ+0x1>
 59e:	3a 83       	std	Y+2, r19	; 0x02
 5a0:	29 83       	std	Y+1, r18	; 0x01
	if (*queue) {
 5a2:	23 2b       	or	r18, r19
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <spawn+0x2c>
 5a6:	7e c0       	rjmp	.+252    	; 0x6a4 <spawn+0x128>
		*queue = (*queue)->next;
 5a8:	e9 81       	ldd	r30, Y+1	; 0x01
 5aa:	fa 81       	ldd	r31, Y+2	; 0x02
 5ac:	44 81       	ldd	r20, Z+4	; 0x04
 5ae:	55 81       	ldd	r21, Z+5	; 0x05
 5b0:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <freeQ+0x1>
 5b4:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <freeQ>

	DISABLE();
	if (!initialized) initialize();

	newp = dequeue(&freeQ);
	newp->function = function;
 5b8:	91 83       	std	Z+1, r25	; 0x01
 5ba:	80 83       	st	Z, r24
	newp->arg = arg;
 5bc:	73 83       	std	Z+3, r23	; 0x03
 5be:	62 83       	std	Z+2, r22	; 0x02
	newp->next = NULL;
 5c0:	15 82       	std	Z+5, r1	; 0x05
 5c2:	14 82       	std	Z+4, r1	; 0x04
	if (setjmp(newp->context) == 1) {
 5c4:	cf 01       	movw	r24, r30
 5c6:	06 96       	adiw	r24, 0x06	; 6
 5c8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <setjmp>
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <spawn+0x56>
 5d0:	76 c0       	rjmp	.+236    	; 0x6be <spawn+0x142>
		current->function(current->arg);
		DISABLE();
		enqueue(current, &freeQ);
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);
 5d2:	e9 81       	ldd	r30, Y+1	; 0x01
 5d4:	fa 81       	ldd	r31, Y+2	; 0x02
 5d6:	36 96       	adiw	r30, 0x06	; 6
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
 5da:	9a 81       	ldd	r25, Y+2	; 0x02
 5dc:	87 59       	subi	r24, 0x97	; 151
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	91 8b       	std	Z+17, r25	; 0x11
 5e2:	80 8b       	std	Z+16, r24	; 0x10
 5e4:	93 8b       	std	Z+19, r25	; 0x13
 5e6:	82 8b       	std	Z+18, r24	; 0x12
	blinkCounter = 0;
	ENABLE();
}

static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 5e8:	e9 81       	ldd	r30, Y+1	; 0x01
 5ea:	fa 81       	ldd	r31, Y+2	; 0x02
 5ec:	15 82       	std	Z+5, r1	; 0x05
 5ee:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL) {
 5f0:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <readyQ>
 5f4:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <readyQ+0x1>
 5f8:	30 97       	sbiw	r30, 0x00	; 0
 5fa:	11 f4       	brne	.+4      	; 0x600 <spawn+0x84>
 5fc:	54 c0       	rjmp	.+168    	; 0x6a6 <spawn+0x12a>
		*queue = p;
		} else {
		thread q = *queue;
		while (q->next)
 5fe:	fc 01       	movw	r30, r24
 600:	84 81       	ldd	r24, Z+4	; 0x04
 602:	95 81       	ldd	r25, Z+5	; 0x05
 604:	00 97       	sbiw	r24, 0x00	; 0
 606:	d9 f7       	brne	.-10     	; 0x5fe <spawn+0x82>
		q = q->next;
		q->next = p;
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	9a 81       	ldd	r25, Y+2	; 0x02
 60c:	95 83       	std	Z+5, r25	; 0x05
 60e:	84 83       	std	Z+4, r24	; 0x04
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);

	enqueue(newp, &readyQ);
	ENABLE();
 610:	78 94       	sei
}
 612:	0f 90       	pop	r0
 614:	0f 90       	pop	r0
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret
int blinkCounter = 0;

static void initialize(void) {
	int i;
	for (i=0; i<NTHREADS-1; i++)
	threads[i].next = &threads[i+1];
 61c:	2c e0       	ldi	r18, 0x0C	; 12
 61e:	32 e0       	ldi	r19, 0x02	; 2
 620:	30 93 a4 01 	sts	0x01A4, r19	; 0x8001a4 <threads+0x5>
 624:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <threads+0x4>
 628:	29 e7       	ldi	r18, 0x79	; 121
 62a:	32 e0       	ldi	r19, 0x02	; 2
 62c:	30 93 11 02 	sts	0x0211, r19	; 0x800211 <threads+0x72>
 630:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <threads+0x71>
 634:	26 ee       	ldi	r18, 0xE6	; 230
 636:	32 e0       	ldi	r19, 0x02	; 2
 638:	30 93 7e 02 	sts	0x027E, r19	; 0x80027e <threads+0xdf>
 63c:	20 93 7d 02 	sts	0x027D, r18	; 0x80027d <threads+0xde>
	threads[NTHREADS-1].next = NULL;
 640:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <threads+0x14c>
 644:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <threads+0x14b>
	
	

	// Enable interrupts
	EIMSK |= (1<<PCIE1); // 7th bit enabled for PCIE1 (1<<7)
 648:	ef 9a       	sbi	0x1d, 7	; 29
	PCMSK1 |= (1<<PCINT15); // 7th bit enabled for PCINT (1<<7)
 64a:	ec e6       	ldi	r30, 0x6C	; 108
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	20 81       	ld	r18, Z
 650:	20 68       	ori	r18, 0x80	; 128
 652:	20 83       	st	Z, r18

	// 	Set OC1A to 1
	TCCR1A |= (1<<COM1A0) | (1<<COM1A1);
 654:	e0 e8       	ldi	r30, 0x80	; 128
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	20 81       	ld	r18, Z
 65a:	20 6c       	ori	r18, 0xC0	; 192
 65c:	20 83       	st	Z, r18
	// 	Set the mode to CTC and prescaler to 1024
	TCCR1B |= (1<<WGM12) | (1<<CS10) | (1<<CS12);
 65e:	e1 e8       	ldi	r30, 0x81	; 129
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	20 81       	ld	r18, Z
 664:	2d 60       	ori	r18, 0x0D	; 13
 666:	20 83       	st	Z, r18
	// 	Activate "timer output"
	TIMSK1 |= (1<<OCIE1A);
 668:	ef e6       	ldi	r30, 0x6F	; 111
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	20 81       	ld	r18, Z
 66e:	22 60       	ori	r18, 0x02	; 2
 670:	20 83       	st	Z, r18
	
	// Timer compare value
	OCR1A = 391; // (8000000 / 1024) * 0.005
 672:	27 e8       	ldi	r18, 0x87	; 135
 674:	31 e0       	ldi	r19, 0x01	; 1
 676:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 67a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	
	// Set timer to 0
	TCNT1 = 0;
 67e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 682:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	initialized = 1;
 686:	21 e0       	ldi	r18, 0x01	; 1
 688:	30 e0       	ldi	r19, 0x00	; 0
 68a:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <initialized+0x1>
 68e:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <initialized>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 692:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <freeQ>
 696:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <freeQ+0x1>
 69a:	3a 83       	std	Y+2, r19	; 0x02
 69c:	29 83       	std	Y+1, r18	; 0x01
	if (*queue) {
 69e:	23 2b       	or	r18, r19
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <spawn+0x128>
 6a2:	82 cf       	rjmp	.-252    	; 0x5a8 <spawn+0x2c>
 6a4:	ff cf       	rjmp	.-2      	; 0x6a4 <spawn+0x128>
}

static void enqueue(thread p, thread *queue) {
	p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 6a6:	29 81       	ldd	r18, Y+1	; 0x01
 6a8:	3a 81       	ldd	r19, Y+2	; 0x02
 6aa:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <readyQ+0x1>
 6ae:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <readyQ>
		dispatch(dequeue(&readyQ));
	}
	SETSTACK(&newp->context, &newp->stack);

	enqueue(newp, &readyQ);
	ENABLE();
 6b2:	78 94       	sei
}
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	08 95       	ret
	newp = dequeue(&freeQ);
	newp->function = function;
	newp->arg = arg;
	newp->next = NULL;
	if (setjmp(newp->context) == 1) {
		ENABLE();
 6be:	78 94       	sei
		current->function(current->arg);
 6c0:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 6c4:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
 6c8:	ed 91       	ld	r30, X+
 6ca:	fc 91       	ld	r31, X
 6cc:	11 97       	sbiw	r26, 0x01	; 1
 6ce:	12 96       	adiw	r26, 0x02	; 2
 6d0:	8d 91       	ld	r24, X+
 6d2:	9c 91       	ld	r25, X
 6d4:	13 97       	sbiw	r26, 0x03	; 3
 6d6:	09 95       	icall
		DISABLE();
 6d8:	f8 94       	cli
		enqueue(current, &freeQ);
 6da:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 6de:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
	blinkCounter = 0;
	ENABLE();
}

static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 6e2:	15 96       	adiw	r26, 0x05	; 5
 6e4:	1c 92       	st	X, r1
 6e6:	1e 92       	st	-X, r1
 6e8:	14 97       	sbiw	r26, 0x04	; 4
	if (*queue == NULL) {
 6ea:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <freeQ>
 6ee:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <freeQ+0x1>
 6f2:	30 97       	sbiw	r30, 0x00	; 0
 6f4:	11 f4       	brne	.+4      	; 0x6fa <spawn+0x17e>
 6f6:	17 c0       	rjmp	.+46     	; 0x726 <spawn+0x1aa>
		*queue = p;
		} else {
		thread q = *queue;
		while (q->next)
 6f8:	fc 01       	movw	r30, r24
 6fa:	84 81       	ldd	r24, Z+4	; 0x04
 6fc:	95 81       	ldd	r25, Z+5	; 0x05
 6fe:	00 97       	sbiw	r24, 0x00	; 0
 700:	d9 f7       	brne	.-10     	; 0x6f8 <spawn+0x17c>
		q = q->next;
		q->next = p;
 702:	b5 83       	std	Z+5, r27	; 0x05
 704:	a4 83       	std	Z+4, r26	; 0x04
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 706:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <readyQ>
 70a:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <readyQ+0x1>
	if (*queue) {
 70e:	00 97       	sbiw	r24, 0x00	; 0
 710:	a1 f0       	breq	.+40     	; 0x73a <spawn+0x1be>
		*queue = (*queue)->next;
 712:	fc 01       	movw	r30, r24
 714:	24 81       	ldd	r18, Z+4	; 0x04
 716:	35 81       	ldd	r19, Z+5	; 0x05
 718:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <readyQ+0x1>
 71c:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <readyQ>
	if (setjmp(newp->context) == 1) {
		ENABLE();
		current->function(current->arg);
		DISABLE();
		enqueue(current, &freeQ);
		dispatch(dequeue(&readyQ));
 720:	0e 94 90 02 	call	0x520	; 0x520 <dispatch>
 724:	56 cf       	rjmp	.-340    	; 0x5d2 <spawn+0x56>
}

static void enqueue(thread p, thread *queue) {
	p->next = NULL;
	if (*queue == NULL) {
		*queue = p;
 726:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <freeQ+0x1>
 72a:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <freeQ>
		q->next = p;
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 72e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <readyQ>
 732:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <readyQ+0x1>
	if (*queue) {
 736:	00 97       	sbiw	r24, 0x00	; 0
 738:	61 f7       	brne	.-40     	; 0x712 <spawn+0x196>
 73a:	ff cf       	rjmp	.-2      	; 0x73a <spawn+0x1be>

0000073c <yield>:
	ENABLE();
}

void yield(void) {
	
	DISABLE();
 73c:	f8 94       	cli
	enqueue(current,(&readyQ));
 73e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 742:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
	blinkCounter = 0;
	ENABLE();
}

static void enqueue(thread p, thread *queue) {
	p->next = NULL;
 746:	fc 01       	movw	r30, r24
 748:	15 82       	std	Z+5, r1	; 0x05
 74a:	14 82       	std	Z+4, r1	; 0x04
	if (*queue == NULL) {
 74c:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <readyQ>
 750:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <readyQ+0x1>
 754:	10 97       	sbiw	r26, 0x00	; 0
 756:	b9 f0       	breq	.+46     	; 0x786 <yield+0x4a>
 758:	fd 01       	movw	r30, r26
 75a:	01 c0       	rjmp	.+2      	; 0x75e <yield+0x22>
		*queue = p;
		} else {
		thread q = *queue;
		while (q->next)
 75c:	f9 01       	movw	r30, r18
 75e:	24 81       	ldd	r18, Z+4	; 0x04
 760:	35 81       	ldd	r19, Z+5	; 0x05
 762:	21 15       	cp	r18, r1
 764:	31 05       	cpc	r19, r1
 766:	d1 f7       	brne	.-12     	; 0x75c <yield+0x20>
		q = q->next;
		q->next = p;
 768:	95 83       	std	Z+5, r25	; 0x05
 76a:	84 83       	std	Z+4, r24	; 0x04
 76c:	14 96       	adiw	r26, 0x04	; 4
 76e:	2d 91       	ld	r18, X+
 770:	3c 91       	ld	r19, X
 772:	15 97       	sbiw	r26, 0x05	; 5
 774:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
		*queue = (*queue)->next;
 776:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <readyQ+0x1>
 77a:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <readyQ>

void yield(void) {
	
	DISABLE();
	enqueue(current,(&readyQ));
	dispatch(dequeue(&readyQ));
 77e:	0e 94 90 02 	call	0x520	; 0x520 <dispatch>
	ENABLE();
 782:	78 94       	sei
}
 784:	08 95       	ret
	}
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
 786:	00 97       	sbiw	r24, 0x00	; 0
 788:	09 f4       	brne	.+2      	; 0x78c <yield+0x50>
 78a:	ff cf       	rjmp	.-2      	; 0x78a <yield+0x4e>
 78c:	20 e0       	ldi	r18, 0x00	; 0
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	f2 cf       	rjmp	.-28     	; 0x776 <yield+0x3a>

00000792 <__vector_7>:
	blinkCounter++;
	ENABLE();
}


ISR(TIMER1_COMPA_vect) {
 792:	1f 92       	push	r1
 794:	0f 92       	push	r0
 796:	0f b6       	in	r0, 0x3f	; 63
 798:	0f 92       	push	r0
 79a:	11 24       	eor	r1, r1
 79c:	2f 93       	push	r18
 79e:	3f 93       	push	r19
 7a0:	4f 93       	push	r20
 7a2:	5f 93       	push	r21
 7a4:	6f 93       	push	r22
 7a6:	7f 93       	push	r23
 7a8:	8f 93       	push	r24
 7aa:	9f 93       	push	r25
 7ac:	af 93       	push	r26
 7ae:	bf 93       	push	r27
 7b0:	ef 93       	push	r30
 7b2:	ff 93       	push	r31
	initialized = 1;
}

void addBlinkCounter(){
	// add 50ms to counter
	DISABLE();
 7b4:	f8 94       	cli
	blinkCounter++;
 7b6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 7ba:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 7be:	01 96       	adiw	r24, 0x01	; 1
 7c0:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 7c4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
	ENABLE();
 7c8:	78 94       	sei
}


ISR(TIMER1_COMPA_vect) {
	addBlinkCounter();
	yield();
 7ca:	0e 94 9e 03 	call	0x73c	; 0x73c <yield>
	
}
 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	bf 91       	pop	r27
 7d4:	af 91       	pop	r26
 7d6:	9f 91       	pop	r25
 7d8:	8f 91       	pop	r24
 7da:	7f 91       	pop	r23
 7dc:	6f 91       	pop	r22
 7de:	5f 91       	pop	r21
 7e0:	4f 91       	pop	r20
 7e2:	3f 91       	pop	r19
 7e4:	2f 91       	pop	r18
 7e6:	0f 90       	pop	r0
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	0f 90       	pop	r0
 7ec:	1f 90       	pop	r1
 7ee:	18 95       	reti

000007f0 <__vector_3>:

ISR(PCINT1_vect) {
 7f0:	1f 92       	push	r1
 7f2:	0f 92       	push	r0
 7f4:	0f b6       	in	r0, 0x3f	; 63
 7f6:	0f 92       	push	r0
 7f8:	11 24       	eor	r1, r1
 7fa:	2f 93       	push	r18
 7fc:	3f 93       	push	r19
 7fe:	4f 93       	push	r20
 800:	5f 93       	push	r21
 802:	6f 93       	push	r22
 804:	7f 93       	push	r23
 806:	8f 93       	push	r24
 808:	9f 93       	push	r25
 80a:	af 93       	push	r26
 80c:	bf 93       	push	r27
 80e:	ef 93       	push	r30
 810:	ff 93       	push	r31
	// Check the status of PORTB bit 7 before calling yield()
	if (PORTB & (1<<7)) {
 812:	2f 99       	sbic	0x05, 7	; 5
 814:	11 c0       	rjmp	.+34     	; 0x838 <__vector_3+0x48>
		yield();
	}
}
 816:	ff 91       	pop	r31
 818:	ef 91       	pop	r30
 81a:	bf 91       	pop	r27
 81c:	af 91       	pop	r26
 81e:	9f 91       	pop	r25
 820:	8f 91       	pop	r24
 822:	7f 91       	pop	r23
 824:	6f 91       	pop	r22
 826:	5f 91       	pop	r21
 828:	4f 91       	pop	r20
 82a:	3f 91       	pop	r19
 82c:	2f 91       	pop	r18
 82e:	0f 90       	pop	r0
 830:	0f be       	out	0x3f, r0	; 63
 832:	0f 90       	pop	r0
 834:	1f 90       	pop	r1
 836:	18 95       	reti
}

ISR(PCINT1_vect) {
	// Check the status of PORTB bit 7 before calling yield()
	if (PORTB & (1<<7)) {
		yield();
 838:	0e 94 9e 03 	call	0x73c	; 0x73c <yield>
	}
}
 83c:	ec cf       	rjmp	.-40     	; 0x816 <__vector_3+0x26>

0000083e <__divmodsi4>:
 83e:	05 2e       	mov	r0, r21
 840:	97 fb       	bst	r25, 7
 842:	1e f4       	brtc	.+6      	; 0x84a <__divmodsi4+0xc>
 844:	00 94       	com	r0
 846:	0e 94 36 04 	call	0x86c	; 0x86c <__negsi2>
 84a:	57 fd       	sbrc	r21, 7
 84c:	07 d0       	rcall	.+14     	; 0x85c <__divmodsi4_neg2>
 84e:	0e 94 3e 04 	call	0x87c	; 0x87c <__udivmodsi4>
 852:	07 fc       	sbrc	r0, 7
 854:	03 d0       	rcall	.+6      	; 0x85c <__divmodsi4_neg2>
 856:	4e f4       	brtc	.+18     	; 0x86a <__divmodsi4_exit>
 858:	0c 94 36 04 	jmp	0x86c	; 0x86c <__negsi2>

0000085c <__divmodsi4_neg2>:
 85c:	50 95       	com	r21
 85e:	40 95       	com	r20
 860:	30 95       	com	r19
 862:	21 95       	neg	r18
 864:	3f 4f       	sbci	r19, 0xFF	; 255
 866:	4f 4f       	sbci	r20, 0xFF	; 255
 868:	5f 4f       	sbci	r21, 0xFF	; 255

0000086a <__divmodsi4_exit>:
 86a:	08 95       	ret

0000086c <__negsi2>:
 86c:	90 95       	com	r25
 86e:	80 95       	com	r24
 870:	70 95       	com	r23
 872:	61 95       	neg	r22
 874:	7f 4f       	sbci	r23, 0xFF	; 255
 876:	8f 4f       	sbci	r24, 0xFF	; 255
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	08 95       	ret

0000087c <__udivmodsi4>:
 87c:	a1 e2       	ldi	r26, 0x21	; 33
 87e:	1a 2e       	mov	r1, r26
 880:	aa 1b       	sub	r26, r26
 882:	bb 1b       	sub	r27, r27
 884:	fd 01       	movw	r30, r26
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <__udivmodsi4_ep>

00000888 <__udivmodsi4_loop>:
 888:	aa 1f       	adc	r26, r26
 88a:	bb 1f       	adc	r27, r27
 88c:	ee 1f       	adc	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	a2 17       	cp	r26, r18
 892:	b3 07       	cpc	r27, r19
 894:	e4 07       	cpc	r30, r20
 896:	f5 07       	cpc	r31, r21
 898:	20 f0       	brcs	.+8      	; 0x8a2 <__udivmodsi4_ep>
 89a:	a2 1b       	sub	r26, r18
 89c:	b3 0b       	sbc	r27, r19
 89e:	e4 0b       	sbc	r30, r20
 8a0:	f5 0b       	sbc	r31, r21

000008a2 <__udivmodsi4_ep>:
 8a2:	66 1f       	adc	r22, r22
 8a4:	77 1f       	adc	r23, r23
 8a6:	88 1f       	adc	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	1a 94       	dec	r1
 8ac:	69 f7       	brne	.-38     	; 0x888 <__udivmodsi4_loop>
 8ae:	60 95       	com	r22
 8b0:	70 95       	com	r23
 8b2:	80 95       	com	r24
 8b4:	90 95       	com	r25
 8b6:	9b 01       	movw	r18, r22
 8b8:	ac 01       	movw	r20, r24
 8ba:	bd 01       	movw	r22, r26
 8bc:	cf 01       	movw	r24, r30
 8be:	08 95       	ret

000008c0 <setjmp>:
 8c0:	dc 01       	movw	r26, r24
 8c2:	2d 92       	st	X+, r2
 8c4:	3d 92       	st	X+, r3
 8c6:	4d 92       	st	X+, r4
 8c8:	5d 92       	st	X+, r5
 8ca:	6d 92       	st	X+, r6
 8cc:	7d 92       	st	X+, r7
 8ce:	8d 92       	st	X+, r8
 8d0:	9d 92       	st	X+, r9
 8d2:	ad 92       	st	X+, r10
 8d4:	bd 92       	st	X+, r11
 8d6:	cd 92       	st	X+, r12
 8d8:	dd 92       	st	X+, r13
 8da:	ed 92       	st	X+, r14
 8dc:	fd 92       	st	X+, r15
 8de:	0d 93       	st	X+, r16
 8e0:	1d 93       	st	X+, r17
 8e2:	cd 93       	st	X+, r28
 8e4:	dd 93       	st	X+, r29
 8e6:	ff 91       	pop	r31
 8e8:	ef 91       	pop	r30
 8ea:	8d b7       	in	r24, 0x3d	; 61
 8ec:	8d 93       	st	X+, r24
 8ee:	8e b7       	in	r24, 0x3e	; 62
 8f0:	8d 93       	st	X+, r24
 8f2:	8f b7       	in	r24, 0x3f	; 63
 8f4:	8d 93       	st	X+, r24
 8f6:	ed 93       	st	X+, r30
 8f8:	fd 93       	st	X+, r31
 8fa:	88 27       	eor	r24, r24
 8fc:	99 27       	eor	r25, r25
 8fe:	09 94       	ijmp

00000900 <longjmp>:
 900:	dc 01       	movw	r26, r24
 902:	cb 01       	movw	r24, r22
 904:	81 30       	cpi	r24, 0x01	; 1
 906:	91 05       	cpc	r25, r1
 908:	81 1d       	adc	r24, r1
 90a:	2d 90       	ld	r2, X+
 90c:	3d 90       	ld	r3, X+
 90e:	4d 90       	ld	r4, X+
 910:	5d 90       	ld	r5, X+
 912:	6d 90       	ld	r6, X+
 914:	7d 90       	ld	r7, X+
 916:	8d 90       	ld	r8, X+
 918:	9d 90       	ld	r9, X+
 91a:	ad 90       	ld	r10, X+
 91c:	bd 90       	ld	r11, X+
 91e:	cd 90       	ld	r12, X+
 920:	dd 90       	ld	r13, X+
 922:	ed 90       	ld	r14, X+
 924:	fd 90       	ld	r15, X+
 926:	0d 91       	ld	r16, X+
 928:	1d 91       	ld	r17, X+
 92a:	cd 91       	ld	r28, X+
 92c:	dd 91       	ld	r29, X+
 92e:	ed 91       	ld	r30, X+
 930:	fd 91       	ld	r31, X+
 932:	0d 90       	ld	r0, X+
 934:	f8 94       	cli
 936:	fe bf       	out	0x3e, r31	; 62
 938:	0f be       	out	0x3f, r0	; 63
 93a:	ed bf       	out	0x3d, r30	; 61
 93c:	ed 91       	ld	r30, X+
 93e:	fd 91       	ld	r31, X+
 940:	09 94       	ijmp

00000942 <_exit>:
 942:	f8 94       	cli

00000944 <__stop_program>:
 944:	ff cf       	rjmp	.-2      	; 0x944 <__stop_program>
