
lab3_alt2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000099c  00000a30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000099c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000235  0080012a  0080012a  00000a5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000142d  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c77  00000000  00000000  00001fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d1  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  0000340c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ae  00000000  00000000  0000365c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae6  00000000  00000000  00003c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000046f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 21 04 	jmp	0x842	; 0x842 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec e9       	ldi	r30, 0x9C	; 156
  70:	f9 e0       	ldi	r31, 0x09	; 9
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	aa 32       	cpi	r26, 0x2A	; 42
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	aa e2       	ldi	r26, 0x2A	; 42
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	af 35       	cpi	r26, 0x5F	; 95
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 75 02 	call	0x4ea	; 0x4ea <main>
  92:	0c 94 cc 04 	jmp	0x998	; 0x998 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
     */

    for (int j = 2; j < i; j++) {
        if(i % j == 0) {
            /* is not prime */
            return false;
  9a:	82 e3       	ldi	r24, 0x32	; 50
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	0e 94 9d 03 	call	0x73a	; 0x73a <lock>
  a2:	0e 94 bf 02 	call	0x57e	; 0x57e <addBlinkCounter>
  a6:	0e 94 cb 02 	call	0x596	; 0x596 <getBlinkCounter>
  aa:	0a 97       	sbiw	r24, 0x0a	; 10
  ac:	0c f4       	brge	.+2      	; 0xb0 <blink+0x16>
  ae:	08 95       	ret
  b0:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	91 11       	cpse	r25, r1
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <blink+0x28>
  ba:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
  be:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <resetBlinkCounter>
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7fc0fe>
  c8:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <resetBlinkCounter>

000000cc <writeChar.part.1>:
  cc:	81 53       	subi	r24, 0x31	; 49
  ce:	89 30       	cpi	r24, 0x09	; 9
  d0:	08 f0       	brcs	.+2      	; 0xd4 <writeChar.part.1+0x8>
  d2:	54 c0       	rjmp	.+168    	; 0x17c <writeChar.part.1+0xb0>
  d4:	e8 2f       	mov	r30, r24
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ee 0f       	add	r30, r30
  da:	ff 1f       	adc	r31, r31
  dc:	e8 5e       	subi	r30, 0xE8	; 232
  de:	fe 4f       	sbci	r31, 0xFE	; 254
  e0:	80 81       	ld	r24, Z
  e2:	91 81       	ldd	r25, Z+1	; 0x01
  e4:	62 30       	cpi	r22, 0x02	; 2
  e6:	71 05       	cpc	r23, r1
  e8:	09 f4       	brne	.+2      	; 0xec <writeChar.part.1+0x20>
  ea:	4e c0       	rjmp	.+156    	; 0x188 <writeChar.part.1+0xbc>
  ec:	63 30       	cpi	r22, 0x03	; 3
  ee:	71 05       	cpc	r23, r1
  f0:	0c f4       	brge	.+2      	; 0xf4 <writeChar.part.1+0x28>
  f2:	80 c0       	rjmp	.+256    	; 0x1f4 <writeChar.part.1+0x128>
  f4:	64 30       	cpi	r22, 0x04	; 4
  f6:	71 05       	cpc	r23, r1
  f8:	09 f4       	brne	.+2      	; 0xfc <writeChar.part.1+0x30>
  fa:	be c0       	rjmp	.+380    	; 0x278 <__EEPROM_REGION_LENGTH__+0x78>
  fc:	0c f4       	brge	.+2      	; 0x100 <writeChar.part.1+0x34>
  fe:	f4 c0       	rjmp	.+488    	; 0x2e8 <__EEPROM_REGION_LENGTH__+0xe8>
 100:	65 30       	cpi	r22, 0x05	; 5
 102:	71 05       	cpc	r23, r1
 104:	09 f0       	breq	.+2      	; 0x108 <writeChar.part.1+0x3c>
 106:	ee c0       	rjmp	.+476    	; 0x2e4 <__EEPROM_REGION_LENGTH__+0xe4>
 108:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	fc 01       	movw	r30, r24
 112:	e0 50       	subi	r30, 0x00	; 0
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	80 81       	ld	r24, Z
 118:	91 81       	ldd	r25, Z+1	; 0x01
 11a:	82 95       	swap	r24
 11c:	92 95       	swap	r25
 11e:	90 7f       	andi	r25, 0xF0	; 240
 120:	98 27       	eor	r25, r24
 122:	80 7f       	andi	r24, 0xF0	; 240
 124:	98 27       	eor	r25, r24
 126:	92 2f       	mov	r25, r18
 128:	9f 70       	andi	r25, 0x0F	; 15
 12a:	89 2b       	or	r24, r25
 12c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 130:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 134:	90 81       	ld	r25, Z
 136:	90 7f       	andi	r25, 0xF0	; 240
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	89 2b       	or	r24, r25
 13c:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 140:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 144:	80 81       	ld	r24, Z
 146:	91 81       	ldd	r25, Z+1	; 0x01
 148:	88 27       	eor	r24, r24
 14a:	9f 70       	andi	r25, 0x0F	; 15
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
 150:	95 95       	asr	r25
 152:	87 95       	ror	r24
 154:	95 95       	asr	r25
 156:	87 95       	ror	r24
 158:	95 95       	asr	r25
 15a:	87 95       	ror	r24
 15c:	92 2f       	mov	r25, r18
 15e:	9f 70       	andi	r25, 0x0F	; 15
 160:	89 2b       	or	r24, r25
 162:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 166:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 16a:	20 81       	ld	r18, Z
 16c:	31 81       	ldd	r19, Z+1	; 0x01
 16e:	22 27       	eor	r18, r18
 170:	30 7f       	andi	r19, 0xF0	; 240
 172:	8f 70       	andi	r24, 0x0F	; 15
 174:	83 2b       	or	r24, r19
 176:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 17a:	08 95       	ret
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	62 30       	cpi	r22, 0x02	; 2
 182:	71 05       	cpc	r23, r1
 184:	09 f0       	breq	.+2      	; 0x188 <writeChar.part.1+0xbc>
 186:	b2 cf       	rjmp	.-156    	; 0xec <writeChar.part.1+0x20>
 188:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	fc 01       	movw	r30, r24
 192:	e0 50       	subi	r30, 0x00	; 0
 194:	ff 4f       	sbci	r31, 0xFF	; 255
 196:	80 81       	ld	r24, Z
 198:	98 2f       	mov	r25, r24
 19a:	9f 70       	andi	r25, 0x0F	; 15
 19c:	82 2f       	mov	r24, r18
 19e:	80 7f       	andi	r24, 0xF0	; 240
 1a0:	89 2b       	or	r24, r25
 1a2:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 1a6:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 1aa:	80 81       	ld	r24, Z
 1ac:	91 81       	ldd	r25, Z+1	; 0x01
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	99 27       	eor	r25, r25
 1b2:	95 95       	asr	r25
 1b4:	87 95       	ror	r24
 1b6:	95 95       	asr	r25
 1b8:	87 95       	ror	r24
 1ba:	95 95       	asr	r25
 1bc:	87 95       	ror	r24
 1be:	95 95       	asr	r25
 1c0:	87 95       	ror	r24
 1c2:	92 2f       	mov	r25, r18
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	89 2b       	or	r24, r25
 1c8:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 1cc:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 1d0:	20 81       	ld	r18, Z
 1d2:	31 81       	ldd	r19, Z+1	; 0x01
 1d4:	22 27       	eor	r18, r18
 1d6:	3f 70       	andi	r19, 0x0F	; 15
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	83 2b       	or	r24, r19
 1dc:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 1e0:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 1e4:	91 81       	ldd	r25, Z+1	; 0x01
 1e6:	92 95       	swap	r25
 1e8:	9f 70       	andi	r25, 0x0F	; 15
 1ea:	80 7f       	andi	r24, 0xF0	; 240
 1ec:	89 2b       	or	r24, r25
 1ee:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 1f2:	08 95       	ret
 1f4:	61 15       	cp	r22, r1
 1f6:	71 05       	cpc	r23, r1
 1f8:	09 f4       	brne	.+2      	; 0x1fc <writeChar.part.1+0x130>
 1fa:	b0 c0       	rjmp	.+352    	; 0x35c <__EEPROM_REGION_LENGTH__+0x15c>
 1fc:	61 30       	cpi	r22, 0x01	; 1
 1fe:	71 05       	cpc	r23, r1
 200:	09 f0       	breq	.+2      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 202:	71 c0       	rjmp	.+226    	; 0x2e6 <__EEPROM_REGION_LENGTH__+0xe6>
 204:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	fc 01       	movw	r30, r24
 20e:	e0 50       	subi	r30, 0x00	; 0
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	80 81       	ld	r24, Z
 214:	91 81       	ldd	r25, Z+1	; 0x01
 216:	82 95       	swap	r24
 218:	92 95       	swap	r25
 21a:	90 7f       	andi	r25, 0xF0	; 240
 21c:	98 27       	eor	r25, r24
 21e:	80 7f       	andi	r24, 0xF0	; 240
 220:	98 27       	eor	r25, r24
 222:	92 2f       	mov	r25, r18
 224:	9f 70       	andi	r25, 0x0F	; 15
 226:	89 2b       	or	r24, r25
 228:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 22c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 230:	90 81       	ld	r25, Z
 232:	90 7f       	andi	r25, 0xF0	; 240
 234:	8f 70       	andi	r24, 0x0F	; 15
 236:	89 2b       	or	r24, r25
 238:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 23c:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 240:	80 81       	ld	r24, Z
 242:	91 81       	ldd	r25, Z+1	; 0x01
 244:	88 27       	eor	r24, r24
 246:	9f 70       	andi	r25, 0x0F	; 15
 248:	95 95       	asr	r25
 24a:	87 95       	ror	r24
 24c:	95 95       	asr	r25
 24e:	87 95       	ror	r24
 250:	95 95       	asr	r25
 252:	87 95       	ror	r24
 254:	95 95       	asr	r25
 256:	87 95       	ror	r24
 258:	92 2f       	mov	r25, r18
 25a:	9f 70       	andi	r25, 0x0F	; 15
 25c:	89 2b       	or	r24, r25
 25e:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 262:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 266:	20 81       	ld	r18, Z
 268:	31 81       	ldd	r19, Z+1	; 0x01
 26a:	22 27       	eor	r18, r18
 26c:	30 7f       	andi	r19, 0xF0	; 240
 26e:	8f 70       	andi	r24, 0x0F	; 15
 270:	83 2b       	or	r24, r19
 272:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 276:	08 95       	ret
 278:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	fc 01       	movw	r30, r24
 282:	e0 50       	subi	r30, 0x00	; 0
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	80 81       	ld	r24, Z
 288:	98 2f       	mov	r25, r24
 28a:	9f 70       	andi	r25, 0x0F	; 15
 28c:	82 2f       	mov	r24, r18
 28e:	80 7f       	andi	r24, 0xF0	; 240
 290:	89 2b       	or	r24, r25
 292:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
 296:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 29a:	80 81       	ld	r24, Z
 29c:	91 81       	ldd	r25, Z+1	; 0x01
 29e:	80 7f       	andi	r24, 0xF0	; 240
 2a0:	99 27       	eor	r25, r25
 2a2:	95 95       	asr	r25
 2a4:	87 95       	ror	r24
 2a6:	95 95       	asr	r25
 2a8:	87 95       	ror	r24
 2aa:	95 95       	asr	r25
 2ac:	87 95       	ror	r24
 2ae:	95 95       	asr	r25
 2b0:	87 95       	ror	r24
 2b2:	92 2f       	mov	r25, r18
 2b4:	90 7f       	andi	r25, 0xF0	; 240
 2b6:	89 2b       	or	r24, r25
 2b8:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7fc0f3>
 2bc:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 2c0:	20 81       	ld	r18, Z
 2c2:	31 81       	ldd	r19, Z+1	; 0x01
 2c4:	22 27       	eor	r18, r18
 2c6:	3f 70       	andi	r19, 0x0F	; 15
 2c8:	80 7f       	andi	r24, 0xF0	; 240
 2ca:	83 2b       	or	r24, r19
 2cc:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7fc0f8>
 2d0:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 2d4:	91 81       	ldd	r25, Z+1	; 0x01
 2d6:	92 95       	swap	r25
 2d8:	9f 70       	andi	r25, 0x0F	; 15
 2da:	80 7f       	andi	r24, 0xF0	; 240
 2dc:	89 2b       	or	r24, r25
 2de:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7fc0fd>
 2e2:	08 95       	ret
 2e4:	08 95       	ret
 2e6:	08 95       	ret
 2e8:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	fc 01       	movw	r30, r24
 2f2:	e0 50       	subi	r30, 0x00	; 0
 2f4:	ff 4f       	sbci	r31, 0xFF	; 255
 2f6:	80 81       	ld	r24, Z
 2f8:	91 81       	ldd	r25, Z+1	; 0x01
 2fa:	82 95       	swap	r24
 2fc:	92 95       	swap	r25
 2fe:	90 7f       	andi	r25, 0xF0	; 240
 300:	98 27       	eor	r25, r24
 302:	80 7f       	andi	r24, 0xF0	; 240
 304:	98 27       	eor	r25, r24
 306:	92 2f       	mov	r25, r18
 308:	9f 70       	andi	r25, 0x0F	; 15
 30a:	89 2b       	or	r24, r25
 30c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
 310:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 314:	90 81       	ld	r25, Z
 316:	90 7f       	andi	r25, 0xF0	; 240
 318:	8f 70       	andi	r24, 0x0F	; 15
 31a:	89 2b       	or	r24, r25
 31c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7fc0f2>
 320:	20 91 f7 00 	lds	r18, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 324:	80 81       	ld	r24, Z
 326:	91 81       	ldd	r25, Z+1	; 0x01
 328:	88 27       	eor	r24, r24
 32a:	9f 70       	andi	r25, 0x0F	; 15
 32c:	95 95       	asr	r25
 32e:	87 95       	ror	r24
 330:	95 95       	asr	r25
 332:	87 95       	ror	r24
 334:	95 95       	asr	r25
 336:	87 95       	ror	r24
 338:	95 95       	asr	r25
 33a:	87 95       	ror	r24
 33c:	92 2f       	mov	r25, r18
 33e:	9f 70       	andi	r25, 0x0F	; 15
 340:	89 2b       	or	r24, r25
 342:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7fc0f7>
 346:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 34a:	20 81       	ld	r18, Z
 34c:	31 81       	ldd	r19, Z+1	; 0x01
 34e:	22 27       	eor	r18, r18
 350:	30 7f       	andi	r19, 0xF0	; 240
 352:	8f 70       	andi	r24, 0x0F	; 15
 354:	83 2b       	or	r24, r19
 356:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7fc0fc>
 35a:	08 95       	ret
 35c:	20 91 ec 00 	lds	r18, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	fc 01       	movw	r30, r24
 366:	e0 50       	subi	r30, 0x00	; 0
 368:	ff 4f       	sbci	r31, 0xFF	; 255
 36a:	80 81       	ld	r24, Z
 36c:	98 2f       	mov	r25, r24
 36e:	9f 70       	andi	r25, 0x0F	; 15
 370:	82 2f       	mov	r24, r18
 372:	80 7f       	andi	r24, 0xF0	; 240
 374:	89 2b       	or	r24, r25
 376:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
 37a:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 37e:	80 81       	ld	r24, Z
 380:	91 81       	ldd	r25, Z+1	; 0x01
 382:	80 7f       	andi	r24, 0xF0	; 240
 384:	99 27       	eor	r25, r25
 386:	95 95       	asr	r25
 388:	87 95       	ror	r24
 38a:	95 95       	asr	r25
 38c:	87 95       	ror	r24
 38e:	95 95       	asr	r25
 390:	87 95       	ror	r24
 392:	95 95       	asr	r25
 394:	87 95       	ror	r24
 396:	92 2f       	mov	r25, r18
 398:	90 7f       	andi	r25, 0xF0	; 240
 39a:	89 2b       	or	r24, r25
 39c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7fc0f1>
 3a0:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 3a4:	20 81       	ld	r18, Z
 3a6:	31 81       	ldd	r19, Z+1	; 0x01
 3a8:	22 27       	eor	r18, r18
 3aa:	3f 70       	andi	r19, 0x0F	; 15
 3ac:	80 7f       	andi	r24, 0xF0	; 240
 3ae:	83 2b       	or	r24, r19
 3b0:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7fc0f6>
 3b4:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 3b8:	91 81       	ldd	r25, Z+1	; 0x01
 3ba:	92 95       	swap	r25
 3bc:	9f 70       	andi	r25, 0x0F	; 15
 3be:	80 7f       	andi	r24, 0xF0	; 240
 3c0:	89 2b       	or	r24, r25
 3c2:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7fc0fb>
 3c6:	08 95       	ret

000003c8 <printAt>:
    }
    /* is prime */
    return true;
}

void printAt(long num, int pos) {
 3c8:	cf 92       	push	r12
 3ca:	df 92       	push	r13
 3cc:	ef 92       	push	r14
 3ce:	ff 92       	push	r15
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	6b 01       	movw	r12, r22
 3d6:	7c 01       	movw	r14, r24
 3d8:	ea 01       	movw	r28, r20
	lock(&m_primes);
 3da:	8a e2       	ldi	r24, 0x2A	; 42
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 9d 03 	call	0x73a	; 0x73a <lock>
     */

    int i = 0;

    /* checks if pos is within fixed range */
    if(pos < 0 || pos > 5) {
 3e2:	c6 30       	cpi	r28, 0x06	; 6
 3e4:	d1 05       	cpc	r29, r1
 3e6:	d8 f0       	brcs	.+54     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
     * returns: none
     */

    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
    pp++;
 3e8:	21 96       	adiw	r28, 0x01	; 1
     */

    int i = 0;

    /* checks if pos is within fixed range */
    if(pos < 0 || pos > 5) {
 3ea:	c6 30       	cpi	r28, 0x06	; 6
 3ec:	d1 05       	cpc	r29, r1
 3ee:	68 f4       	brcc	.+26     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 3f0:	c7 01       	movw	r24, r14
 3f2:	b6 01       	movw	r22, r12
 3f4:	2a e0       	ldi	r18, 0x0A	; 10
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	0e 94 4a 04 	call	0x894	; 0x894 <__divmodsi4>
 400:	86 2f       	mov	r24, r22
 402:	be 01       	movw	r22, r28
 404:	80 5d       	subi	r24, 0xD0	; 208
 406:	0e 94 66 00 	call	0xcc	; 0xcc <writeChar.part.1>

    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m_primes);
 40a:	8a e2       	ldi	r24, 0x2A	; 42
 40c:	91 e0       	ldi	r25, 0x01	; 1
}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	ff 90       	pop	r15
 414:	ef 90       	pop	r14
 416:	df 90       	pop	r13
 418:	cf 90       	pop	r12

    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m_primes);
 41a:	0c 94 c9 03 	jmp	0x792	; 0x792 <unlock>
 41e:	c7 01       	movw	r24, r14
 420:	b6 01       	movw	r22, r12
 422:	24 e6       	ldi	r18, 0x64	; 100
 424:	30 e0       	ldi	r19, 0x00	; 0
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	0e 94 4a 04 	call	0x894	; 0x894 <__divmodsi4>
 42e:	2a e0       	ldi	r18, 0x0A	; 10
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	0e 94 4a 04 	call	0x894	; 0x894 <__divmodsi4>
 43a:	be 01       	movw	r22, r28
 43c:	80 e3       	ldi	r24, 0x30	; 48
 43e:	82 0f       	add	r24, r18
 440:	0e 94 66 00 	call	0xcc	; 0xcc <writeChar.part.1>
 444:	d1 cf       	rjmp	.-94     	; 0x3e8 <printAt+0x20>

00000446 <button>:
     * code that counts button activations
     * and writes them onto LCD.
     *
     * returns: none
     */
	lock(&m_button);
 446:	8e e2       	ldi	r24, 0x2E	; 46
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 9d 03 	call	0x73a	; 0x73a <lock>
	bool pressP4 = true;
    PORTB = 0x0080;
 44e:	80 e8       	ldi	r24, 0x80	; 128
 450:	85 b9       	out	0x05, r24	; 5
        if(!(PINB & (0X0080))) {
 452:	1f 99       	sbic	0x03, 7	; 3
 454:	13 c0       	rjmp	.+38     	; 0x47c <button+0x36>

            if(pressP4){
                count ++;
 456:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <count>
 45a:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <count+0x1>
 45e:	6f 5f       	subi	r22, 0xFF	; 255
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <count+0x1>
 466:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <count>
                pressP4 = false;
            }
        }
        if(PINB & (0X0080)) {
 46a:	83 b1       	in	r24, 0x03	; 3
            pressP4 = true;
        }
        printAt(count, 4);
 46c:	07 2e       	mov	r0, r23
 46e:	00 0c       	add	r0, r0
 470:	88 0b       	sbc	r24, r24
 472:	99 0b       	sbc	r25, r25
 474:	44 e0       	ldi	r20, 0x04	; 4
 476:	50 e0       	ldi	r21, 0x00	; 0
 478:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <printAt>
 47c:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <count>
 480:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <count+0x1>
 484:	f2 cf       	rjmp	.-28     	; 0x46a <button+0x24>

00000486 <computePrimes>:
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m_primes);
}

void computePrimes(int pos) {
 486:	ec 01       	movw	r28, r24
     * writes prime values to LCD
     * at positions 0 and 1.
     * returns: none
     */
    long n;
    for(n = 1; ; n++) {
 488:	81 2c       	mov	r8, r1
 48a:	91 2c       	mov	r9, r1
 48c:	54 01       	movw	r10, r8
 48e:	83 94       	inc	r8
     * a prime value or not.
     *
     * returns: bool
     */

    for (int j = 2; j < i; j++) {
 490:	83 e0       	ldi	r24, 0x03	; 3
 492:	88 16       	cp	r8, r24
 494:	91 04       	cpc	r9, r1
 496:	a1 04       	cpc	r10, r1
 498:	b1 04       	cpc	r11, r1
 49a:	e4 f0       	brlt	.+56     	; 0x4d4 <computePrimes+0x4e>
        if(i % j == 0) {
 49c:	80 fe       	sbrs	r8, 0
 49e:	1f c0       	rjmp	.+62     	; 0x4de <computePrimes+0x58>
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	c8 2e       	mov	r12, r24
 4a4:	d1 2c       	mov	r13, r1
 4a6:	e1 2c       	mov	r14, r1
 4a8:	f1 2c       	mov	r15, r1
 4aa:	0d c0       	rjmp	.+26     	; 0x4c6 <computePrimes+0x40>
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	c8 1a       	sub	r12, r24
 4b0:	d8 0a       	sbc	r13, r24
 4b2:	e8 0a       	sbc	r14, r24
 4b4:	f8 0a       	sbc	r15, r24
 4b6:	c5 01       	movw	r24, r10
 4b8:	b4 01       	movw	r22, r8
 4ba:	0e 94 4a 04 	call	0x894	; 0x894 <__divmodsi4>
 4be:	67 2b       	or	r22, r23
 4c0:	68 2b       	or	r22, r24
 4c2:	69 2b       	or	r22, r25
 4c4:	61 f0       	breq	.+24     	; 0x4de <computePrimes+0x58>
     * a prime value or not.
     *
     * returns: bool
     */

    for (int j = 2; j < i; j++) {
 4c6:	96 01       	movw	r18, r12
 4c8:	a7 01       	movw	r20, r14
 4ca:	c8 14       	cp	r12, r8
 4cc:	d9 04       	cpc	r13, r9
 4ce:	ea 04       	cpc	r14, r10
 4d0:	fb 04       	cpc	r15, r11
 4d2:	61 f7       	brne	.-40     	; 0x4ac <computePrimes+0x26>
     * returns: none
     */
    long n;
    for(n = 1; ; n++) {
        if (is_prime(n)) {
            printAt(n, pos);
 4d4:	ae 01       	movw	r20, r28
 4d6:	c5 01       	movw	r24, r10
 4d8:	b4 01       	movw	r22, r8
 4da:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <printAt>
     * writes prime values to LCD
     * at positions 0 and 1.
     * returns: none
     */
    long n;
    for(n = 1; ; n++) {
 4de:	8f ef       	ldi	r24, 0xFF	; 255
 4e0:	88 1a       	sub	r8, r24
 4e2:	98 0a       	sbc	r9, r24
 4e4:	a8 0a       	sbc	r10, r24
 4e6:	b8 0a       	sbc	r11, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 4e8:	d3 cf       	rjmp	.-90     	; 0x490 <computePrimes+0xa>

000004ea <main>:

}

int main() {
	//Initialize button
	PORTB |= (1<<7);
 4ea:	2f 9a       	sbi	0x05, 7	; 5
	
	//Initialize clock 
	CLKPR = (0x80);
 4ec:	e1 e6       	ldi	r30, 0x61	; 97
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 e8       	ldi	r24, 0x80	; 128
 4f2:	80 83       	st	Z, r24
	CLKPR = (0x00);
 4f4:	10 82       	st	Z, r1
     *
     * returns: none
     */

    /* Asynchronous clock, 1/3 bias, 1/4 duty cycle,   25 segments */
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
 4f6:	87 eb       	ldi	r24, 0xB7	; 183
 4f8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
    /* Set volt to 3.35V */
    LCDCCR = (1<<LCDCC3) |(1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
 4fc:	8f e0       	ldi	r24, 0x0F	; 15
 4fe:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    /* Clock division factor to 8, and prescaler to 16 */
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 502:	87 e0       	ldi	r24, 0x07	; 7
 504:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    /* low power waveform, no frame interrupt, no blanking */
    LCDCRA = (1<<LCDAB) | (1<<LCDEN);
 508:	80 ec       	ldi	r24, 0xC0	; 192
 50a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	//Initialize clock 
	CLKPR = (0x80);
	CLKPR = (0x00);
	
	LCD_init();
	lock(&m_blink);
 50e:	82 e3       	ldi	r24, 0x32	; 50
 510:	91 e0       	ldi	r25, 0x01	; 1
 512:	0e 94 9d 03 	call	0x73a	; 0x73a <lock>
	lock(&m_button);
 516:	8e e2       	ldi	r24, 0x2E	; 46
 518:	91 e0       	ldi	r25, 0x01	; 1
 51a:	0e 94 9d 03 	call	0x73a	; 0x73a <lock>
	
	
	spawn(button, 0);
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	70 e0       	ldi	r23, 0x00	; 0
 522:	83 e2       	ldi	r24, 0x23	; 35
 524:	92 e0       	ldi	r25, 0x02	; 2
 526:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <spawn>
	//yield();
	spawn(blink, 0);
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	8d e4       	ldi	r24, 0x4D	; 77
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <spawn>
	//yield();
	computePrimes(0);
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 43 02 	call	0x486	; 0x486 <computePrimes>

0000053e <dispatch>:
	
	DISABLE();
	enqueue(current,(&readyQ));
	dispatch(dequeue(&readyQ));
	ENABLE();
}
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	00 d0       	rcall	.+0      	; 0x544 <dispatch+0x6>
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
 548:	9a 83       	std	Y+2, r25	; 0x02
 54a:	89 83       	std	Y+1, r24	; 0x01
 54c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <current>
 550:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <current+0x1>
 554:	06 96       	adiw	r24, 0x06	; 6
 556:	0e 94 8b 04 	call	0x916	; 0x916 <setjmp>
 55a:	89 2b       	or	r24, r25
 55c:	29 f0       	breq	.+10     	; 0x568 <dispatch+0x2a>
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	9a 81       	ldd	r25, Y+2	; 0x02
 56c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <current+0x1>
 570:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <current>
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	06 96       	adiw	r24, 0x06	; 6
 57a:	0e 94 ab 04 	call	0x956	; 0x956 <longjmp>

0000057e <addBlinkCounter>:
 57e:	f8 94       	cli
 580:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <blinkCounter>
 584:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <blinkCounter+0x1>
 588:	01 96       	adiw	r24, 0x01	; 1
 58a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <blinkCounter+0x1>
 58e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <blinkCounter>
 592:	78 94       	sei
 594:	08 95       	ret

00000596 <getBlinkCounter>:
 596:	f8 94       	cli
 598:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <blinkCounter>
 59c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <blinkCounter+0x1>
 5a0:	78 94       	sei
 5a2:	08 95       	ret

000005a4 <resetBlinkCounter>:
 5a4:	f8 94       	cli
 5a6:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <blinkCounter+0x1>
 5aa:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <blinkCounter>
 5ae:	78 94       	sei
 5b0:	08 95       	ret

000005b2 <spawn>:
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <spawn+0x6>
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
 5bc:	f8 94       	cli
 5be:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <initialized>
 5c2:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <initialized+0x1>
 5c6:	23 2b       	or	r18, r19
 5c8:	09 f4       	brne	.+2      	; 0x5cc <spawn+0x1a>
 5ca:	43 c0       	rjmp	.+134    	; 0x652 <spawn+0xa0>
 5cc:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <freeQ>
 5d0:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <freeQ+0x1>
 5d4:	3a 83       	std	Y+2, r19	; 0x02
 5d6:	29 83       	std	Y+1, r18	; 0x01
 5d8:	23 2b       	or	r18, r19
 5da:	09 f4       	brne	.+2      	; 0x5de <spawn+0x2c>
 5dc:	7e c0       	rjmp	.+252    	; 0x6da <spawn+0x128>
 5de:	e9 81       	ldd	r30, Y+1	; 0x01
 5e0:	fa 81       	ldd	r31, Y+2	; 0x02
 5e2:	44 81       	ldd	r20, Z+4	; 0x04
 5e4:	55 81       	ldd	r21, Z+5	; 0x05
 5e6:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <freeQ+0x1>
 5ea:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <freeQ>
 5ee:	91 83       	std	Z+1, r25	; 0x01
 5f0:	80 83       	st	Z, r24
 5f2:	73 83       	std	Z+3, r23	; 0x03
 5f4:	62 83       	std	Z+2, r22	; 0x02
 5f6:	15 82       	std	Z+5, r1	; 0x05
 5f8:	14 82       	std	Z+4, r1	; 0x04
 5fa:	cf 01       	movw	r24, r30
 5fc:	06 96       	adiw	r24, 0x06	; 6
 5fe:	0e 94 8b 04 	call	0x916	; 0x916 <setjmp>
 602:	01 97       	sbiw	r24, 0x01	; 1
 604:	09 f4       	brne	.+2      	; 0x608 <spawn+0x56>
 606:	6a c0       	rjmp	.+212    	; 0x6dc <spawn+0x12a>
 608:	e9 81       	ldd	r30, Y+1	; 0x01
 60a:	fa 81       	ldd	r31, Y+2	; 0x02
 60c:	36 96       	adiw	r30, 0x06	; 6
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	9a 81       	ldd	r25, Y+2	; 0x02
 612:	87 59       	subi	r24, 0x97	; 151
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	91 8b       	std	Z+17, r25	; 0x11
 618:	80 8b       	std	Z+16, r24	; 0x10
 61a:	93 8b       	std	Z+19, r25	; 0x13
 61c:	82 8b       	std	Z+18, r24	; 0x12
 61e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <current>
 622:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <current+0x1>
 626:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <readyQ>
 62a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <readyQ+0x1>
 62e:	00 97       	sbiw	r24, 0x00	; 0
 630:	11 f0       	breq	.+4      	; 0x636 <spawn+0x84>
 632:	95 83       	std	Z+5, r25	; 0x05
 634:	84 83       	std	Z+4, r24	; 0x04
 636:	f0 93 3b 01 	sts	0x013B, r31	; 0x80013b <readyQ+0x1>
 63a:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <readyQ>
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	9a 81       	ldd	r25, Y+2	; 0x02
 642:	0e 94 9f 02 	call	0x53e	; 0x53e <dispatch>
 646:	78 94       	sei
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	08 95       	ret
 652:	28 e1       	ldi	r18, 0x18	; 24
 654:	32 e0       	ldi	r19, 0x02	; 2
 656:	30 93 b0 01 	sts	0x01B0, r19	; 0x8001b0 <threads+0x5>
 65a:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <threads+0x4>
 65e:	25 e8       	ldi	r18, 0x85	; 133
 660:	32 e0       	ldi	r19, 0x02	; 2
 662:	30 93 1d 02 	sts	0x021D, r19	; 0x80021d <threads+0x72>
 666:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <threads+0x71>
 66a:	22 ef       	ldi	r18, 0xF2	; 242
 66c:	32 e0       	ldi	r19, 0x02	; 2
 66e:	30 93 8a 02 	sts	0x028A, r19	; 0x80028a <threads+0xdf>
 672:	20 93 89 02 	sts	0x0289, r18	; 0x800289 <threads+0xde>
 676:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <threads+0x14c>
 67a:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <threads+0x14b>
 67e:	ef 9a       	sbi	0x1d, 7	; 29
 680:	ec e6       	ldi	r30, 0x6C	; 108
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	20 81       	ld	r18, Z
 686:	20 68       	ori	r18, 0x80	; 128
 688:	20 83       	st	Z, r18
 68a:	e0 e8       	ldi	r30, 0x80	; 128
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	20 81       	ld	r18, Z
 690:	20 6c       	ori	r18, 0xC0	; 192
 692:	20 83       	st	Z, r18
 694:	e1 e8       	ldi	r30, 0x81	; 129
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	20 81       	ld	r18, Z
 69a:	2d 60       	ori	r18, 0x0D	; 13
 69c:	20 83       	st	Z, r18
 69e:	ef e6       	ldi	r30, 0x6F	; 111
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	20 81       	ld	r18, Z
 6a4:	22 60       	ori	r18, 0x02	; 2
 6a6:	20 83       	st	Z, r18
 6a8:	27 e8       	ldi	r18, 0x87	; 135
 6aa:	31 e0       	ldi	r19, 0x01	; 1
 6ac:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 6b0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
 6b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 6b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 6bc:	21 e0       	ldi	r18, 0x01	; 1
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <initialized+0x1>
 6c4:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <initialized>
 6c8:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <freeQ>
 6cc:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <freeQ+0x1>
 6d0:	3a 83       	std	Y+2, r19	; 0x02
 6d2:	29 83       	std	Y+1, r18	; 0x01
 6d4:	23 2b       	or	r18, r19
 6d6:	09 f0       	breq	.+2      	; 0x6da <spawn+0x128>
 6d8:	82 cf       	rjmp	.-252    	; 0x5de <spawn+0x2c>
 6da:	ff cf       	rjmp	.-2      	; 0x6da <spawn+0x128>
 6dc:	78 94       	sei
 6de:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 6e2:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
 6e6:	ed 91       	ld	r30, X+
 6e8:	fc 91       	ld	r31, X
 6ea:	11 97       	sbiw	r26, 0x01	; 1
 6ec:	12 96       	adiw	r26, 0x02	; 2
 6ee:	8d 91       	ld	r24, X+
 6f0:	9c 91       	ld	r25, X
 6f2:	13 97       	sbiw	r26, 0x03	; 3
 6f4:	09 95       	icall
 6f6:	f8 94       	cli
 6f8:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <current>
 6fc:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <current+0x1>
 700:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <freeQ>
 704:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <freeQ+0x1>
 708:	00 97       	sbiw	r24, 0x00	; 0
 70a:	11 f0       	breq	.+4      	; 0x710 <spawn+0x15e>
 70c:	95 83       	std	Z+5, r25	; 0x05
 70e:	84 83       	std	Z+4, r24	; 0x04
 710:	f0 93 17 01 	sts	0x0117, r31	; 0x800117 <freeQ+0x1>
 714:	e0 93 16 01 	sts	0x0116, r30	; 0x800116 <freeQ>
 718:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <readyQ>
 71c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <readyQ+0x1>
 720:	00 97       	sbiw	r24, 0x00	; 0
 722:	51 f0       	breq	.+20     	; 0x738 <spawn+0x186>
 724:	fc 01       	movw	r30, r24
 726:	24 81       	ldd	r18, Z+4	; 0x04
 728:	35 81       	ldd	r19, Z+5	; 0x05
 72a:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <readyQ+0x1>
 72e:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <readyQ>
 732:	0e 94 9f 02 	call	0x53e	; 0x53e <dispatch>
 736:	68 cf       	rjmp	.-304    	; 0x608 <spawn+0x56>
 738:	ff cf       	rjmp	.-2      	; 0x738 <spawn+0x186>

0000073a <lock>:

void lock(mutex *m) {
 73a:	fc 01       	movw	r30, r24
	DISABLE();
 73c:	f8 94       	cli
	if(m ->locked  == 0) {
 73e:	80 81       	ld	r24, Z
 740:	91 81       	ldd	r25, Z+1	; 0x01
 742:	89 2b       	or	r24, r25
 744:	01 f1       	breq	.+64     	; 0x786 <lock+0x4c>
		m ->locked  = 1;
	}
	else {
		enqueue(current,&(m ->waitQ));
 746:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 74a:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
	blinkCounter = 0;
	ENABLE();
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
 74e:	82 81       	ldd	r24, Z+2	; 0x02
 750:	93 81       	ldd	r25, Z+3	; 0x03
 752:	00 97       	sbiw	r24, 0x00	; 0
 754:	21 f0       	breq	.+8      	; 0x75e <lock+0x24>
        *queue = p;
    } else {
        p->next = *queue;
 756:	15 96       	adiw	r26, 0x05	; 5
 758:	9c 93       	st	X, r25
 75a:	8e 93       	st	-X, r24
 75c:	14 97       	sbiw	r26, 0x04	; 4
		*queue = p;
 75e:	b3 83       	std	Z+3, r27	; 0x03
 760:	a2 83       	std	Z+2, r26	; 0x02

    }
}

static thread dequeue(thread *queue) {
	thread p = *queue;
 762:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <readyQ>
 766:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <readyQ+0x1>
	if (*queue) {
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	59 f0       	breq	.+22     	; 0x784 <lock+0x4a>
		*queue = (*queue)->next;
 76e:	fc 01       	movw	r30, r24
 770:	24 81       	ldd	r18, Z+4	; 0x04
 772:	35 81       	ldd	r19, Z+5	; 0x05
 774:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <readyQ+0x1>
 778:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <readyQ>
	if(m ->locked  == 0) {
		m ->locked  = 1;
	}
	else {
		enqueue(current,&(m ->waitQ));
		dispatch(dequeue(&readyQ));
 77c:	0e 94 9f 02 	call	0x53e	; 0x53e <dispatch>
	}
	ENABLE();
 780:	78 94       	sei
 782:	08 95       	ret
 784:	ff cf       	rjmp	.-2      	; 0x784 <lock+0x4a>
}

void lock(mutex *m) {
	DISABLE();
	if(m ->locked  == 0) {
		m ->locked  = 1;
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	91 83       	std	Z+1, r25	; 0x01
 78c:	80 83       	st	Z, r24
	}
	else {
		enqueue(current,&(m ->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 78e:	78 94       	sei
 790:	08 95       	ret

00000792 <unlock>:
}

void unlock(mutex *m) {
 792:	fc 01       	movw	r30, r24
	DISABLE();
 794:	f8 94       	cli
	if(m -> waitQ == NULL) {
 796:	82 81       	ldd	r24, Z+2	; 0x02
 798:	93 81       	ldd	r25, Z+3	; 0x03
 79a:	00 97       	sbiw	r24, 0x00	; 0
 79c:	19 f1       	breq	.+70     	; 0x7e4 <unlock+0x52>
		m ->locked  = 0;
	}
	else {
		enqueue(current, (&readyQ));
 79e:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <current>
 7a2:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <current+0x1>
	blinkCounter = 0;
	ENABLE();
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
 7a6:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <readyQ>
 7aa:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <readyQ+0x1>
 7ae:	21 15       	cp	r18, r1
 7b0:	31 05       	cpc	r19, r1
 7b2:	e1 f0       	breq	.+56     	; 0x7ec <unlock+0x5a>
        *queue = p;
    } else {
        p->next = *queue;
 7b4:	15 96       	adiw	r26, 0x05	; 5
 7b6:	3c 93       	st	X, r19
 7b8:	2e 93       	st	-X, r18
 7ba:	14 97       	sbiw	r26, 0x04	; 4
		*queue = p;
 7bc:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <readyQ+0x1>
 7c0:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <readyQ>
 7c4:	82 81       	ldd	r24, Z+2	; 0x02
 7c6:	93 81       	ldd	r25, Z+3	; 0x03
    }
}

static thread dequeue(thread *queue) {
	thread p = *queue;
	if (*queue) {
 7c8:	00 97       	sbiw	r24, 0x00	; 0
 7ca:	59 f0       	breq	.+22     	; 0x7e2 <unlock+0x50>
		*queue = (*queue)->next;
 7cc:	dc 01       	movw	r26, r24
 7ce:	14 96       	adiw	r26, 0x04	; 4
 7d0:	2d 91       	ld	r18, X+
 7d2:	3c 91       	ld	r19, X
 7d4:	15 97       	sbiw	r26, 0x05	; 5
 7d6:	33 83       	std	Z+3, r19	; 0x03
 7d8:	22 83       	std	Z+2, r18	; 0x02
	if(m -> waitQ == NULL) {
		m ->locked  = 0;
	}
	else {
		enqueue(current, (&readyQ));
		dispatch(dequeue(&(m -> waitQ)));
 7da:	0e 94 9f 02 	call	0x53e	; 0x53e <dispatch>
	}
	
	ENABLE();
 7de:	78 94       	sei
 7e0:	08 95       	ret
 7e2:	ff cf       	rjmp	.-2      	; 0x7e2 <unlock+0x50>
}

void unlock(mutex *m) {
	DISABLE();
	if(m -> waitQ == NULL) {
		m ->locked  = 0;
 7e4:	11 82       	std	Z+1, r1	; 0x01
 7e6:	10 82       	st	Z, r1
	else {
		enqueue(current, (&readyQ));
		dispatch(dequeue(&(m -> waitQ)));
	}
	
	ENABLE();
 7e8:	78 94       	sei
 7ea:	08 95       	ret
	ENABLE();
}

static void enqueue(thread p, thread *queue) {
    if (*queue == NULL) {
        *queue = p;
 7ec:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <readyQ+0x1>
 7f0:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <readyQ>
 7f4:	eb cf       	rjmp	.-42     	; 0x7cc <unlock+0x3a>

000007f6 <__vector_7>:
	blinkCounter++;
	ENABLE();
}


ISR(TIMER1_COMPA_vect) {
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	2f 93       	push	r18
 802:	3f 93       	push	r19
 804:	4f 93       	push	r20
 806:	5f 93       	push	r21
 808:	6f 93       	push	r22
 80a:	7f 93       	push	r23
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	af 93       	push	r26
 812:	bf 93       	push	r27
 814:	ef 93       	push	r30
 816:	ff 93       	push	r31
	/*addBlinkCounter();*/
	unlock(&m_blink);
 818:	82 e3       	ldi	r24, 0x32	; 50
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	0e 94 c9 03 	call	0x792	; 0x792 <unlock>
}
 820:	ff 91       	pop	r31
 822:	ef 91       	pop	r30
 824:	bf 91       	pop	r27
 826:	af 91       	pop	r26
 828:	9f 91       	pop	r25
 82a:	8f 91       	pop	r24
 82c:	7f 91       	pop	r23
 82e:	6f 91       	pop	r22
 830:	5f 91       	pop	r21
 832:	4f 91       	pop	r20
 834:	3f 91       	pop	r19
 836:	2f 91       	pop	r18
 838:	0f 90       	pop	r0
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	0f 90       	pop	r0
 83e:	1f 90       	pop	r1
 840:	18 95       	reti

00000842 <__vector_3>:

ISR(PCINT1_vect) {
 842:	1f 92       	push	r1
 844:	0f 92       	push	r0
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	0f 92       	push	r0
 84a:	11 24       	eor	r1, r1
 84c:	2f 93       	push	r18
 84e:	3f 93       	push	r19
 850:	4f 93       	push	r20
 852:	5f 93       	push	r21
 854:	6f 93       	push	r22
 856:	7f 93       	push	r23
 858:	8f 93       	push	r24
 85a:	9f 93       	push	r25
 85c:	af 93       	push	r26
 85e:	bf 93       	push	r27
 860:	ef 93       	push	r30
 862:	ff 93       	push	r31
	// Check the status of PORTB bit 7 before calling yield()
	if (PORTB & (1<<7)) {
 864:	2f 99       	sbic	0x05, 7	; 5
 866:	11 c0       	rjmp	.+34     	; 0x88a <__vector_3+0x48>
		
		unlock(&m_button);
	}
}
 868:	ff 91       	pop	r31
 86a:	ef 91       	pop	r30
 86c:	bf 91       	pop	r27
 86e:	af 91       	pop	r26
 870:	9f 91       	pop	r25
 872:	8f 91       	pop	r24
 874:	7f 91       	pop	r23
 876:	6f 91       	pop	r22
 878:	5f 91       	pop	r21
 87a:	4f 91       	pop	r20
 87c:	3f 91       	pop	r19
 87e:	2f 91       	pop	r18
 880:	0f 90       	pop	r0
 882:	0f be       	out	0x3f, r0	; 63
 884:	0f 90       	pop	r0
 886:	1f 90       	pop	r1
 888:	18 95       	reti

ISR(PCINT1_vect) {
	// Check the status of PORTB bit 7 before calling yield()
	if (PORTB & (1<<7)) {
		
		unlock(&m_button);
 88a:	8e e2       	ldi	r24, 0x2E	; 46
 88c:	91 e0       	ldi	r25, 0x01	; 1
 88e:	0e 94 c9 03 	call	0x792	; 0x792 <unlock>
	}
}
 892:	ea cf       	rjmp	.-44     	; 0x868 <__vector_3+0x26>

00000894 <__divmodsi4>:
 894:	05 2e       	mov	r0, r21
 896:	97 fb       	bst	r25, 7
 898:	1e f4       	brtc	.+6      	; 0x8a0 <__divmodsi4+0xc>
 89a:	00 94       	com	r0
 89c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__negsi2>
 8a0:	57 fd       	sbrc	r21, 7
 8a2:	07 d0       	rcall	.+14     	; 0x8b2 <__divmodsi4_neg2>
 8a4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__udivmodsi4>
 8a8:	07 fc       	sbrc	r0, 7
 8aa:	03 d0       	rcall	.+6      	; 0x8b2 <__divmodsi4_neg2>
 8ac:	4e f4       	brtc	.+18     	; 0x8c0 <__divmodsi4_exit>
 8ae:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__negsi2>

000008b2 <__divmodsi4_neg2>:
 8b2:	50 95       	com	r21
 8b4:	40 95       	com	r20
 8b6:	30 95       	com	r19
 8b8:	21 95       	neg	r18
 8ba:	3f 4f       	sbci	r19, 0xFF	; 255
 8bc:	4f 4f       	sbci	r20, 0xFF	; 255
 8be:	5f 4f       	sbci	r21, 0xFF	; 255

000008c0 <__divmodsi4_exit>:
 8c0:	08 95       	ret

000008c2 <__negsi2>:
 8c2:	90 95       	com	r25
 8c4:	80 95       	com	r24
 8c6:	70 95       	com	r23
 8c8:	61 95       	neg	r22
 8ca:	7f 4f       	sbci	r23, 0xFF	; 255
 8cc:	8f 4f       	sbci	r24, 0xFF	; 255
 8ce:	9f 4f       	sbci	r25, 0xFF	; 255
 8d0:	08 95       	ret

000008d2 <__udivmodsi4>:
 8d2:	a1 e2       	ldi	r26, 0x21	; 33
 8d4:	1a 2e       	mov	r1, r26
 8d6:	aa 1b       	sub	r26, r26
 8d8:	bb 1b       	sub	r27, r27
 8da:	fd 01       	movw	r30, r26
 8dc:	0d c0       	rjmp	.+26     	; 0x8f8 <__udivmodsi4_ep>

000008de <__udivmodsi4_loop>:
 8de:	aa 1f       	adc	r26, r26
 8e0:	bb 1f       	adc	r27, r27
 8e2:	ee 1f       	adc	r30, r30
 8e4:	ff 1f       	adc	r31, r31
 8e6:	a2 17       	cp	r26, r18
 8e8:	b3 07       	cpc	r27, r19
 8ea:	e4 07       	cpc	r30, r20
 8ec:	f5 07       	cpc	r31, r21
 8ee:	20 f0       	brcs	.+8      	; 0x8f8 <__udivmodsi4_ep>
 8f0:	a2 1b       	sub	r26, r18
 8f2:	b3 0b       	sbc	r27, r19
 8f4:	e4 0b       	sbc	r30, r20
 8f6:	f5 0b       	sbc	r31, r21

000008f8 <__udivmodsi4_ep>:
 8f8:	66 1f       	adc	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 1f       	adc	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	1a 94       	dec	r1
 902:	69 f7       	brne	.-38     	; 0x8de <__udivmodsi4_loop>
 904:	60 95       	com	r22
 906:	70 95       	com	r23
 908:	80 95       	com	r24
 90a:	90 95       	com	r25
 90c:	9b 01       	movw	r18, r22
 90e:	ac 01       	movw	r20, r24
 910:	bd 01       	movw	r22, r26
 912:	cf 01       	movw	r24, r30
 914:	08 95       	ret

00000916 <setjmp>:
 916:	dc 01       	movw	r26, r24
 918:	2d 92       	st	X+, r2
 91a:	3d 92       	st	X+, r3
 91c:	4d 92       	st	X+, r4
 91e:	5d 92       	st	X+, r5
 920:	6d 92       	st	X+, r6
 922:	7d 92       	st	X+, r7
 924:	8d 92       	st	X+, r8
 926:	9d 92       	st	X+, r9
 928:	ad 92       	st	X+, r10
 92a:	bd 92       	st	X+, r11
 92c:	cd 92       	st	X+, r12
 92e:	dd 92       	st	X+, r13
 930:	ed 92       	st	X+, r14
 932:	fd 92       	st	X+, r15
 934:	0d 93       	st	X+, r16
 936:	1d 93       	st	X+, r17
 938:	cd 93       	st	X+, r28
 93a:	dd 93       	st	X+, r29
 93c:	ff 91       	pop	r31
 93e:	ef 91       	pop	r30
 940:	8d b7       	in	r24, 0x3d	; 61
 942:	8d 93       	st	X+, r24
 944:	8e b7       	in	r24, 0x3e	; 62
 946:	8d 93       	st	X+, r24
 948:	8f b7       	in	r24, 0x3f	; 63
 94a:	8d 93       	st	X+, r24
 94c:	ed 93       	st	X+, r30
 94e:	fd 93       	st	X+, r31
 950:	88 27       	eor	r24, r24
 952:	99 27       	eor	r25, r25
 954:	09 94       	ijmp

00000956 <longjmp>:
 956:	dc 01       	movw	r26, r24
 958:	cb 01       	movw	r24, r22
 95a:	81 30       	cpi	r24, 0x01	; 1
 95c:	91 05       	cpc	r25, r1
 95e:	81 1d       	adc	r24, r1
 960:	2d 90       	ld	r2, X+
 962:	3d 90       	ld	r3, X+
 964:	4d 90       	ld	r4, X+
 966:	5d 90       	ld	r5, X+
 968:	6d 90       	ld	r6, X+
 96a:	7d 90       	ld	r7, X+
 96c:	8d 90       	ld	r8, X+
 96e:	9d 90       	ld	r9, X+
 970:	ad 90       	ld	r10, X+
 972:	bd 90       	ld	r11, X+
 974:	cd 90       	ld	r12, X+
 976:	dd 90       	ld	r13, X+
 978:	ed 90       	ld	r14, X+
 97a:	fd 90       	ld	r15, X+
 97c:	0d 91       	ld	r16, X+
 97e:	1d 91       	ld	r17, X+
 980:	cd 91       	ld	r28, X+
 982:	dd 91       	ld	r29, X+
 984:	ed 91       	ld	r30, X+
 986:	fd 91       	ld	r31, X+
 988:	0d 90       	ld	r0, X+
 98a:	f8 94       	cli
 98c:	fe bf       	out	0x3e, r31	; 62
 98e:	0f be       	out	0x3f, r0	; 63
 990:	ed bf       	out	0x3d, r30	; 61
 992:	ed 91       	ld	r30, X+
 994:	fd 91       	ld	r31, X+
 996:	09 94       	ijmp

00000998 <_exit>:
 998:	f8 94       	cli

0000099a <__stop_program>:
 99a:	ff cf       	rjmp	.-2      	; 0x99a <__stop_program>
