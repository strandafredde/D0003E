
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000022c6  0000235a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000358  0080011c  0080011c  00002376  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002376  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000023e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002906  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fda  00000000  00000000  00004f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001663  00000000  00000000  00005f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cb8  00000000  00000000  00007584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000958  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000285b  00000000  00000000  00008b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000b3ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
       4:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_1>
       8:	0c 94 65 05 	jmp	0xaca	; 0xaca <__vector_2>
       c:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__vector_3>
      10:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__vector_4>
      14:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <__vector_5>
      18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      1c:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <__vector_7>
      20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      24:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__vector_9>
      28:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__vector_10>
      2c:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__vector_11>
      30:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__vector_12>
      34:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__vector_13>
      38:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <__vector_14>
      3c:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <__vector_15>
      40:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__vector_16>
      44:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__vector_17>
      48:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <__vector_18>
      4c:	0c 94 08 0b 	jmp	0x1610	; 0x1610 <__vector_19>
      50:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_20>
      54:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__vector_21>
      58:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__vector_22>
      5c:	64 01       	movw	r12, r8
      5e:	4c 01       	movw	r8, r24
      60:	4f 01       	movw	r8, r30
      62:	52 01       	movw	r10, r4
      64:	55 01       	movw	r10, r10
      66:	58 01       	movw	r10, r16
      68:	5b 01       	movw	r10, r22
      6a:	5e 01       	movw	r10, r28
      6c:	61 01       	movw	r12, r2

0000006e <__ctors_end>:
      6e:	11 24       	eor	r1, r1
      70:	1f be       	out	0x3f, r1	; 63
      72:	cf ef       	ldi	r28, 0xFF	; 255
      74:	d4 e0       	ldi	r29, 0x04	; 4
      76:	de bf       	out	0x3e, r29	; 62
      78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
      7a:	11 e0       	ldi	r17, 0x01	; 1
      7c:	a0 e0       	ldi	r26, 0x00	; 0
      7e:	b1 e0       	ldi	r27, 0x01	; 1
      80:	e6 ec       	ldi	r30, 0xC6	; 198
      82:	f2 e2       	ldi	r31, 0x22	; 34
      84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
      86:	05 90       	lpm	r0, Z+
      88:	0d 92       	st	X+, r0
      8a:	ac 31       	cpi	r26, 0x1C	; 28
      8c:	b1 07       	cpc	r27, r17
      8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
      90:	24 e0       	ldi	r18, 0x04	; 4
      92:	ac e1       	ldi	r26, 0x1C	; 28
      94:	b1 e0       	ldi	r27, 0x01	; 1
      96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
      98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
      9a:	a4 37       	cpi	r26, 0x74	; 116
      9c:	b2 07       	cpc	r27, r18
      9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>
      a0:	0e 94 28 03 	call	0x650	; 0x650 <main>
      a4:	0c 94 61 11 	jmp	0x22c2	; 0x22c2 <_exit>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <dataHandler>:
#include "USART_Receive.h"
#include <avr/io.h>
#include <stdio.h>
#include "TinyTimber.h"

void dataHandler(ControllerHandler *self) {
      ac:	af 92       	push	r10
      ae:	bf 92       	push	r11
      b0:	cf 92       	push	r12
      b2:	df 92       	push	r13
      b4:	ef 92       	push	r14
      b6:	ff 92       	push	r15
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	cf 93       	push	r28
      be:	5c 01       	movw	r10, r24
    uint8_t input = USART_Receive2();
      c0:	0e 94 02 11 	call	0x2204	; 0x2204 <USART_Receive2>
      c4:	c8 2f       	mov	r28, r24

    if (input & 0b00000010) // - car enters bridge northbound.
      c6:	81 ff       	sbrs	r24, 1
      c8:	25 c0       	rjmp	.+74     	; 0x114 <dataHandler+0x68>
    {
        ASYNC(self->bridge, enterNorth, NULL); // - Add queueing car to bridge.
      ca:	f5 01       	movw	r30, r10
      cc:	04 81       	ldd	r16, Z+4	; 0x04
      ce:	15 81       	ldd	r17, Z+5	; 0x05
      d0:	c1 2c       	mov	r12, r1
      d2:	d1 2c       	mov	r13, r1
      d4:	0f 2e       	mov	r0, r31
      d6:	fc e9       	ldi	r31, 0x9C	; 156
      d8:	ef 2e       	mov	r14, r31
      da:	f0 e1       	ldi	r31, 0x10	; 16
      dc:	ff 2e       	mov	r15, r31
      de:	f0 2d       	mov	r31, r0
      e0:	20 e0       	ldi	r18, 0x00	; 0
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	a9 01       	movw	r20, r18
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	cb 01       	movw	r24, r22
      ec:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
        AFTER(SEC(5), self->bridge, carDestroy, NULL);
      f0:	f5 01       	movw	r30, r10
      f2:	04 81       	ldd	r16, Z+4	; 0x04
      f4:	15 81       	ldd	r17, Z+5	; 0x05
      f6:	0f 2e       	mov	r0, r31
      f8:	f5 ec       	ldi	r31, 0xC5	; 197
      fa:	ef 2e       	mov	r14, r31
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	ff 2e       	mov	r15, r31
     100:	f0 2d       	mov	r31, r0
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	a9 01       	movw	r20, r18
     108:	6a e5       	ldi	r22, 0x5A	; 90
     10a:	72 e6       	ldi	r23, 0x62	; 98
     10c:	82 e0       	ldi	r24, 0x02	; 2
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
    }
    if (input & 0b00001000) // - car enters bridge southbound.
     114:	c3 ff       	sbrs	r28, 3
     116:	25 c0       	rjmp	.+74     	; 0x162 <dataHandler+0xb6>
    {
        ASYNC(self->bridge, enterSouth, NULL); // - Add queueing car to bridge.
     118:	f5 01       	movw	r30, r10
     11a:	04 81       	ldd	r16, Z+4	; 0x04
     11c:	15 81       	ldd	r17, Z+5	; 0x05
     11e:	c1 2c       	mov	r12, r1
     120:	d1 2c       	mov	r13, r1
     122:	0f 2e       	mov	r0, r31
     124:	f3 e7       	ldi	r31, 0x73	; 115
     126:	ef 2e       	mov	r14, r31
     128:	f0 e1       	ldi	r31, 0x10	; 16
     12a:	ff 2e       	mov	r15, r31
     12c:	f0 2d       	mov	r31, r0
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	a9 01       	movw	r20, r18
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	70 e0       	ldi	r23, 0x00	; 0
     138:	cb 01       	movw	r24, r22
     13a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
        AFTER(SEC(5), self->bridge, carDestroy, NULL);
     13e:	f5 01       	movw	r30, r10
     140:	04 81       	ldd	r16, Z+4	; 0x04
     142:	15 81       	ldd	r17, Z+5	; 0x05
     144:	0f 2e       	mov	r0, r31
     146:	f5 ec       	ldi	r31, 0xC5	; 197
     148:	ef 2e       	mov	r14, r31
     14a:	f0 e1       	ldi	r31, 0x10	; 16
     14c:	ff 2e       	mov	r15, r31
     14e:	f0 2d       	mov	r31, r0
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	a9 01       	movw	r20, r18
     156:	6a e5       	ldi	r22, 0x5A	; 90
     158:	72 e6       	ldi	r23, 0x62	; 98
     15a:	82 e0       	ldi	r24, 0x02	; 2
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
    }
    if (input & 0b00000001) // - car enters queue northbound.
     162:	c0 ff       	sbrs	r28, 0
     164:	13 c0       	rjmp	.+38     	; 0x18c <dataHandler+0xe0>
    {
        ASYNC(self->bridge, NorthboundArrival, NULL); // - Add arriving car to queue.
     166:	f5 01       	movw	r30, r10
     168:	04 81       	ldd	r16, Z+4	; 0x04
     16a:	15 81       	ldd	r17, Z+5	; 0x05
     16c:	c1 2c       	mov	r12, r1
     16e:	d1 2c       	mov	r13, r1
     170:	0f 2e       	mov	r0, r31
     172:	f9 e2       	ldi	r31, 0x29	; 41
     174:	ef 2e       	mov	r14, r31
     176:	f0 e1       	ldi	r31, 0x10	; 16
     178:	ff 2e       	mov	r15, r31
     17a:	f0 2d       	mov	r31, r0
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	a9 01       	movw	r20, r18
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	cb 01       	movw	r24, r22
     188:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
    }
    if (input & 0b00000100) // - car enters queue southbound.
     18c:	c2 ff       	sbrs	r28, 2
     18e:	13 c0       	rjmp	.+38     	; 0x1b6 <dataHandler+0x10a>
    {
        ASYNC(self->bridge, SouthboundArrival, NULL); // - Add arriving car to queue.
     190:	f5 01       	movw	r30, r10
     192:	04 81       	ldd	r16, Z+4	; 0x04
     194:	15 81       	ldd	r17, Z+5	; 0x05
     196:	c1 2c       	mov	r12, r1
     198:	d1 2c       	mov	r13, r1
     19a:	0f 2e       	mov	r0, r31
     19c:	fe e4       	ldi	r31, 0x4E	; 78
     19e:	ef 2e       	mov	r14, r31
     1a0:	f0 e1       	ldi	r31, 0x10	; 16
     1a2:	ff 2e       	mov	r15, r31
     1a4:	f0 2d       	mov	r31, r0
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	a9 01       	movw	r20, r18
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	cb 01       	movw	r24, r22
     1b2:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
    }

}
     1b6:	cf 91       	pop	r28
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	08 95       	ret

000001ca <initiate>:

void initiate(ControllerHandler *self) {
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
    ASYNC(self->bridge, carsEnter, NULL);
     1d6:	fc 01       	movw	r30, r24
     1d8:	04 81       	ldd	r16, Z+4	; 0x04
     1da:	15 81       	ldd	r17, Z+5	; 0x05
     1dc:	c1 2c       	mov	r12, r1
     1de:	d1 2c       	mov	r13, r1
     1e0:	0f 2e       	mov	r0, r31
     1e2:	f2 ed       	ldi	r31, 0xD2	; 210
     1e4:	ef 2e       	mov	r14, r31
     1e6:	ff e0       	ldi	r31, 0x0F	; 15
     1e8:	ff 2e       	mov	r15, r31
     1ea:	f0 2d       	mov	r31, r0
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	a9 01       	movw	r20, r18
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	70 e0       	ldi	r23, 0x00	; 0
     1f6:	cb 01       	movw	r24, r22
     1f8:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
     1fc:	1f 91       	pop	r17
     1fe:	0f 91       	pop	r16
     200:	ff 90       	pop	r15
     202:	ef 90       	pop	r14
     204:	df 90       	pop	r13
     206:	cf 90       	pop	r12
     208:	08 95       	ret

0000020a <LCD_init>:
     *
     * returns: none
     */
	
	//Initialize clock 
	CLKPR = 0x80;
     20a:	e1 e6       	ldi	r30, 0x61	; 97
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	80 83       	st	Z, r24
	CLKPR = 0x00;
     212:	10 82       	st	Z, r1
	
    /* Asynchronous clock, 1/3 bias, 1/4 duty cycle,   25 segments */
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
     214:	87 eb       	ldi	r24, 0xB7	; 183
     216:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
    /* Set volt to 3.35V */
    LCDCCR = (1<<LCDCC3) |(1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
     21a:	8f e0       	ldi	r24, 0x0F	; 15
     21c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    /* Clock division factor to 8, and prescaler to 16 */
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
     220:	87 e0       	ldi	r24, 0x07	; 7
     222:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    /* low power waveform, no frame interrupt, no blanking */
    LCDCRA = (1<<LCDAB) | (1<<LCDEN);
     226:	90 ec       	ldi	r25, 0xC0	; 192
     228:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

    PORTB |= (1<<PB7)|(1<<PB6)|(1<<PB4);
     22c:	85 b1       	in	r24, 0x05	; 5
     22e:	80 6d       	ori	r24, 0xD0	; 208
     230:	85 b9       	out	0x05, r24	; 5
    PORTE |= (1<<PE2)|(1<<PE3);
     232:	8e b1       	in	r24, 0x0e	; 14
     234:	8c 60       	ori	r24, 0x0C	; 12
     236:	8e b9       	out	0x0e, r24	; 14
	DDRB   = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
     238:	8f e2       	ldi	r24, 0x2F	; 47
     23a:	84 b9       	out	0x04, r24	; 4
	DDRE   = (1<<DDE6)|(1<<DDE4);
     23c:	80 e5       	ldi	r24, 0x50	; 80
     23e:	8d b9       	out	0x0d, r24	; 13
   
    // Enable external interrupts
	PCMSK0 = (1<<PCINT3)|(1<<PCINT2);
     240:	8c e0       	ldi	r24, 0x0C	; 12
     242:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
	PCMSK1 = (1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
     246:	80 ed       	ldi	r24, 0xD0	; 208
     248:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (1 << PCIE1)|(1 << PCIE0);
     24c:	9d bb       	out	0x1d, r25	; 29
     24e:	08 95       	ret

00000250 <writeChar>:

    
}

void writeChar(char ch, int pos){
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	64 97       	sbiw	r28, 0x14	; 20
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
	#define SCC_6  0x1F41
	#define SCC_7  0x0111
	#define SCC_8  0x1F51
	#define SCC_9  0x0B51

	int numArr[10] = {SCC_0, SCC_1 , SCC_2, SCC_3, SCC_4, SCC_5, SCC_6, SCC_7, SCC_8, SCC_9};
     264:	94 e1       	ldi	r25, 0x14	; 20
     266:	e8 e0       	ldi	r30, 0x08	; 8
     268:	f1 e0       	ldi	r31, 0x01	; 1
     26a:	de 01       	movw	r26, r28
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	01 90       	ld	r0, Z+
     270:	0d 92       	st	X+, r0
     272:	9a 95       	dec	r25
     274:	e1 f7       	brne	.-8      	; 0x26e <writeChar+0x1e>
     */

    int i = 0;

    /* checks if pos is within fixed range */
    if(pos < 0 || pos > 5) {
     276:	66 30       	cpi	r22, 0x06	; 6
     278:	71 05       	cpc	r23, r1
     27a:	08 f0       	brcs	.+2      	; 0x27e <writeChar+0x2e>
     27c:	9d c1       	rjmp	.+826    	; 0x5b8 <__stack+0xb9>
        return;
    }

    /* index select of character */
    switch(ch){
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	fc 01       	movw	r30, r24
     282:	f1 97       	sbiw	r30, 0x31	; 49
     284:	e9 30       	cpi	r30, 0x09	; 9
     286:	f1 05       	cpc	r31, r1
     288:	20 f4       	brcc	.+8      	; 0x292 <writeChar+0x42>
     28a:	e2 5d       	subi	r30, 0xD2	; 210
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	0c 94 1a 11 	jmp	0x2234	; 0x2234 <__tablejump2__>
     * position (int pos) if within fixed range.
     *
     * returns: none
     */

    int i = 0;
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	1a c0       	rjmp	.+52     	; 0x2cc <writeChar+0x7c>
            break;
        case '1':
            i = 1;
            break;
        case '2':
            i = 2;
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	90 e0       	ldi	r25, 0x00	; 0
            break;
     29c:	17 c0       	rjmp	.+46     	; 0x2cc <writeChar+0x7c>
        case '3':
            i = 3;
     29e:	83 e0       	ldi	r24, 0x03	; 3
     2a0:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2a2:	14 c0       	rjmp	.+40     	; 0x2cc <writeChar+0x7c>
        case '4':
            i = 4;
     2a4:	84 e0       	ldi	r24, 0x04	; 4
     2a6:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2a8:	11 c0       	rjmp	.+34     	; 0x2cc <writeChar+0x7c>
        case '5':
            i = 5;
     2aa:	85 e0       	ldi	r24, 0x05	; 5
     2ac:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2ae:	0e c0       	rjmp	.+28     	; 0x2cc <writeChar+0x7c>
        case '6':
            i = 6;
     2b0:	86 e0       	ldi	r24, 0x06	; 6
     2b2:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2b4:	0b c0       	rjmp	.+22     	; 0x2cc <writeChar+0x7c>
        case '7':
            i = 7;
     2b6:	87 e0       	ldi	r24, 0x07	; 7
     2b8:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2ba:	08 c0       	rjmp	.+16     	; 0x2cc <writeChar+0x7c>
        case '8':
            i = 8;
     2bc:	88 e0       	ldi	r24, 0x08	; 8
     2be:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <writeChar+0x7c>
        case '9':
            i = 9;
     2c2:	89 e0       	ldi	r24, 0x09	; 9
     2c4:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <writeChar+0x7c>
    switch(ch){
        case '0':
            i = 0;
            break;
        case '1':
            i = 1;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
        default:
            break;
    }

    /* writes translated char at pos to LCD */
    switch(pos){
     2cc:	62 30       	cpi	r22, 0x02	; 2
     2ce:	71 05       	cpc	r23, r1
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <writeChar+0x84>
     2d2:	89 c0       	rjmp	.+274    	; 0x3e6 <writeChar+0x196>
     2d4:	44 f4       	brge	.+16     	; 0x2e6 <writeChar+0x96>
     2d6:	61 15       	cp	r22, r1
     2d8:	71 05       	cpc	r23, r1
     2da:	81 f0       	breq	.+32     	; 0x2fc <writeChar+0xac>
     2dc:	61 30       	cpi	r22, 0x01	; 1
     2de:	71 05       	cpc	r23, r1
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <writeChar+0x94>
     2e2:	44 c0       	rjmp	.+136    	; 0x36c <writeChar+0x11c>
     2e4:	69 c1       	rjmp	.+722    	; 0x5b8 <__stack+0xb9>
     2e6:	64 30       	cpi	r22, 0x04	; 4
     2e8:	71 05       	cpc	r23, r1
     2ea:	09 f4       	brne	.+2      	; 0x2ee <writeChar+0x9e>
     2ec:	f1 c0       	rjmp	.+482    	; 0x4d0 <__DATA_REGION_LENGTH__+0xd0>
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <writeChar+0xa2>
     2f0:	b2 c0       	rjmp	.+356    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
     2f2:	65 30       	cpi	r22, 0x05	; 5
     2f4:	71 05       	cpc	r23, r1
     2f6:	09 f4       	brne	.+2      	; 0x2fa <writeChar+0xaa>
     2f8:	23 c1       	rjmp	.+582    	; 0x540 <__stack+0x41>
     2fa:	5e c1       	rjmp	.+700    	; 0x5b8 <__stack+0xb9>
        case 0:
            LCDDR0  = (LCDDR0&0x00F0)  |  (numArr[i] & 0x000F);
     2fc:	ac ee       	ldi	r26, 0xEC	; 236
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	2c 91       	ld	r18, X
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	e1 e0       	ldi	r30, 0x01	; 1
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	ec 0f       	add	r30, r28
     30c:	fd 1f       	adc	r31, r29
     30e:	e8 0f       	add	r30, r24
     310:	f9 1f       	adc	r31, r25
     312:	80 81       	ld	r24, Z
     314:	92 2f       	mov	r25, r18
     316:	90 7f       	andi	r25, 0xF0	; 240
     318:	8f 70       	andi	r24, 0x0F	; 15
     31a:	89 2b       	or	r24, r25
     31c:	8c 93       	st	X, r24
            LCDDR5  = (LCDDR5&0x00F0)  | ((numArr[i] & 0x00F0))>>4;
     31e:	a1 ef       	ldi	r26, 0xF1	; 241
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	2c 91       	ld	r18, X
     324:	80 81       	ld	r24, Z
     326:	91 81       	ldd	r25, Z+1	; 0x01
     328:	80 7f       	andi	r24, 0xF0	; 240
     32a:	99 27       	eor	r25, r25
     32c:	95 95       	asr	r25
     32e:	87 95       	ror	r24
     330:	95 95       	asr	r25
     332:	87 95       	ror	r24
     334:	95 95       	asr	r25
     336:	87 95       	ror	r24
     338:	95 95       	asr	r25
     33a:	87 95       	ror	r24
     33c:	92 2f       	mov	r25, r18
     33e:	90 7f       	andi	r25, 0xF0	; 240
     340:	89 2b       	or	r24, r25
     342:	8c 93       	st	X, r24
            LCDDR10 = (LCDDR10&0x00F0) | ((numArr[i] & 0x0F00))>>8;
     344:	a6 ef       	ldi	r26, 0xF6	; 246
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	8c 91       	ld	r24, X
     34a:	20 81       	ld	r18, Z
     34c:	31 81       	ldd	r19, Z+1	; 0x01
     34e:	22 27       	eor	r18, r18
     350:	3f 70       	andi	r19, 0x0F	; 15
     352:	80 7f       	andi	r24, 0xF0	; 240
     354:	83 2b       	or	r24, r19
     356:	8c 93       	st	X, r24
            LCDDR15 = (LCDDR15&0x00F0) | ((numArr[i] & 0xF000))>>12;
     358:	ab ef       	ldi	r26, 0xFB	; 251
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	8c 91       	ld	r24, X
     35e:	91 81       	ldd	r25, Z+1	; 0x01
     360:	92 95       	swap	r25
     362:	9f 70       	andi	r25, 0x0F	; 15
     364:	80 7f       	andi	r24, 0xF0	; 240
     366:	89 2b       	or	r24, r25
     368:	8c 93       	st	X, r24
            break;
     36a:	26 c1       	rjmp	.+588    	; 0x5b8 <__stack+0xb9>
        case 1:
            LCDDR0  = (LCDDR0&0x000F)  |  ((numArr[i] & 0x000F))<<4;
     36c:	ac ee       	ldi	r26, 0xEC	; 236
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	2c 91       	ld	r18, X
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	e1 e0       	ldi	r30, 0x01	; 1
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	ec 0f       	add	r30, r28
     37c:	fd 1f       	adc	r31, r29
     37e:	e8 0f       	add	r30, r24
     380:	f9 1f       	adc	r31, r25
     382:	80 81       	ld	r24, Z
     384:	91 81       	ldd	r25, Z+1	; 0x01
     386:	82 95       	swap	r24
     388:	92 95       	swap	r25
     38a:	90 7f       	andi	r25, 0xF0	; 240
     38c:	98 27       	eor	r25, r24
     38e:	80 7f       	andi	r24, 0xF0	; 240
     390:	98 27       	eor	r25, r24
     392:	92 2f       	mov	r25, r18
     394:	9f 70       	andi	r25, 0x0F	; 15
     396:	89 2b       	or	r24, r25
     398:	8c 93       	st	X, r24
            LCDDR5  = (LCDDR5&0x000F)  |   (numArr[i] & 0x00F0);
     39a:	a1 ef       	ldi	r26, 0xF1	; 241
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	9c 91       	ld	r25, X
     3a0:	80 81       	ld	r24, Z
     3a2:	9f 70       	andi	r25, 0x0F	; 15
     3a4:	80 7f       	andi	r24, 0xF0	; 240
     3a6:	89 2b       	or	r24, r25
     3a8:	8c 93       	st	X, r24
            LCDDR10 = (LCDDR10&0x000F) |  ((numArr[i] & 0x0F00))>>4;
     3aa:	a6 ef       	ldi	r26, 0xF6	; 246
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	2c 91       	ld	r18, X
     3b0:	80 81       	ld	r24, Z
     3b2:	91 81       	ldd	r25, Z+1	; 0x01
     3b4:	88 27       	eor	r24, r24
     3b6:	9f 70       	andi	r25, 0x0F	; 15
     3b8:	95 95       	asr	r25
     3ba:	87 95       	ror	r24
     3bc:	95 95       	asr	r25
     3be:	87 95       	ror	r24
     3c0:	95 95       	asr	r25
     3c2:	87 95       	ror	r24
     3c4:	95 95       	asr	r25
     3c6:	87 95       	ror	r24
     3c8:	92 2f       	mov	r25, r18
     3ca:	9f 70       	andi	r25, 0x0F	; 15
     3cc:	89 2b       	or	r24, r25
     3ce:	8c 93       	st	X, r24
            LCDDR15 = (LCDDR15&0x000F) |  ((numArr[i] & 0xF000))>>8;
     3d0:	ab ef       	ldi	r26, 0xFB	; 251
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	8c 91       	ld	r24, X
     3d6:	20 81       	ld	r18, Z
     3d8:	31 81       	ldd	r19, Z+1	; 0x01
     3da:	22 27       	eor	r18, r18
     3dc:	30 7f       	andi	r19, 0xF0	; 240
     3de:	8f 70       	andi	r24, 0x0F	; 15
     3e0:	83 2b       	or	r24, r19
     3e2:	8c 93       	st	X, r24
            break;
     3e4:	e9 c0       	rjmp	.+466    	; 0x5b8 <__stack+0xb9>
        case 2:
            LCDDR1  = (LCDDR1&0x00F0)  |  (numArr[i] & 0x000F);
     3e6:	ad ee       	ldi	r26, 0xED	; 237
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	2c 91       	ld	r18, X
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	e1 e0       	ldi	r30, 0x01	; 1
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	ec 0f       	add	r30, r28
     3f6:	fd 1f       	adc	r31, r29
     3f8:	e8 0f       	add	r30, r24
     3fa:	f9 1f       	adc	r31, r25
     3fc:	80 81       	ld	r24, Z
     3fe:	92 2f       	mov	r25, r18
     400:	90 7f       	andi	r25, 0xF0	; 240
     402:	8f 70       	andi	r24, 0x0F	; 15
     404:	89 2b       	or	r24, r25
     406:	8c 93       	st	X, r24
            LCDDR6  = (LCDDR6&0x00F0)  |  ((numArr[i] & 0x00F0))>>4;
     408:	a2 ef       	ldi	r26, 0xF2	; 242
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	2c 91       	ld	r18, X
     40e:	80 81       	ld	r24, Z
     410:	91 81       	ldd	r25, Z+1	; 0x01
     412:	80 7f       	andi	r24, 0xF0	; 240
     414:	99 27       	eor	r25, r25
     416:	95 95       	asr	r25
     418:	87 95       	ror	r24
     41a:	95 95       	asr	r25
     41c:	87 95       	ror	r24
     41e:	95 95       	asr	r25
     420:	87 95       	ror	r24
     422:	95 95       	asr	r25
     424:	87 95       	ror	r24
     426:	92 2f       	mov	r25, r18
     428:	90 7f       	andi	r25, 0xF0	; 240
     42a:	89 2b       	or	r24, r25
     42c:	8c 93       	st	X, r24
            LCDDR11 = (LCDDR11&0x00F0) |  ((numArr[i] & 0x0F00))>>8;
     42e:	a7 ef       	ldi	r26, 0xF7	; 247
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	8c 91       	ld	r24, X
     434:	20 81       	ld	r18, Z
     436:	31 81       	ldd	r19, Z+1	; 0x01
     438:	22 27       	eor	r18, r18
     43a:	3f 70       	andi	r19, 0x0F	; 15
     43c:	80 7f       	andi	r24, 0xF0	; 240
     43e:	83 2b       	or	r24, r19
     440:	8c 93       	st	X, r24
            LCDDR16 = (LCDDR16&0x00F0) |  ((numArr[i] & 0xF000))>>12;
     442:	ac ef       	ldi	r26, 0xFC	; 252
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	8c 91       	ld	r24, X
     448:	91 81       	ldd	r25, Z+1	; 0x01
     44a:	92 95       	swap	r25
     44c:	9f 70       	andi	r25, 0x0F	; 15
     44e:	80 7f       	andi	r24, 0xF0	; 240
     450:	89 2b       	or	r24, r25
     452:	8c 93       	st	X, r24
            break;
     454:	b1 c0       	rjmp	.+354    	; 0x5b8 <__stack+0xb9>
        case 3:
            LCDDR1  = (LCDDR1&0x000F)  |  ((numArr[i] & 0x000F))<<4;
     456:	ad ee       	ldi	r26, 0xED	; 237
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	2c 91       	ld	r18, X
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	e1 e0       	ldi	r30, 0x01	; 1
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	ec 0f       	add	r30, r28
     466:	fd 1f       	adc	r31, r29
     468:	e8 0f       	add	r30, r24
     46a:	f9 1f       	adc	r31, r25
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	82 95       	swap	r24
     472:	92 95       	swap	r25
     474:	90 7f       	andi	r25, 0xF0	; 240
     476:	98 27       	eor	r25, r24
     478:	80 7f       	andi	r24, 0xF0	; 240
     47a:	98 27       	eor	r25, r24
     47c:	92 2f       	mov	r25, r18
     47e:	9f 70       	andi	r25, 0x0F	; 15
     480:	89 2b       	or	r24, r25
     482:	8c 93       	st	X, r24
            LCDDR6  = (LCDDR6&0x000F)  |   (numArr[i] & 0x00F0);
     484:	a2 ef       	ldi	r26, 0xF2	; 242
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	9c 91       	ld	r25, X
     48a:	80 81       	ld	r24, Z
     48c:	9f 70       	andi	r25, 0x0F	; 15
     48e:	80 7f       	andi	r24, 0xF0	; 240
     490:	89 2b       	or	r24, r25
     492:	8c 93       	st	X, r24
            LCDDR11 = (LCDDR11&0x000F) |  ((numArr[i] & 0x0F00))>>4;
     494:	a7 ef       	ldi	r26, 0xF7	; 247
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	2c 91       	ld	r18, X
     49a:	80 81       	ld	r24, Z
     49c:	91 81       	ldd	r25, Z+1	; 0x01
     49e:	88 27       	eor	r24, r24
     4a0:	9f 70       	andi	r25, 0x0F	; 15
     4a2:	95 95       	asr	r25
     4a4:	87 95       	ror	r24
     4a6:	95 95       	asr	r25
     4a8:	87 95       	ror	r24
     4aa:	95 95       	asr	r25
     4ac:	87 95       	ror	r24
     4ae:	95 95       	asr	r25
     4b0:	87 95       	ror	r24
     4b2:	92 2f       	mov	r25, r18
     4b4:	9f 70       	andi	r25, 0x0F	; 15
     4b6:	89 2b       	or	r24, r25
     4b8:	8c 93       	st	X, r24
            LCDDR16 = (LCDDR16&0x000F) |  ((numArr[i] & 0xF000))>>8;
     4ba:	ac ef       	ldi	r26, 0xFC	; 252
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	8c 91       	ld	r24, X
     4c0:	20 81       	ld	r18, Z
     4c2:	31 81       	ldd	r19, Z+1	; 0x01
     4c4:	22 27       	eor	r18, r18
     4c6:	30 7f       	andi	r19, 0xF0	; 240
     4c8:	8f 70       	andi	r24, 0x0F	; 15
     4ca:	83 2b       	or	r24, r19
     4cc:	8c 93       	st	X, r24
            break;
     4ce:	74 c0       	rjmp	.+232    	; 0x5b8 <__stack+0xb9>
        case 4:
            LCDDR2  = (LCDDR2&0x00F0)  | ((numArr[i] & 0x000F));
     4d0:	ae ee       	ldi	r26, 0xEE	; 238
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	2c 91       	ld	r18, X
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	e1 e0       	ldi	r30, 0x01	; 1
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	ec 0f       	add	r30, r28
     4e0:	fd 1f       	adc	r31, r29
     4e2:	e8 0f       	add	r30, r24
     4e4:	f9 1f       	adc	r31, r25
     4e6:	80 81       	ld	r24, Z
     4e8:	92 2f       	mov	r25, r18
     4ea:	90 7f       	andi	r25, 0xF0	; 240
     4ec:	8f 70       	andi	r24, 0x0F	; 15
     4ee:	89 2b       	or	r24, r25
     4f0:	8c 93       	st	X, r24
            LCDDR7  = (LCDDR7&0x00F0)  | ((numArr[i] & 0x00F0))>>4;
     4f2:	a3 ef       	ldi	r26, 0xF3	; 243
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	2c 91       	ld	r18, X
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	80 7f       	andi	r24, 0xF0	; 240
     4fe:	99 27       	eor	r25, r25
     500:	95 95       	asr	r25
     502:	87 95       	ror	r24
     504:	95 95       	asr	r25
     506:	87 95       	ror	r24
     508:	95 95       	asr	r25
     50a:	87 95       	ror	r24
     50c:	95 95       	asr	r25
     50e:	87 95       	ror	r24
     510:	92 2f       	mov	r25, r18
     512:	90 7f       	andi	r25, 0xF0	; 240
     514:	89 2b       	or	r24, r25
     516:	8c 93       	st	X, r24
            LCDDR12 = (LCDDR12&0x00F0) | ((numArr[i] & 0x0F00))>>8;
     518:	a8 ef       	ldi	r26, 0xF8	; 248
     51a:	b0 e0       	ldi	r27, 0x00	; 0
     51c:	8c 91       	ld	r24, X
     51e:	20 81       	ld	r18, Z
     520:	31 81       	ldd	r19, Z+1	; 0x01
     522:	22 27       	eor	r18, r18
     524:	3f 70       	andi	r19, 0x0F	; 15
     526:	80 7f       	andi	r24, 0xF0	; 240
     528:	83 2b       	or	r24, r19
     52a:	8c 93       	st	X, r24
            LCDDR17 = (LCDDR17&0x00F0) | ((numArr[i] & 0xF000))>>12;
     52c:	ad ef       	ldi	r26, 0xFD	; 253
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	8c 91       	ld	r24, X
     532:	91 81       	ldd	r25, Z+1	; 0x01
     534:	92 95       	swap	r25
     536:	9f 70       	andi	r25, 0x0F	; 15
     538:	80 7f       	andi	r24, 0xF0	; 240
     53a:	89 2b       	or	r24, r25
     53c:	8c 93       	st	X, r24
            break;
     53e:	3c c0       	rjmp	.+120    	; 0x5b8 <__stack+0xb9>
        case 5:
            LCDDR2  = (LCDDR2&0x000F)  |  ((numArr[i] & 0x000F))<<4;
     540:	ae ee       	ldi	r26, 0xEE	; 238
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	2c 91       	ld	r18, X
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	e1 e0       	ldi	r30, 0x01	; 1
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	ec 0f       	add	r30, r28
     550:	fd 1f       	adc	r31, r29
     552:	e8 0f       	add	r30, r24
     554:	f9 1f       	adc	r31, r25
     556:	80 81       	ld	r24, Z
     558:	91 81       	ldd	r25, Z+1	; 0x01
     55a:	82 95       	swap	r24
     55c:	92 95       	swap	r25
     55e:	90 7f       	andi	r25, 0xF0	; 240
     560:	98 27       	eor	r25, r24
     562:	80 7f       	andi	r24, 0xF0	; 240
     564:	98 27       	eor	r25, r24
     566:	92 2f       	mov	r25, r18
     568:	9f 70       	andi	r25, 0x0F	; 15
     56a:	89 2b       	or	r24, r25
     56c:	8c 93       	st	X, r24
            LCDDR7  = (LCDDR7&0x000F)  |  (numArr[i] & 0x00F0);
     56e:	a3 ef       	ldi	r26, 0xF3	; 243
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	9c 91       	ld	r25, X
     574:	80 81       	ld	r24, Z
     576:	9f 70       	andi	r25, 0x0F	; 15
     578:	80 7f       	andi	r24, 0xF0	; 240
     57a:	89 2b       	or	r24, r25
     57c:	8c 93       	st	X, r24
            LCDDR12 = (LCDDR12&0x000F) |  ((numArr[i] & 0x0F00))>>4;
     57e:	a8 ef       	ldi	r26, 0xF8	; 248
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	2c 91       	ld	r18, X
     584:	80 81       	ld	r24, Z
     586:	91 81       	ldd	r25, Z+1	; 0x01
     588:	88 27       	eor	r24, r24
     58a:	9f 70       	andi	r25, 0x0F	; 15
     58c:	95 95       	asr	r25
     58e:	87 95       	ror	r24
     590:	95 95       	asr	r25
     592:	87 95       	ror	r24
     594:	95 95       	asr	r25
     596:	87 95       	ror	r24
     598:	95 95       	asr	r25
     59a:	87 95       	ror	r24
     59c:	92 2f       	mov	r25, r18
     59e:	9f 70       	andi	r25, 0x0F	; 15
     5a0:	89 2b       	or	r24, r25
     5a2:	8c 93       	st	X, r24
            LCDDR17 = (LCDDR17&0x000F) |  ((numArr[i] & 0xF000))>>8;
     5a4:	ad ef       	ldi	r26, 0xFD	; 253
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	8c 91       	ld	r24, X
     5aa:	20 81       	ld	r18, Z
     5ac:	31 81       	ldd	r19, Z+1	; 0x01
     5ae:	22 27       	eor	r18, r18
     5b0:	30 7f       	andi	r19, 0xF0	; 240
     5b2:	8f 70       	andi	r24, 0x0F	; 15
     5b4:	83 2b       	or	r24, r19
     5b6:	8c 93       	st	X, r24
            break;
        default:
            break;
    }

}
     5b8:	64 96       	adiw	r28, 0x14	; 20
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <printAt>:


void printAt(uint8_t num, int pos ) {
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	d8 2f       	mov	r29, r24
     5d4:	8b 01       	movw	r16, r22
     *
     * returns: none
     */
	
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     5d6:	89 e2       	ldi	r24, 0x29	; 41
     5d8:	d8 9f       	mul	r29, r24
     5da:	81 2d       	mov	r24, r1
     5dc:	11 24       	eor	r1, r1
     5de:	82 95       	swap	r24
     5e0:	8f 70       	andi	r24, 0x0F	; 15
     5e2:	9d 2f       	mov	r25, r29
     5e4:	24 e6       	ldi	r18, 0x64	; 100
     5e6:	82 9f       	mul	r24, r18
     5e8:	90 19       	sub	r25, r0
     5ea:	11 24       	eor	r1, r1
     5ec:	cd ec       	ldi	r28, 0xCD	; 205
     5ee:	9c 9f       	mul	r25, r28
     5f0:	81 2d       	mov	r24, r1
     5f2:	11 24       	eor	r1, r1
     5f4:	86 95       	lsr	r24
     5f6:	86 95       	lsr	r24
     5f8:	86 95       	lsr	r24
     5fa:	80 5d       	subi	r24, 0xD0	; 208
     5fc:	0e 94 28 01 	call	0x250	; 0x250 <writeChar>
    pp++;
     600:	b8 01       	movw	r22, r16
     602:	6f 5f       	subi	r22, 0xFF	; 255
     604:	7f 4f       	sbci	r23, 0xFF	; 255
    writeChar( num % 10 + '0', pp);
     606:	dc 9f       	mul	r29, r28
     608:	c1 2d       	mov	r28, r1
     60a:	11 24       	eor	r1, r1
     60c:	c6 95       	lsr	r28
     60e:	c6 95       	lsr	r28
     610:	c6 95       	lsr	r28
     612:	cc 0f       	add	r28, r28
     614:	8c 2f       	mov	r24, r28
     616:	88 0f       	add	r24, r24
     618:	88 0f       	add	r24, r24
     61a:	c8 0f       	add	r28, r24
     61c:	8d 2f       	mov	r24, r29
     61e:	8c 1b       	sub	r24, r28
     620:	80 5d       	subi	r24, 0xD0	; 208
     622:	0e 94 28 01 	call	0x250	; 0x250 <writeChar>
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	08 95       	ret

00000630 <USART_init>:
guiClass GUI = initGUI(NULL); // (pos)


void USART_init(void){
	// - Set baud rate prescaler.
	UBRR0H = (UBRR_VALUE >> 8);
     630:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = UBRR_VALUE;
     634:	84 e3       	ldi	r24, 0x34	; 52
     636:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	// - Enable receiver and transmitter
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1<<RXCIE0);
     63a:	e1 ec       	ldi	r30, 0xC1	; 193
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	88 69       	ori	r24, 0x98	; 152
     642:	80 83       	st	Z, r24
	// - Set frame format: 8 data bits, no parity, 1 stop bit.
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     644:	e2 ec       	ldi	r30, 0xC2	; 194
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	86 60       	ori	r24, 0x06	; 6
     64c:	80 83       	st	Z, r24
     64e:	08 95       	ret

00000650 <main>:

// - handles input data from simulation.



int main(void) {
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	64 97       	sbiw	r28, 0x14	; 20
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
	USART_init(); // - initiate USART settings.
     664:	0e 94 18 03 	call	0x630	; 0x630 <USART_init>
	LCD_init(&GUI); // - initiate LCD.
     668:	8c e1       	ldi	r24, 0x1C	; 28
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_init>
	Bridge B = initBridge(); // - initiate traffic lights.
     670:	1a 82       	std	Y+2, r1	; 0x02
     672:	19 82       	std	Y+1, r1	; 0x01
     674:	1c 82       	std	Y+4, r1	; 0x04
     676:	1b 82       	std	Y+3, r1	; 0x03
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	9e 83       	std	Y+6, r25	; 0x06
     67e:	8d 83       	std	Y+5, r24	; 0x05
     680:	18 86       	std	Y+8, r1	; 0x08
     682:	1f 82       	std	Y+7, r1	; 0x07
     684:	1a 86       	std	Y+10, r1	; 0x0a
     686:	19 86       	std	Y+9, r1	; 0x09
     688:	1c 86       	std	Y+12, r1	; 0x0c
     68a:	1b 86       	std	Y+11, r1	; 0x0b
     68c:	1e 86       	std	Y+14, r1	; 0x0e
     68e:	1d 86       	std	Y+13, r1	; 0x0d
	ControllerHandler CH = initControllerHandler(&B); // - initiate controller handler.
     690:	18 8a       	std	Y+16, r1	; 0x10
     692:	1f 86       	std	Y+15, r1	; 0x0f
     694:	1a 8a       	std	Y+18, r1	; 0x12
     696:	19 8a       	std	Y+17, r1	; 0x11
     698:	ce 01       	movw	r24, r28
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	9c 8b       	std	Y+20, r25	; 0x14
     69e:	8b 8b       	std	Y+19, r24	; 0x13
	init(&B); // - print cars on LCD.
     6a0:	0e 94 ed 10 	call	0x21da	; 0x21da <init>
	INSTALL(&CH, dataHandler, IRQ_USART0_RX);
     6a4:	48 e0       	ldi	r20, 0x08	; 8
     6a6:	66 e5       	ldi	r22, 0x56	; 86
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	ce 01       	movw	r24, r28
     6ac:	0f 96       	adiw	r24, 0x0f	; 15
     6ae:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <install>
	TINYTIMBER(&CH, initiate, NULL);
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	65 ee       	ldi	r22, 0xE5	; 229
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	ce 01       	movw	r24, r28
     6bc:	0f 96       	adiw	r24, 0x0f	; 15
     6be:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <tinytimber>

}
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	64 96       	adiw	r28, 0x14	; 20
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	00 d0       	rcall	.+0      	; 0x6de <initialize+0x6>
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <initialize+0x8>
     6e0:	cd b7       	in	r28, 0x3d	; 61
     6e2:	de b7       	in	r29, 0x3e	; 62
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	18 c0       	rjmp	.+48     	; 0x71a <initialize+0x42>
     6ea:	ac 01       	movw	r20, r24
     6ec:	4f 5f       	subi	r20, 0xFF	; 255
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	9a 01       	movw	r18, r20
     6f2:	22 95       	swap	r18
     6f4:	32 95       	swap	r19
     6f6:	30 7f       	andi	r19, 0xF0	; 240
     6f8:	32 27       	eor	r19, r18
     6fa:	20 7f       	andi	r18, 0xF0	; 240
     6fc:	32 27       	eor	r19, r18
     6fe:	2c 5f       	subi	r18, 0xFC	; 252
     700:	3d 4f       	sbci	r19, 0xFD	; 253
     702:	82 95       	swap	r24
     704:	92 95       	swap	r25
     706:	90 7f       	andi	r25, 0xF0	; 240
     708:	98 27       	eor	r25, r24
     70a:	80 7f       	andi	r24, 0xF0	; 240
     70c:	98 27       	eor	r25, r24
     70e:	fc 01       	movw	r30, r24
     710:	ec 5f       	subi	r30, 0xFC	; 252
     712:	fd 4f       	sbci	r31, 0xFD	; 253
     714:	31 83       	std	Z+1, r19	; 0x01
     716:	20 83       	st	Z, r18
     718:	ca 01       	movw	r24, r20
     71a:	8e 30       	cpi	r24, 0x0E	; 14
     71c:	91 05       	cpc	r25, r1
     71e:	2c f3       	brlt	.-54     	; 0x6ea <initialize+0x12>
     720:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <messages+0xe1>
     724:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <messages+0xe0>
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	15 c0       	rjmp	.+42     	; 0x758 <initialize+0x80>
     72e:	ac 01       	movw	r20, r24
     730:	4f 5f       	subi	r20, 0xFF	; 255
     732:	5f 4f       	sbci	r21, 0xFF	; 255
     734:	6d e1       	ldi	r22, 0x1D	; 29
     736:	64 9f       	mul	r22, r20
     738:	90 01       	movw	r18, r0
     73a:	65 9f       	mul	r22, r21
     73c:	30 0d       	add	r19, r0
     73e:	11 24       	eor	r1, r1
     740:	21 5b       	subi	r18, 0xB1	; 177
     742:	3e 4f       	sbci	r19, 0xFE	; 254
     744:	68 9f       	mul	r22, r24
     746:	f0 01       	movw	r30, r0
     748:	69 9f       	mul	r22, r25
     74a:	f0 0d       	add	r31, r0
     74c:	11 24       	eor	r1, r1
     74e:	e1 5b       	subi	r30, 0xB1	; 177
     750:	fe 4f       	sbci	r31, 0xFE	; 254
     752:	31 83       	std	Z+1, r19	; 0x01
     754:	20 83       	st	Z, r18
     756:	ca 01       	movw	r24, r20
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	91 05       	cpc	r25, r1
     75c:	44 f3       	brlt	.-48     	; 0x72e <initialize+0x56>
     75e:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <threads+0x58>
     762:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <threads+0x57>
     766:	1a 82       	std	Y+2, r1	; 0x02
     768:	19 82       	std	Y+1, r1	; 0x01
     76a:	32 c0       	rjmp	.+100    	; 0x7d0 <initialize+0xf8>
     76c:	2d e1       	ldi	r18, 0x1D	; 29
     76e:	49 81       	ldd	r20, Y+1	; 0x01
     770:	5a 81       	ldd	r21, Y+2	; 0x02
     772:	24 9f       	mul	r18, r20
     774:	c0 01       	movw	r24, r0
     776:	25 9f       	mul	r18, r21
     778:	90 0d       	add	r25, r0
     77a:	11 24       	eor	r1, r1
     77c:	fc 01       	movw	r30, r24
     77e:	eb 5a       	subi	r30, 0xAB	; 171
     780:	fe 4f       	sbci	r31, 0xFE	; 254
     782:	fc 83       	std	Y+4, r31	; 0x04
     784:	eb 83       	std	Y+3, r30	; 0x03
     786:	cf 01       	movw	r24, r30
     788:	0e 94 20 11 	call	0x2240	; 0x2240 <setjmp>
     78c:	20 e6       	ldi	r18, 0x60	; 96
     78e:	49 81       	ldd	r20, Y+1	; 0x01
     790:	5a 81       	ldd	r21, Y+2	; 0x02
     792:	24 9f       	mul	r18, r20
     794:	c0 01       	movw	r24, r0
     796:	25 9f       	mul	r18, r21
     798:	90 0d       	add	r25, r0
     79a:	11 24       	eor	r1, r1
     79c:	80 5b       	subi	r24, 0xB0	; 176
     79e:	9c 4f       	sbci	r25, 0xFC	; 252
     7a0:	eb 81       	ldd	r30, Y+3	; 0x03
     7a2:	fc 81       	ldd	r31, Y+4	; 0x04
     7a4:	91 8b       	std	Z+17, r25	; 0x11
     7a6:	80 8b       	std	Z+16, r24	; 0x10
     7a8:	93 8b       	std	Z+19, r25	; 0x13
     7aa:	82 8b       	std	Z+18, r24	; 0x12
     7ac:	88 e4       	ldi	r24, 0x48	; 72
     7ae:	9f e0       	ldi	r25, 0x0F	; 15
     7b0:	96 8b       	std	Z+22, r25	; 0x16
     7b2:	85 8b       	std	Z+21, r24	; 0x15
     7b4:	8d e1       	ldi	r24, 0x1D	; 29
     7b6:	84 9f       	mul	r24, r20
     7b8:	f0 01       	movw	r30, r0
     7ba:	85 9f       	mul	r24, r21
     7bc:	f0 0d       	add	r31, r0
     7be:	11 24       	eor	r1, r1
     7c0:	e1 5b       	subi	r30, 0xB1	; 177
     7c2:	fe 4f       	sbci	r31, 0xFE	; 254
     7c4:	15 82       	std	Z+5, r1	; 0x05
     7c6:	14 82       	std	Z+4, r1	; 0x04
     7c8:	4f 5f       	subi	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	5a 83       	std	Y+2, r21	; 0x02
     7ce:	49 83       	std	Y+1, r20	; 0x01
     7d0:	29 81       	ldd	r18, Y+1	; 0x01
     7d2:	3a 81       	ldd	r19, Y+2	; 0x02
     7d4:	24 30       	cpi	r18, 0x04	; 4
     7d6:	31 05       	cpc	r19, r1
     7d8:	4c f2       	brlt	.-110    	; 0x76c <initialize+0x94>
     7da:	e7 ee       	ldi	r30, 0xE7	; 231
     7dc:	f1 e0       	ldi	r31, 0x01	; 1
     7de:	11 82       	std	Z+1, r1	; 0x01
     7e0:	10 82       	st	Z, r1
     7e2:	15 82       	std	Z+5, r1	; 0x05
     7e4:	14 82       	std	Z+4, r1	; 0x04
     7e6:	13 82       	std	Z+3, r1	; 0x03
     7e8:	12 82       	std	Z+2, r1	; 0x02
     7ea:	e1 e6       	ldi	r30, 0x61	; 97
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	80 e8       	ldi	r24, 0x80	; 128
     7f0:	80 83       	st	Z, r24
     7f2:	10 82       	st	Z, r1
     7f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     7f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     7fc:	84 e0       	ldi	r24, 0x04	; 4
     7fe:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <dispatch>:
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	00 d0       	rcall	.+0      	; 0x81c <dispatch+0x6>
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	9a 83       	std	Y+2, r25	; 0x02
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     828:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     82c:	06 96       	adiw	r24, 0x06	; 6
     82e:	0e 94 20 11 	call	0x2240	; 0x2240 <setjmp>
     832:	89 2b       	or	r24, r25
     834:	59 f4       	brne	.+22     	; 0x84c <dispatch+0x36>
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	9a 81       	ldd	r25, Y+2	; 0x02
     83a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     83e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	06 96       	adiw	r24, 0x06	; 6
     848:	0e 94 40 11 	call	0x2280	; 0x2280 <longjmp>
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <enqueueByDeadline>:
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	dc 01       	movw	r26, r24
     860:	cb 01       	movw	r24, r22
     862:	eb 01       	movw	r28, r22
     864:	e8 81       	ld	r30, Y
     866:	f9 81       	ldd	r31, Y+1	; 0x01
     868:	c0 e0       	ldi	r28, 0x00	; 0
     86a:	d0 e0       	ldi	r29, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <enqueueByDeadline+0x20>
     86e:	ef 01       	movw	r28, r30
     870:	01 90       	ld	r0, Z+
     872:	f0 81       	ld	r31, Z
     874:	e0 2d       	mov	r30, r0
     876:	30 97       	sbiw	r30, 0x00	; 0
     878:	79 f0       	breq	.+30     	; 0x898 <enqueueByDeadline+0x42>
     87a:	06 81       	ldd	r16, Z+6	; 0x06
     87c:	17 81       	ldd	r17, Z+7	; 0x07
     87e:	20 85       	ldd	r18, Z+8	; 0x08
     880:	31 85       	ldd	r19, Z+9	; 0x09
     882:	16 96       	adiw	r26, 0x06	; 6
     884:	4d 91       	ld	r20, X+
     886:	5d 91       	ld	r21, X+
     888:	6d 91       	ld	r22, X+
     88a:	7c 91       	ld	r23, X
     88c:	19 97       	sbiw	r26, 0x09	; 9
     88e:	40 17       	cp	r20, r16
     890:	51 07       	cpc	r21, r17
     892:	62 07       	cpc	r22, r18
     894:	73 07       	cpc	r23, r19
     896:	5c f7       	brge	.-42     	; 0x86e <enqueueByDeadline+0x18>
     898:	11 96       	adiw	r26, 0x01	; 1
     89a:	fc 93       	st	X, r31
     89c:	ee 93       	st	-X, r30
     89e:	20 97       	sbiw	r28, 0x00	; 0
     8a0:	21 f4       	brne	.+8      	; 0x8aa <enqueueByDeadline+0x54>
     8a2:	fc 01       	movw	r30, r24
     8a4:	b1 83       	std	Z+1, r27	; 0x01
     8a6:	a0 83       	st	Z, r26
     8a8:	02 c0       	rjmp	.+4      	; 0x8ae <enqueueByDeadline+0x58>
     8aa:	b9 83       	std	Y+1, r27	; 0x01
     8ac:	a8 83       	st	Y, r26
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	08 95       	ret

000008b8 <enqueueByBaseline>:
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	dc 01       	movw	r26, r24
     8c2:	cb 01       	movw	r24, r22
     8c4:	eb 01       	movw	r28, r22
     8c6:	e8 81       	ld	r30, Y
     8c8:	f9 81       	ldd	r31, Y+1	; 0x01
     8ca:	c0 e0       	ldi	r28, 0x00	; 0
     8cc:	d0 e0       	ldi	r29, 0x00	; 0
     8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <enqueueByBaseline+0x20>
     8d0:	ef 01       	movw	r28, r30
     8d2:	01 90       	ld	r0, Z+
     8d4:	f0 81       	ld	r31, Z
     8d6:	e0 2d       	mov	r30, r0
     8d8:	30 97       	sbiw	r30, 0x00	; 0
     8da:	79 f0       	breq	.+30     	; 0x8fa <enqueueByBaseline+0x42>
     8dc:	02 81       	ldd	r16, Z+2	; 0x02
     8de:	13 81       	ldd	r17, Z+3	; 0x03
     8e0:	24 81       	ldd	r18, Z+4	; 0x04
     8e2:	35 81       	ldd	r19, Z+5	; 0x05
     8e4:	12 96       	adiw	r26, 0x02	; 2
     8e6:	4d 91       	ld	r20, X+
     8e8:	5d 91       	ld	r21, X+
     8ea:	6d 91       	ld	r22, X+
     8ec:	7c 91       	ld	r23, X
     8ee:	15 97       	sbiw	r26, 0x05	; 5
     8f0:	40 17       	cp	r20, r16
     8f2:	51 07       	cpc	r21, r17
     8f4:	62 07       	cpc	r22, r18
     8f6:	73 07       	cpc	r23, r19
     8f8:	5c f7       	brge	.-42     	; 0x8d0 <enqueueByBaseline+0x18>
     8fa:	11 96       	adiw	r26, 0x01	; 1
     8fc:	fc 93       	st	X, r31
     8fe:	ee 93       	st	-X, r30
     900:	20 97       	sbiw	r28, 0x00	; 0
     902:	21 f4       	brne	.+8      	; 0x90c <enqueueByBaseline+0x54>
     904:	fc 01       	movw	r30, r24
     906:	b1 83       	std	Z+1, r27	; 0x01
     908:	a0 83       	st	Z, r26
     90a:	02 c0       	rjmp	.+4      	; 0x910 <enqueueByBaseline+0x58>
     90c:	b9 83       	std	Y+1, r27	; 0x01
     90e:	a8 83       	st	Y, r26
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <dequeue>:
     91a:	dc 01       	movw	r26, r24
     91c:	ed 91       	ld	r30, X+
     91e:	fc 91       	ld	r31, X
     920:	11 97       	sbiw	r26, 0x01	; 1
     922:	30 97       	sbiw	r30, 0x00	; 0
     924:	59 f4       	brne	.+22     	; 0x93c <dequeue+0x22>
     926:	8f ef       	ldi	r24, 0xFF	; 255
     928:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     92c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     930:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	83 bf       	out	0x33, r24	; 51
     938:	88 95       	sleep
     93a:	fc cf       	rjmp	.-8      	; 0x934 <dequeue+0x1a>
     93c:	20 81       	ld	r18, Z
     93e:	31 81       	ldd	r19, Z+1	; 0x01
     940:	2d 93       	st	X+, r18
     942:	3c 93       	st	X, r19
     944:	cf 01       	movw	r24, r30
     946:	08 95       	ret

00000948 <insert>:
     948:	fb 01       	movw	r30, r22
     94a:	20 81       	ld	r18, Z
     94c:	31 81       	ldd	r19, Z+1	; 0x01
     94e:	fc 01       	movw	r30, r24
     950:	31 83       	std	Z+1, r19	; 0x01
     952:	20 83       	st	Z, r18
     954:	fb 01       	movw	r30, r22
     956:	91 83       	std	Z+1, r25	; 0x01
     958:	80 83       	st	Z, r24
     95a:	08 95       	ret

0000095c <push>:
     95c:	fb 01       	movw	r30, r22
     95e:	20 81       	ld	r18, Z
     960:	31 81       	ldd	r19, Z+1	; 0x01
     962:	fc 01       	movw	r30, r24
     964:	31 83       	std	Z+1, r19	; 0x01
     966:	20 83       	st	Z, r18
     968:	fb 01       	movw	r30, r22
     96a:	91 83       	std	Z+1, r25	; 0x01
     96c:	80 83       	st	Z, r24
     96e:	08 95       	ret

00000970 <pop>:
     970:	dc 01       	movw	r26, r24
     972:	ed 91       	ld	r30, X+
     974:	fc 91       	ld	r31, X
     976:	11 97       	sbiw	r26, 0x01	; 1
     978:	20 81       	ld	r18, Z
     97a:	31 81       	ldd	r19, Z+1	; 0x01
     97c:	2d 93       	st	X+, r18
     97e:	3c 93       	st	X, r19
     980:	cf 01       	movw	r24, r30
     982:	08 95       	ret

00000984 <schedule>:
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
     98c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
     990:	c2 81       	ldd	r28, Z+2	; 0x02
     992:	d3 81       	ldd	r29, Z+3	; 0x03
     994:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <msgQ>
     998:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <msgQ+0x1>
     99c:	30 97       	sbiw	r30, 0x00	; 0
     99e:	19 f1       	breq	.+70     	; 0x9e6 <schedule+0x62>
     9a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     9a4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     9a8:	89 2b       	or	r24, r25
     9aa:	e9 f0       	breq	.+58     	; 0x9e6 <schedule+0x62>
     9ac:	20 97       	sbiw	r28, 0x00	; 0
     9ae:	69 f0       	breq	.+26     	; 0x9ca <schedule+0x46>
     9b0:	86 81       	ldd	r24, Z+6	; 0x06
     9b2:	97 81       	ldd	r25, Z+7	; 0x07
     9b4:	a0 85       	ldd	r26, Z+8	; 0x08
     9b6:	b1 85       	ldd	r27, Z+9	; 0x09
     9b8:	4e 81       	ldd	r20, Y+6	; 0x06
     9ba:	5f 81       	ldd	r21, Y+7	; 0x07
     9bc:	68 85       	ldd	r22, Y+8	; 0x08
     9be:	79 85       	ldd	r23, Y+9	; 0x09
     9c0:	84 1b       	sub	r24, r20
     9c2:	95 0b       	sbc	r25, r21
     9c4:	a6 0b       	sbc	r26, r22
     9c6:	b7 0b       	sbc	r27, r23
     9c8:	72 f4       	brpl	.+28     	; 0x9e6 <schedule+0x62>
     9ca:	84 e0       	ldi	r24, 0x04	; 4
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 b8 04 	call	0x970	; 0x970 <pop>
     9d2:	62 e0       	ldi	r22, 0x02	; 2
     9d4:	71 e0       	ldi	r23, 0x01	; 1
     9d6:	0e 94 ae 04 	call	0x95c	; 0x95c <push>
     9da:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
     9de:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
     9e2:	0e 94 0b 04 	call	0x816	; 0x816 <dispatch>
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <__vector_1>:
     9ec:	1f 92       	push	r1
     9ee:	0f 92       	push	r0
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	0f 92       	push	r0
     9f4:	11 24       	eor	r1, r1
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	2f 93       	push	r18
     9fc:	3f 93       	push	r19
     9fe:	4f 93       	push	r20
     a00:	5f 93       	push	r21
     a02:	6f 93       	push	r22
     a04:	7f 93       	push	r23
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	af 93       	push	r26
     a0c:	bf 93       	push	r27
     a0e:	ef 93       	push	r30
     a10:	ff 93       	push	r31
     a12:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     a16:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     a1a:	ac 01       	movw	r20, r24
     a1c:	09 2e       	mov	r0, r25
     a1e:	00 0c       	add	r0, r0
     a20:	66 0b       	sbc	r22, r22
     a22:	77 0b       	sbc	r23, r23
     a24:	9a 01       	movw	r18, r20
     a26:	11 27       	eor	r17, r17
     a28:	00 27       	eor	r16, r16
     a2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	40 2b       	or	r20, r16
     a38:	51 2b       	or	r21, r17
     a3a:	62 2b       	or	r22, r18
     a3c:	73 2b       	or	r23, r19
     a3e:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     a42:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     a46:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     a4a:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     a4e:	b0 9b       	sbis	0x16, 0	; 22
     a50:	1a c0       	rjmp	.+52     	; 0xa86 <__vector_1+0x9a>
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	09 2e       	mov	r0, r25
     a56:	00 0c       	add	r0, r0
     a58:	aa 0b       	sbc	r26, r26
     a5a:	bb 0b       	sbc	r27, r27
     a5c:	bc 01       	movw	r22, r24
     a5e:	55 27       	eor	r21, r21
     a60:	44 27       	eor	r20, r20
     a62:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a66:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a6a:	a0 e0       	ldi	r26, 0x00	; 0
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	84 2b       	or	r24, r20
     a70:	95 2b       	or	r25, r21
     a72:	a6 2b       	or	r26, r22
     a74:	b7 2b       	or	r27, r23
     a76:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     a7a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     a7e:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     a82:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     a86:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <mtable>
     a8a:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <mtable+0x1>
     a8e:	30 97       	sbiw	r30, 0x00	; 0
     a90:	39 f0       	breq	.+14     	; 0xaa0 <__vector_1+0xb4>
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <otable>
     a9a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <otable+0x1>
     a9e:	09 95       	icall
     aa0:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
     aa4:	ff 91       	pop	r31
     aa6:	ef 91       	pop	r30
     aa8:	bf 91       	pop	r27
     aaa:	af 91       	pop	r26
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	7f 91       	pop	r23
     ab2:	6f 91       	pop	r22
     ab4:	5f 91       	pop	r21
     ab6:	4f 91       	pop	r20
     ab8:	3f 91       	pop	r19
     aba:	2f 91       	pop	r18
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_2>:
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	2f 93       	push	r18
     ada:	3f 93       	push	r19
     adc:	4f 93       	push	r20
     ade:	5f 93       	push	r21
     ae0:	6f 93       	push	r22
     ae2:	7f 93       	push	r23
     ae4:	8f 93       	push	r24
     ae6:	9f 93       	push	r25
     ae8:	af 93       	push	r26
     aea:	bf 93       	push	r27
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
     af0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     af4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     af8:	ac 01       	movw	r20, r24
     afa:	09 2e       	mov	r0, r25
     afc:	00 0c       	add	r0, r0
     afe:	66 0b       	sbc	r22, r22
     b00:	77 0b       	sbc	r23, r23
     b02:	9a 01       	movw	r18, r20
     b04:	11 27       	eor	r17, r17
     b06:	00 27       	eor	r16, r16
     b08:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b0c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	40 2b       	or	r20, r16
     b16:	51 2b       	or	r21, r17
     b18:	62 2b       	or	r22, r18
     b1a:	73 2b       	or	r23, r19
     b1c:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     b20:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     b24:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     b28:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     b2c:	b0 9b       	sbis	0x16, 0	; 22
     b2e:	1a c0       	rjmp	.+52     	; 0xb64 <__vector_2+0x9a>
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	09 2e       	mov	r0, r25
     b34:	00 0c       	add	r0, r0
     b36:	aa 0b       	sbc	r26, r26
     b38:	bb 0b       	sbc	r27, r27
     b3a:	bc 01       	movw	r22, r24
     b3c:	55 27       	eor	r21, r21
     b3e:	44 27       	eor	r20, r20
     b40:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b44:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b48:	a0 e0       	ldi	r26, 0x00	; 0
     b4a:	b0 e0       	ldi	r27, 0x00	; 0
     b4c:	84 2b       	or	r24, r20
     b4e:	95 2b       	or	r25, r21
     b50:	a6 2b       	or	r26, r22
     b52:	b7 2b       	or	r27, r23
     b54:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     b58:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     b5c:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     b60:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     b64:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <mtable+0x2>
     b68:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <mtable+0x3>
     b6c:	30 97       	sbiw	r30, 0x00	; 0
     b6e:	39 f0       	breq	.+14     	; 0xb7e <__vector_2+0xb4>
     b70:	61 e0       	ldi	r22, 0x01	; 1
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <otable+0x2>
     b78:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <otable+0x3>
     b7c:	09 95       	icall
     b7e:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
     b82:	ff 91       	pop	r31
     b84:	ef 91       	pop	r30
     b86:	bf 91       	pop	r27
     b88:	af 91       	pop	r26
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	7f 91       	pop	r23
     b90:	6f 91       	pop	r22
     b92:	5f 91       	pop	r21
     b94:	4f 91       	pop	r20
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0f 90       	pop	r0
     ba4:	1f 90       	pop	r1
     ba6:	18 95       	reti

00000ba8 <__vector_3>:
     ba8:	1f 92       	push	r1
     baa:	0f 92       	push	r0
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	0f 92       	push	r0
     bb0:	11 24       	eor	r1, r1
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     bd2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     bd6:	ac 01       	movw	r20, r24
     bd8:	09 2e       	mov	r0, r25
     bda:	00 0c       	add	r0, r0
     bdc:	66 0b       	sbc	r22, r22
     bde:	77 0b       	sbc	r23, r23
     be0:	9a 01       	movw	r18, r20
     be2:	11 27       	eor	r17, r17
     be4:	00 27       	eor	r16, r16
     be6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	40 2b       	or	r20, r16
     bf4:	51 2b       	or	r21, r17
     bf6:	62 2b       	or	r22, r18
     bf8:	73 2b       	or	r23, r19
     bfa:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     bfe:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     c02:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     c06:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     c0a:	b0 9b       	sbis	0x16, 0	; 22
     c0c:	1a c0       	rjmp	.+52     	; 0xc42 <__vector_3+0x9a>
     c0e:	01 96       	adiw	r24, 0x01	; 1
     c10:	09 2e       	mov	r0, r25
     c12:	00 0c       	add	r0, r0
     c14:	aa 0b       	sbc	r26, r26
     c16:	bb 0b       	sbc	r27, r27
     c18:	bc 01       	movw	r22, r24
     c1a:	55 27       	eor	r21, r21
     c1c:	44 27       	eor	r20, r20
     c1e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c22:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c26:	a0 e0       	ldi	r26, 0x00	; 0
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	84 2b       	or	r24, r20
     c2c:	95 2b       	or	r25, r21
     c2e:	a6 2b       	or	r26, r22
     c30:	b7 2b       	or	r27, r23
     c32:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     c36:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     c3a:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     c3e:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     c42:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <mtable+0x4>
     c46:	f0 91 c8 01 	lds	r31, 0x01C8	; 0x8001c8 <mtable+0x5>
     c4a:	30 97       	sbiw	r30, 0x00	; 0
     c4c:	39 f0       	breq	.+14     	; 0xc5c <__vector_3+0xb4>
     c4e:	62 e0       	ldi	r22, 0x02	; 2
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <otable+0x4>
     c56:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <otable+0x5>
     c5a:	09 95       	icall
     c5c:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
     c60:	ff 91       	pop	r31
     c62:	ef 91       	pop	r30
     c64:	bf 91       	pop	r27
     c66:	af 91       	pop	r26
     c68:	9f 91       	pop	r25
     c6a:	8f 91       	pop	r24
     c6c:	7f 91       	pop	r23
     c6e:	6f 91       	pop	r22
     c70:	5f 91       	pop	r21
     c72:	4f 91       	pop	r20
     c74:	3f 91       	pop	r19
     c76:	2f 91       	pop	r18
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0
     c82:	1f 90       	pop	r1
     c84:	18 95       	reti

00000c86 <__vector_4>:
     c86:	1f 92       	push	r1
     c88:	0f 92       	push	r0
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	0f 92       	push	r0
     c8e:	11 24       	eor	r1, r1
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	2f 93       	push	r18
     c96:	3f 93       	push	r19
     c98:	4f 93       	push	r20
     c9a:	5f 93       	push	r21
     c9c:	6f 93       	push	r22
     c9e:	7f 93       	push	r23
     ca0:	8f 93       	push	r24
     ca2:	9f 93       	push	r25
     ca4:	af 93       	push	r26
     ca6:	bf 93       	push	r27
     ca8:	ef 93       	push	r30
     caa:	ff 93       	push	r31
     cac:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     cb0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     cb4:	ac 01       	movw	r20, r24
     cb6:	09 2e       	mov	r0, r25
     cb8:	00 0c       	add	r0, r0
     cba:	66 0b       	sbc	r22, r22
     cbc:	77 0b       	sbc	r23, r23
     cbe:	9a 01       	movw	r18, r20
     cc0:	11 27       	eor	r17, r17
     cc2:	00 27       	eor	r16, r16
     cc4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cc8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	40 2b       	or	r20, r16
     cd2:	51 2b       	or	r21, r17
     cd4:	62 2b       	or	r22, r18
     cd6:	73 2b       	or	r23, r19
     cd8:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     cdc:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     ce0:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     ce4:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     ce8:	b0 9b       	sbis	0x16, 0	; 22
     cea:	1a c0       	rjmp	.+52     	; 0xd20 <__vector_4+0x9a>
     cec:	01 96       	adiw	r24, 0x01	; 1
     cee:	09 2e       	mov	r0, r25
     cf0:	00 0c       	add	r0, r0
     cf2:	aa 0b       	sbc	r26, r26
     cf4:	bb 0b       	sbc	r27, r27
     cf6:	bc 01       	movw	r22, r24
     cf8:	55 27       	eor	r21, r21
     cfa:	44 27       	eor	r20, r20
     cfc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d00:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d04:	a0 e0       	ldi	r26, 0x00	; 0
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	84 2b       	or	r24, r20
     d0a:	95 2b       	or	r25, r21
     d0c:	a6 2b       	or	r26, r22
     d0e:	b7 2b       	or	r27, r23
     d10:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     d14:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     d18:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     d1c:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     d20:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <mtable+0x6>
     d24:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <mtable+0x7>
     d28:	30 97       	sbiw	r30, 0x00	; 0
     d2a:	39 f0       	breq	.+14     	; 0xd3a <__vector_4+0xb4>
     d2c:	63 e0       	ldi	r22, 0x03	; 3
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <otable+0x6>
     d34:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <otable+0x7>
     d38:	09 95       	icall
     d3a:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
     d3e:	ff 91       	pop	r31
     d40:	ef 91       	pop	r30
     d42:	bf 91       	pop	r27
     d44:	af 91       	pop	r26
     d46:	9f 91       	pop	r25
     d48:	8f 91       	pop	r24
     d4a:	7f 91       	pop	r23
     d4c:	6f 91       	pop	r22
     d4e:	5f 91       	pop	r21
     d50:	4f 91       	pop	r20
     d52:	3f 91       	pop	r19
     d54:	2f 91       	pop	r18
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	0f 90       	pop	r0
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	0f 90       	pop	r0
     d60:	1f 90       	pop	r1
     d62:	18 95       	reti

00000d64 <__vector_5>:
     d64:	1f 92       	push	r1
     d66:	0f 92       	push	r0
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	0f 92       	push	r0
     d6c:	11 24       	eor	r1, r1
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
     d8a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     d8e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     d92:	ac 01       	movw	r20, r24
     d94:	09 2e       	mov	r0, r25
     d96:	00 0c       	add	r0, r0
     d98:	66 0b       	sbc	r22, r22
     d9a:	77 0b       	sbc	r23, r23
     d9c:	9a 01       	movw	r18, r20
     d9e:	11 27       	eor	r17, r17
     da0:	00 27       	eor	r16, r16
     da2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     da6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	40 2b       	or	r20, r16
     db0:	51 2b       	or	r21, r17
     db2:	62 2b       	or	r22, r18
     db4:	73 2b       	or	r23, r19
     db6:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     dba:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     dbe:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     dc2:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     dc6:	b0 9b       	sbis	0x16, 0	; 22
     dc8:	1a c0       	rjmp	.+52     	; 0xdfe <__vector_5+0x9a>
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	09 2e       	mov	r0, r25
     dce:	00 0c       	add	r0, r0
     dd0:	aa 0b       	sbc	r26, r26
     dd2:	bb 0b       	sbc	r27, r27
     dd4:	bc 01       	movw	r22, r24
     dd6:	55 27       	eor	r21, r21
     dd8:	44 27       	eor	r20, r20
     dda:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dde:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     de2:	a0 e0       	ldi	r26, 0x00	; 0
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	84 2b       	or	r24, r20
     de8:	95 2b       	or	r25, r21
     dea:	a6 2b       	or	r26, r22
     dec:	b7 2b       	or	r27, r23
     dee:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     df2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     df6:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     dfa:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     dfe:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <mtable+0x8>
     e02:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <mtable+0x9>
     e06:	30 97       	sbiw	r30, 0x00	; 0
     e08:	39 f0       	breq	.+14     	; 0xe18 <__vector_5+0xb4>
     e0a:	64 e0       	ldi	r22, 0x04	; 4
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <otable+0x8>
     e12:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <otable+0x9>
     e16:	09 95       	icall
     e18:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
     e1c:	ff 91       	pop	r31
     e1e:	ef 91       	pop	r30
     e20:	bf 91       	pop	r27
     e22:	af 91       	pop	r26
     e24:	9f 91       	pop	r25
     e26:	8f 91       	pop	r24
     e28:	7f 91       	pop	r23
     e2a:	6f 91       	pop	r22
     e2c:	5f 91       	pop	r21
     e2e:	4f 91       	pop	r20
     e30:	3f 91       	pop	r19
     e32:	2f 91       	pop	r18
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	0f 90       	pop	r0
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <__vector_10>:
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	0f 92       	push	r0
     e4a:	11 24       	eor	r1, r1
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	2f 93       	push	r18
     e52:	3f 93       	push	r19
     e54:	4f 93       	push	r20
     e56:	5f 93       	push	r21
     e58:	6f 93       	push	r22
     e5a:	7f 93       	push	r23
     e5c:	8f 93       	push	r24
     e5e:	9f 93       	push	r25
     e60:	af 93       	push	r26
     e62:	bf 93       	push	r27
     e64:	ef 93       	push	r30
     e66:	ff 93       	push	r31
     e68:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     e6c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     e70:	ac 01       	movw	r20, r24
     e72:	09 2e       	mov	r0, r25
     e74:	00 0c       	add	r0, r0
     e76:	66 0b       	sbc	r22, r22
     e78:	77 0b       	sbc	r23, r23
     e7a:	9a 01       	movw	r18, r20
     e7c:	11 27       	eor	r17, r17
     e7e:	00 27       	eor	r16, r16
     e80:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e84:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	40 2b       	or	r20, r16
     e8e:	51 2b       	or	r21, r17
     e90:	62 2b       	or	r22, r18
     e92:	73 2b       	or	r23, r19
     e94:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     e98:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     e9c:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     ea0:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     ea4:	b0 9b       	sbis	0x16, 0	; 22
     ea6:	1a c0       	rjmp	.+52     	; 0xedc <__vector_10+0x9a>
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	09 2e       	mov	r0, r25
     eac:	00 0c       	add	r0, r0
     eae:	aa 0b       	sbc	r26, r26
     eb0:	bb 0b       	sbc	r27, r27
     eb2:	bc 01       	movw	r22, r24
     eb4:	55 27       	eor	r21, r21
     eb6:	44 27       	eor	r20, r20
     eb8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ebc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ec0:	a0 e0       	ldi	r26, 0x00	; 0
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	84 2b       	or	r24, r20
     ec6:	95 2b       	or	r25, r21
     ec8:	a6 2b       	or	r26, r22
     eca:	b7 2b       	or	r27, r23
     ecc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     ed0:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     ed4:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     ed8:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     edc:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <mtable+0xa>
     ee0:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <mtable+0xb>
     ee4:	30 97       	sbiw	r30, 0x00	; 0
     ee6:	39 f0       	breq	.+14     	; 0xef6 <__vector_10+0xb4>
     ee8:	65 e0       	ldi	r22, 0x05	; 5
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <otable+0xa>
     ef0:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <otable+0xb>
     ef4:	09 95       	icall
     ef6:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
     efa:	ff 91       	pop	r31
     efc:	ef 91       	pop	r30
     efe:	bf 91       	pop	r27
     f00:	af 91       	pop	r26
     f02:	9f 91       	pop	r25
     f04:	8f 91       	pop	r24
     f06:	7f 91       	pop	r23
     f08:	6f 91       	pop	r22
     f0a:	5f 91       	pop	r21
     f0c:	4f 91       	pop	r20
     f0e:	3f 91       	pop	r19
     f10:	2f 91       	pop	r18
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	0f 90       	pop	r0
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	0f 90       	pop	r0
     f1c:	1f 90       	pop	r1
     f1e:	18 95       	reti

00000f20 <__vector_11>:
     f20:	1f 92       	push	r1
     f22:	0f 92       	push	r0
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	0f 92       	push	r0
     f28:	11 24       	eor	r1, r1
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	2f 93       	push	r18
     f30:	3f 93       	push	r19
     f32:	4f 93       	push	r20
     f34:	5f 93       	push	r21
     f36:	6f 93       	push	r22
     f38:	7f 93       	push	r23
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
     f3e:	af 93       	push	r26
     f40:	bf 93       	push	r27
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
     f46:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     f4a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     f4e:	ac 01       	movw	r20, r24
     f50:	09 2e       	mov	r0, r25
     f52:	00 0c       	add	r0, r0
     f54:	66 0b       	sbc	r22, r22
     f56:	77 0b       	sbc	r23, r23
     f58:	9a 01       	movw	r18, r20
     f5a:	11 27       	eor	r17, r17
     f5c:	00 27       	eor	r16, r16
     f5e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f62:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	40 2b       	or	r20, r16
     f6c:	51 2b       	or	r21, r17
     f6e:	62 2b       	or	r22, r18
     f70:	73 2b       	or	r23, r19
     f72:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     f76:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     f7a:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     f7e:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     f82:	b0 9b       	sbis	0x16, 0	; 22
     f84:	1a c0       	rjmp	.+52     	; 0xfba <__vector_11+0x9a>
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	09 2e       	mov	r0, r25
     f8a:	00 0c       	add	r0, r0
     f8c:	aa 0b       	sbc	r26, r26
     f8e:	bb 0b       	sbc	r27, r27
     f90:	bc 01       	movw	r22, r24
     f92:	55 27       	eor	r21, r21
     f94:	44 27       	eor	r20, r20
     f96:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f9a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f9e:	a0 e0       	ldi	r26, 0x00	; 0
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	84 2b       	or	r24, r20
     fa4:	95 2b       	or	r25, r21
     fa6:	a6 2b       	or	r26, r22
     fa8:	b7 2b       	or	r27, r23
     faa:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     fae:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     fb2:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     fb6:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     fba:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <mtable+0xc>
     fbe:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <mtable+0xd>
     fc2:	30 97       	sbiw	r30, 0x00	; 0
     fc4:	39 f0       	breq	.+14     	; 0xfd4 <__vector_11+0xb4>
     fc6:	66 e0       	ldi	r22, 0x06	; 6
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <otable+0xc>
     fce:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <otable+0xd>
     fd2:	09 95       	icall
     fd4:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
     fd8:	ff 91       	pop	r31
     fda:	ef 91       	pop	r30
     fdc:	bf 91       	pop	r27
     fde:	af 91       	pop	r26
     fe0:	9f 91       	pop	r25
     fe2:	8f 91       	pop	r24
     fe4:	7f 91       	pop	r23
     fe6:	6f 91       	pop	r22
     fe8:	5f 91       	pop	r21
     fea:	4f 91       	pop	r20
     fec:	3f 91       	pop	r19
     fee:	2f 91       	pop	r18
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_12>:
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	ef 93       	push	r30
    1022:	ff 93       	push	r31
    1024:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    1028:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    102c:	ac 01       	movw	r20, r24
    102e:	09 2e       	mov	r0, r25
    1030:	00 0c       	add	r0, r0
    1032:	66 0b       	sbc	r22, r22
    1034:	77 0b       	sbc	r23, r23
    1036:	9a 01       	movw	r18, r20
    1038:	11 27       	eor	r17, r17
    103a:	00 27       	eor	r16, r16
    103c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1040:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	40 2b       	or	r20, r16
    104a:	51 2b       	or	r21, r17
    104c:	62 2b       	or	r22, r18
    104e:	73 2b       	or	r23, r19
    1050:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1054:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    1058:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    105c:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    1060:	b0 9b       	sbis	0x16, 0	; 22
    1062:	1a c0       	rjmp	.+52     	; 0x1098 <__vector_12+0x9a>
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	09 2e       	mov	r0, r25
    1068:	00 0c       	add	r0, r0
    106a:	aa 0b       	sbc	r26, r26
    106c:	bb 0b       	sbc	r27, r27
    106e:	bc 01       	movw	r22, r24
    1070:	55 27       	eor	r21, r21
    1072:	44 27       	eor	r20, r20
    1074:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1078:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    107c:	a0 e0       	ldi	r26, 0x00	; 0
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	84 2b       	or	r24, r20
    1082:	95 2b       	or	r25, r21
    1084:	a6 2b       	or	r26, r22
    1086:	b7 2b       	or	r27, r23
    1088:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    108c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    1090:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1094:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1098:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <mtable+0xe>
    109c:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <mtable+0xf>
    10a0:	30 97       	sbiw	r30, 0x00	; 0
    10a2:	39 f0       	breq	.+14     	; 0x10b2 <__vector_12+0xb4>
    10a4:	67 e0       	ldi	r22, 0x07	; 7
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <otable+0xe>
    10ac:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <otable+0xf>
    10b0:	09 95       	icall
    10b2:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    10b6:	ff 91       	pop	r31
    10b8:	ef 91       	pop	r30
    10ba:	bf 91       	pop	r27
    10bc:	af 91       	pop	r26
    10be:	9f 91       	pop	r25
    10c0:	8f 91       	pop	r24
    10c2:	7f 91       	pop	r23
    10c4:	6f 91       	pop	r22
    10c6:	5f 91       	pop	r21
    10c8:	4f 91       	pop	r20
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	0f 90       	pop	r0
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	0f 90       	pop	r0
    10d8:	1f 90       	pop	r1
    10da:	18 95       	reti

000010dc <__vector_13>:
    10dc:	1f 92       	push	r1
    10de:	0f 92       	push	r0
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	0f 92       	push	r0
    10e4:	11 24       	eor	r1, r1
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	2f 93       	push	r18
    10ec:	3f 93       	push	r19
    10ee:	4f 93       	push	r20
    10f0:	5f 93       	push	r21
    10f2:	6f 93       	push	r22
    10f4:	7f 93       	push	r23
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	ef 93       	push	r30
    1100:	ff 93       	push	r31
    1102:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    1106:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    110a:	ac 01       	movw	r20, r24
    110c:	09 2e       	mov	r0, r25
    110e:	00 0c       	add	r0, r0
    1110:	66 0b       	sbc	r22, r22
    1112:	77 0b       	sbc	r23, r23
    1114:	9a 01       	movw	r18, r20
    1116:	11 27       	eor	r17, r17
    1118:	00 27       	eor	r16, r16
    111a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    111e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	40 2b       	or	r20, r16
    1128:	51 2b       	or	r21, r17
    112a:	62 2b       	or	r22, r18
    112c:	73 2b       	or	r23, r19
    112e:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1132:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    1136:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    113a:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    113e:	b0 9b       	sbis	0x16, 0	; 22
    1140:	1a c0       	rjmp	.+52     	; 0x1176 <__vector_13+0x9a>
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	09 2e       	mov	r0, r25
    1146:	00 0c       	add	r0, r0
    1148:	aa 0b       	sbc	r26, r26
    114a:	bb 0b       	sbc	r27, r27
    114c:	bc 01       	movw	r22, r24
    114e:	55 27       	eor	r21, r21
    1150:	44 27       	eor	r20, r20
    1152:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1156:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    115a:	a0 e0       	ldi	r26, 0x00	; 0
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	84 2b       	or	r24, r20
    1160:	95 2b       	or	r25, r21
    1162:	a6 2b       	or	r26, r22
    1164:	b7 2b       	or	r27, r23
    1166:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    116a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    116e:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1172:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1176:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <mtable+0x10>
    117a:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <mtable+0x11>
    117e:	30 97       	sbiw	r30, 0x00	; 0
    1180:	39 f0       	breq	.+14     	; 0x1190 <__vector_13+0xb4>
    1182:	68 e0       	ldi	r22, 0x08	; 8
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <otable+0x10>
    118a:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <otable+0x11>
    118e:	09 95       	icall
    1190:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    1194:	ff 91       	pop	r31
    1196:	ef 91       	pop	r30
    1198:	bf 91       	pop	r27
    119a:	af 91       	pop	r26
    119c:	9f 91       	pop	r25
    119e:	8f 91       	pop	r24
    11a0:	7f 91       	pop	r23
    11a2:	6f 91       	pop	r22
    11a4:	5f 91       	pop	r21
    11a6:	4f 91       	pop	r20
    11a8:	3f 91       	pop	r19
    11aa:	2f 91       	pop	r18
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	0f 90       	pop	r0
    11b6:	1f 90       	pop	r1
    11b8:	18 95       	reti

000011ba <__vector_14>:
    11ba:	1f 92       	push	r1
    11bc:	0f 92       	push	r0
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	0f 92       	push	r0
    11c2:	11 24       	eor	r1, r1
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	2f 93       	push	r18
    11ca:	3f 93       	push	r19
    11cc:	4f 93       	push	r20
    11ce:	5f 93       	push	r21
    11d0:	6f 93       	push	r22
    11d2:	7f 93       	push	r23
    11d4:	8f 93       	push	r24
    11d6:	9f 93       	push	r25
    11d8:	af 93       	push	r26
    11da:	bf 93       	push	r27
    11dc:	ef 93       	push	r30
    11de:	ff 93       	push	r31
    11e0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    11e4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    11e8:	ac 01       	movw	r20, r24
    11ea:	09 2e       	mov	r0, r25
    11ec:	00 0c       	add	r0, r0
    11ee:	66 0b       	sbc	r22, r22
    11f0:	77 0b       	sbc	r23, r23
    11f2:	9a 01       	movw	r18, r20
    11f4:	11 27       	eor	r17, r17
    11f6:	00 27       	eor	r16, r16
    11f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	40 2b       	or	r20, r16
    1206:	51 2b       	or	r21, r17
    1208:	62 2b       	or	r22, r18
    120a:	73 2b       	or	r23, r19
    120c:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1210:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    1214:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    1218:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    121c:	b0 9b       	sbis	0x16, 0	; 22
    121e:	1a c0       	rjmp	.+52     	; 0x1254 <__vector_14+0x9a>
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	09 2e       	mov	r0, r25
    1224:	00 0c       	add	r0, r0
    1226:	aa 0b       	sbc	r26, r26
    1228:	bb 0b       	sbc	r27, r27
    122a:	bc 01       	movw	r22, r24
    122c:	55 27       	eor	r21, r21
    122e:	44 27       	eor	r20, r20
    1230:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1234:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1238:	a0 e0       	ldi	r26, 0x00	; 0
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	84 2b       	or	r24, r20
    123e:	95 2b       	or	r25, r21
    1240:	a6 2b       	or	r26, r22
    1242:	b7 2b       	or	r27, r23
    1244:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    1248:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    124c:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1250:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1254:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <mtable+0x12>
    1258:	f0 91 d6 01 	lds	r31, 0x01D6	; 0x8001d6 <mtable+0x13>
    125c:	30 97       	sbiw	r30, 0x00	; 0
    125e:	39 f0       	breq	.+14     	; 0x126e <__vector_14+0xb4>
    1260:	69 e0       	ldi	r22, 0x09	; 9
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <otable+0x12>
    1268:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <otable+0x13>
    126c:	09 95       	icall
    126e:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	bf 91       	pop	r27
    1278:	af 91       	pop	r26
    127a:	9f 91       	pop	r25
    127c:	8f 91       	pop	r24
    127e:	7f 91       	pop	r23
    1280:	6f 91       	pop	r22
    1282:	5f 91       	pop	r21
    1284:	4f 91       	pop	r20
    1286:	3f 91       	pop	r19
    1288:	2f 91       	pop	r18
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	0f 90       	pop	r0
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	0f 90       	pop	r0
    1294:	1f 90       	pop	r1
    1296:	18 95       	reti

00001298 <__vector_15>:
    1298:	1f 92       	push	r1
    129a:	0f 92       	push	r0
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	0f 92       	push	r0
    12a0:	11 24       	eor	r1, r1
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	2f 93       	push	r18
    12a8:	3f 93       	push	r19
    12aa:	4f 93       	push	r20
    12ac:	5f 93       	push	r21
    12ae:	6f 93       	push	r22
    12b0:	7f 93       	push	r23
    12b2:	8f 93       	push	r24
    12b4:	9f 93       	push	r25
    12b6:	af 93       	push	r26
    12b8:	bf 93       	push	r27
    12ba:	ef 93       	push	r30
    12bc:	ff 93       	push	r31
    12be:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    12c2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    12c6:	ac 01       	movw	r20, r24
    12c8:	09 2e       	mov	r0, r25
    12ca:	00 0c       	add	r0, r0
    12cc:	66 0b       	sbc	r22, r22
    12ce:	77 0b       	sbc	r23, r23
    12d0:	9a 01       	movw	r18, r20
    12d2:	11 27       	eor	r17, r17
    12d4:	00 27       	eor	r16, r16
    12d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	40 2b       	or	r20, r16
    12e4:	51 2b       	or	r21, r17
    12e6:	62 2b       	or	r22, r18
    12e8:	73 2b       	or	r23, r19
    12ea:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    12ee:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    12f2:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    12f6:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    12fa:	b0 9b       	sbis	0x16, 0	; 22
    12fc:	1a c0       	rjmp	.+52     	; 0x1332 <__vector_15+0x9a>
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	09 2e       	mov	r0, r25
    1302:	00 0c       	add	r0, r0
    1304:	aa 0b       	sbc	r26, r26
    1306:	bb 0b       	sbc	r27, r27
    1308:	bc 01       	movw	r22, r24
    130a:	55 27       	eor	r21, r21
    130c:	44 27       	eor	r20, r20
    130e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1312:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1316:	a0 e0       	ldi	r26, 0x00	; 0
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	84 2b       	or	r24, r20
    131c:	95 2b       	or	r25, r21
    131e:	a6 2b       	or	r26, r22
    1320:	b7 2b       	or	r27, r23
    1322:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    1326:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    132a:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    132e:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1332:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <mtable+0x14>
    1336:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <mtable+0x15>
    133a:	30 97       	sbiw	r30, 0x00	; 0
    133c:	39 f0       	breq	.+14     	; 0x134c <__vector_15+0xb4>
    133e:	6a e0       	ldi	r22, 0x0A	; 10
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <otable+0x14>
    1346:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <otable+0x15>
    134a:	09 95       	icall
    134c:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	0f 90       	pop	r0
    1372:	1f 90       	pop	r1
    1374:	18 95       	reti

00001376 <__vector_16>:
    1376:	1f 92       	push	r1
    1378:	0f 92       	push	r0
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	0f 92       	push	r0
    137e:	11 24       	eor	r1, r1
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	2f 93       	push	r18
    1386:	3f 93       	push	r19
    1388:	4f 93       	push	r20
    138a:	5f 93       	push	r21
    138c:	6f 93       	push	r22
    138e:	7f 93       	push	r23
    1390:	8f 93       	push	r24
    1392:	9f 93       	push	r25
    1394:	af 93       	push	r26
    1396:	bf 93       	push	r27
    1398:	ef 93       	push	r30
    139a:	ff 93       	push	r31
    139c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    13a0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    13a4:	ac 01       	movw	r20, r24
    13a6:	09 2e       	mov	r0, r25
    13a8:	00 0c       	add	r0, r0
    13aa:	66 0b       	sbc	r22, r22
    13ac:	77 0b       	sbc	r23, r23
    13ae:	9a 01       	movw	r18, r20
    13b0:	11 27       	eor	r17, r17
    13b2:	00 27       	eor	r16, r16
    13b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	40 2b       	or	r20, r16
    13c2:	51 2b       	or	r21, r17
    13c4:	62 2b       	or	r22, r18
    13c6:	73 2b       	or	r23, r19
    13c8:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    13cc:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    13d0:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    13d4:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    13d8:	b0 9b       	sbis	0x16, 0	; 22
    13da:	1a c0       	rjmp	.+52     	; 0x1410 <__vector_16+0x9a>
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	09 2e       	mov	r0, r25
    13e0:	00 0c       	add	r0, r0
    13e2:	aa 0b       	sbc	r26, r26
    13e4:	bb 0b       	sbc	r27, r27
    13e6:	bc 01       	movw	r22, r24
    13e8:	55 27       	eor	r21, r21
    13ea:	44 27       	eor	r20, r20
    13ec:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13f0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13f4:	a0 e0       	ldi	r26, 0x00	; 0
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	84 2b       	or	r24, r20
    13fa:	95 2b       	or	r25, r21
    13fc:	a6 2b       	or	r26, r22
    13fe:	b7 2b       	or	r27, r23
    1400:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    1404:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    1408:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    140c:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1410:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <mtable+0x16>
    1414:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <mtable+0x17>
    1418:	30 97       	sbiw	r30, 0x00	; 0
    141a:	39 f0       	breq	.+14     	; 0x142a <__vector_16+0xb4>
    141c:	6b e0       	ldi	r22, 0x0B	; 11
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <otable+0x16>
    1424:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <otable+0x17>
    1428:	09 95       	icall
    142a:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    142e:	ff 91       	pop	r31
    1430:	ef 91       	pop	r30
    1432:	bf 91       	pop	r27
    1434:	af 91       	pop	r26
    1436:	9f 91       	pop	r25
    1438:	8f 91       	pop	r24
    143a:	7f 91       	pop	r23
    143c:	6f 91       	pop	r22
    143e:	5f 91       	pop	r21
    1440:	4f 91       	pop	r20
    1442:	3f 91       	pop	r19
    1444:	2f 91       	pop	r18
    1446:	1f 91       	pop	r17
    1448:	0f 91       	pop	r16
    144a:	0f 90       	pop	r0
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	0f 90       	pop	r0
    1450:	1f 90       	pop	r1
    1452:	18 95       	reti

00001454 <__vector_17>:
    1454:	1f 92       	push	r1
    1456:	0f 92       	push	r0
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	0f 92       	push	r0
    145c:	11 24       	eor	r1, r1
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	2f 93       	push	r18
    1464:	3f 93       	push	r19
    1466:	4f 93       	push	r20
    1468:	5f 93       	push	r21
    146a:	6f 93       	push	r22
    146c:	7f 93       	push	r23
    146e:	8f 93       	push	r24
    1470:	9f 93       	push	r25
    1472:	af 93       	push	r26
    1474:	bf 93       	push	r27
    1476:	ef 93       	push	r30
    1478:	ff 93       	push	r31
    147a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    147e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    1482:	ac 01       	movw	r20, r24
    1484:	09 2e       	mov	r0, r25
    1486:	00 0c       	add	r0, r0
    1488:	66 0b       	sbc	r22, r22
    148a:	77 0b       	sbc	r23, r23
    148c:	9a 01       	movw	r18, r20
    148e:	11 27       	eor	r17, r17
    1490:	00 27       	eor	r16, r16
    1492:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1496:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	70 e0       	ldi	r23, 0x00	; 0
    149e:	40 2b       	or	r20, r16
    14a0:	51 2b       	or	r21, r17
    14a2:	62 2b       	or	r22, r18
    14a4:	73 2b       	or	r23, r19
    14a6:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    14aa:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    14ae:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    14b2:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    14b6:	b0 9b       	sbis	0x16, 0	; 22
    14b8:	1a c0       	rjmp	.+52     	; 0x14ee <__vector_17+0x9a>
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	09 2e       	mov	r0, r25
    14be:	00 0c       	add	r0, r0
    14c0:	aa 0b       	sbc	r26, r26
    14c2:	bb 0b       	sbc	r27, r27
    14c4:	bc 01       	movw	r22, r24
    14c6:	55 27       	eor	r21, r21
    14c8:	44 27       	eor	r20, r20
    14ca:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14ce:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14d2:	a0 e0       	ldi	r26, 0x00	; 0
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	84 2b       	or	r24, r20
    14d8:	95 2b       	or	r25, r21
    14da:	a6 2b       	or	r26, r22
    14dc:	b7 2b       	or	r27, r23
    14de:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    14e2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    14e6:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    14ea:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    14ee:	e0 91 db 01 	lds	r30, 0x01DB	; 0x8001db <mtable+0x18>
    14f2:	f0 91 dc 01 	lds	r31, 0x01DC	; 0x8001dc <mtable+0x19>
    14f6:	30 97       	sbiw	r30, 0x00	; 0
    14f8:	39 f0       	breq	.+14     	; 0x1508 <__vector_17+0xb4>
    14fa:	6c e0       	ldi	r22, 0x0C	; 12
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <otable+0x18>
    1502:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <otable+0x19>
    1506:	09 95       	icall
    1508:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    150c:	ff 91       	pop	r31
    150e:	ef 91       	pop	r30
    1510:	bf 91       	pop	r27
    1512:	af 91       	pop	r26
    1514:	9f 91       	pop	r25
    1516:	8f 91       	pop	r24
    1518:	7f 91       	pop	r23
    151a:	6f 91       	pop	r22
    151c:	5f 91       	pop	r21
    151e:	4f 91       	pop	r20
    1520:	3f 91       	pop	r19
    1522:	2f 91       	pop	r18
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0f 90       	pop	r0
    152e:	1f 90       	pop	r1
    1530:	18 95       	reti

00001532 <__vector_18>:
    1532:	1f 92       	push	r1
    1534:	0f 92       	push	r0
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	0f 92       	push	r0
    153a:	11 24       	eor	r1, r1
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	2f 93       	push	r18
    1542:	3f 93       	push	r19
    1544:	4f 93       	push	r20
    1546:	5f 93       	push	r21
    1548:	6f 93       	push	r22
    154a:	7f 93       	push	r23
    154c:	8f 93       	push	r24
    154e:	9f 93       	push	r25
    1550:	af 93       	push	r26
    1552:	bf 93       	push	r27
    1554:	ef 93       	push	r30
    1556:	ff 93       	push	r31
    1558:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    155c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    1560:	ac 01       	movw	r20, r24
    1562:	09 2e       	mov	r0, r25
    1564:	00 0c       	add	r0, r0
    1566:	66 0b       	sbc	r22, r22
    1568:	77 0b       	sbc	r23, r23
    156a:	9a 01       	movw	r18, r20
    156c:	11 27       	eor	r17, r17
    156e:	00 27       	eor	r16, r16
    1570:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1574:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1578:	60 e0       	ldi	r22, 0x00	; 0
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	40 2b       	or	r20, r16
    157e:	51 2b       	or	r21, r17
    1580:	62 2b       	or	r22, r18
    1582:	73 2b       	or	r23, r19
    1584:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1588:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    158c:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    1590:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    1594:	b0 9b       	sbis	0x16, 0	; 22
    1596:	1a c0       	rjmp	.+52     	; 0x15cc <__vector_18+0x9a>
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	09 2e       	mov	r0, r25
    159c:	00 0c       	add	r0, r0
    159e:	aa 0b       	sbc	r26, r26
    15a0:	bb 0b       	sbc	r27, r27
    15a2:	bc 01       	movw	r22, r24
    15a4:	55 27       	eor	r21, r21
    15a6:	44 27       	eor	r20, r20
    15a8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15ac:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15b0:	a0 e0       	ldi	r26, 0x00	; 0
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	84 2b       	or	r24, r20
    15b6:	95 2b       	or	r25, r21
    15b8:	a6 2b       	or	r26, r22
    15ba:	b7 2b       	or	r27, r23
    15bc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    15c0:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    15c4:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    15c8:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    15cc:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <mtable+0x1a>
    15d0:	f0 91 de 01 	lds	r31, 0x01DE	; 0x8001de <mtable+0x1b>
    15d4:	30 97       	sbiw	r30, 0x00	; 0
    15d6:	39 f0       	breq	.+14     	; 0x15e6 <__vector_18+0xb4>
    15d8:	6d e0       	ldi	r22, 0x0D	; 13
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <otable+0x1a>
    15e0:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <otable+0x1b>
    15e4:	09 95       	icall
    15e6:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    15ea:	ff 91       	pop	r31
    15ec:	ef 91       	pop	r30
    15ee:	bf 91       	pop	r27
    15f0:	af 91       	pop	r26
    15f2:	9f 91       	pop	r25
    15f4:	8f 91       	pop	r24
    15f6:	7f 91       	pop	r23
    15f8:	6f 91       	pop	r22
    15fa:	5f 91       	pop	r21
    15fc:	4f 91       	pop	r20
    15fe:	3f 91       	pop	r19
    1600:	2f 91       	pop	r18
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	0f 90       	pop	r0
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	0f 90       	pop	r0
    160c:	1f 90       	pop	r1
    160e:	18 95       	reti

00001610 <__vector_19>:
    1610:	1f 92       	push	r1
    1612:	0f 92       	push	r0
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	0f 92       	push	r0
    1618:	11 24       	eor	r1, r1
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	2f 93       	push	r18
    1620:	3f 93       	push	r19
    1622:	4f 93       	push	r20
    1624:	5f 93       	push	r21
    1626:	6f 93       	push	r22
    1628:	7f 93       	push	r23
    162a:	8f 93       	push	r24
    162c:	9f 93       	push	r25
    162e:	af 93       	push	r26
    1630:	bf 93       	push	r27
    1632:	ef 93       	push	r30
    1634:	ff 93       	push	r31
    1636:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    163a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    163e:	ac 01       	movw	r20, r24
    1640:	09 2e       	mov	r0, r25
    1642:	00 0c       	add	r0, r0
    1644:	66 0b       	sbc	r22, r22
    1646:	77 0b       	sbc	r23, r23
    1648:	9a 01       	movw	r18, r20
    164a:	11 27       	eor	r17, r17
    164c:	00 27       	eor	r16, r16
    164e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1652:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	70 e0       	ldi	r23, 0x00	; 0
    165a:	40 2b       	or	r20, r16
    165c:	51 2b       	or	r21, r17
    165e:	62 2b       	or	r22, r18
    1660:	73 2b       	or	r23, r19
    1662:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1666:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    166a:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    166e:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    1672:	b0 9b       	sbis	0x16, 0	; 22
    1674:	1a c0       	rjmp	.+52     	; 0x16aa <__vector_19+0x9a>
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	09 2e       	mov	r0, r25
    167a:	00 0c       	add	r0, r0
    167c:	aa 0b       	sbc	r26, r26
    167e:	bb 0b       	sbc	r27, r27
    1680:	bc 01       	movw	r22, r24
    1682:	55 27       	eor	r21, r21
    1684:	44 27       	eor	r20, r20
    1686:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    168a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    168e:	a0 e0       	ldi	r26, 0x00	; 0
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	84 2b       	or	r24, r20
    1694:	95 2b       	or	r25, r21
    1696:	a6 2b       	or	r26, r22
    1698:	b7 2b       	or	r27, r23
    169a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    169e:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    16a2:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    16a6:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    16aa:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <mtable+0x1c>
    16ae:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <mtable+0x1d>
    16b2:	30 97       	sbiw	r30, 0x00	; 0
    16b4:	39 f0       	breq	.+14     	; 0x16c4 <__vector_19+0xb4>
    16b6:	6e e0       	ldi	r22, 0x0E	; 14
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <otable+0x1c>
    16be:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <otable+0x1d>
    16c2:	09 95       	icall
    16c4:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    16c8:	ff 91       	pop	r31
    16ca:	ef 91       	pop	r30
    16cc:	bf 91       	pop	r27
    16ce:	af 91       	pop	r26
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	7f 91       	pop	r23
    16d6:	6f 91       	pop	r22
    16d8:	5f 91       	pop	r21
    16da:	4f 91       	pop	r20
    16dc:	3f 91       	pop	r19
    16de:	2f 91       	pop	r18
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <__vector_20>:
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	2f 93       	push	r18
    16fe:	3f 93       	push	r19
    1700:	4f 93       	push	r20
    1702:	5f 93       	push	r21
    1704:	6f 93       	push	r22
    1706:	7f 93       	push	r23
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	af 93       	push	r26
    170e:	bf 93       	push	r27
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
    1714:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    1718:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    171c:	ac 01       	movw	r20, r24
    171e:	09 2e       	mov	r0, r25
    1720:	00 0c       	add	r0, r0
    1722:	66 0b       	sbc	r22, r22
    1724:	77 0b       	sbc	r23, r23
    1726:	9a 01       	movw	r18, r20
    1728:	11 27       	eor	r17, r17
    172a:	00 27       	eor	r16, r16
    172c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1730:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	40 2b       	or	r20, r16
    173a:	51 2b       	or	r21, r17
    173c:	62 2b       	or	r22, r18
    173e:	73 2b       	or	r23, r19
    1740:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1744:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    1748:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    174c:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    1750:	b0 9b       	sbis	0x16, 0	; 22
    1752:	1a c0       	rjmp	.+52     	; 0x1788 <__vector_20+0x9a>
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	09 2e       	mov	r0, r25
    1758:	00 0c       	add	r0, r0
    175a:	aa 0b       	sbc	r26, r26
    175c:	bb 0b       	sbc	r27, r27
    175e:	bc 01       	movw	r22, r24
    1760:	55 27       	eor	r21, r21
    1762:	44 27       	eor	r20, r20
    1764:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1768:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    176c:	a0 e0       	ldi	r26, 0x00	; 0
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	84 2b       	or	r24, r20
    1772:	95 2b       	or	r25, r21
    1774:	a6 2b       	or	r26, r22
    1776:	b7 2b       	or	r27, r23
    1778:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    177c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    1780:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1784:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1788:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <mtable+0x1e>
    178c:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <mtable+0x1f>
    1790:	30 97       	sbiw	r30, 0x00	; 0
    1792:	39 f0       	breq	.+14     	; 0x17a2 <__vector_20+0xb4>
    1794:	6f e0       	ldi	r22, 0x0F	; 15
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <otable+0x1e>
    179c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <otable+0x1f>
    17a0:	09 95       	icall
    17a2:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    17a6:	ff 91       	pop	r31
    17a8:	ef 91       	pop	r30
    17aa:	bf 91       	pop	r27
    17ac:	af 91       	pop	r26
    17ae:	9f 91       	pop	r25
    17b0:	8f 91       	pop	r24
    17b2:	7f 91       	pop	r23
    17b4:	6f 91       	pop	r22
    17b6:	5f 91       	pop	r21
    17b8:	4f 91       	pop	r20
    17ba:	3f 91       	pop	r19
    17bc:	2f 91       	pop	r18
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	0f 90       	pop	r0
    17c8:	1f 90       	pop	r1
    17ca:	18 95       	reti

000017cc <__vector_21>:
    17cc:	1f 92       	push	r1
    17ce:	0f 92       	push	r0
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	0f 92       	push	r0
    17d4:	11 24       	eor	r1, r1
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	2f 93       	push	r18
    17dc:	3f 93       	push	r19
    17de:	4f 93       	push	r20
    17e0:	5f 93       	push	r21
    17e2:	6f 93       	push	r22
    17e4:	7f 93       	push	r23
    17e6:	8f 93       	push	r24
    17e8:	9f 93       	push	r25
    17ea:	af 93       	push	r26
    17ec:	bf 93       	push	r27
    17ee:	ef 93       	push	r30
    17f0:	ff 93       	push	r31
    17f2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    17f6:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    17fa:	ac 01       	movw	r20, r24
    17fc:	09 2e       	mov	r0, r25
    17fe:	00 0c       	add	r0, r0
    1800:	66 0b       	sbc	r22, r22
    1802:	77 0b       	sbc	r23, r23
    1804:	9a 01       	movw	r18, r20
    1806:	11 27       	eor	r17, r17
    1808:	00 27       	eor	r16, r16
    180a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    180e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	40 2b       	or	r20, r16
    1818:	51 2b       	or	r21, r17
    181a:	62 2b       	or	r22, r18
    181c:	73 2b       	or	r23, r19
    181e:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1822:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    1826:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    182a:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    182e:	b0 9b       	sbis	0x16, 0	; 22
    1830:	1a c0       	rjmp	.+52     	; 0x1866 <__vector_21+0x9a>
    1832:	01 96       	adiw	r24, 0x01	; 1
    1834:	09 2e       	mov	r0, r25
    1836:	00 0c       	add	r0, r0
    1838:	aa 0b       	sbc	r26, r26
    183a:	bb 0b       	sbc	r27, r27
    183c:	bc 01       	movw	r22, r24
    183e:	55 27       	eor	r21, r21
    1840:	44 27       	eor	r20, r20
    1842:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1846:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    184a:	a0 e0       	ldi	r26, 0x00	; 0
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	84 2b       	or	r24, r20
    1850:	95 2b       	or	r25, r21
    1852:	a6 2b       	or	r26, r22
    1854:	b7 2b       	or	r27, r23
    1856:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    185a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    185e:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1862:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1866:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <mtable+0x20>
    186a:	f0 91 e4 01 	lds	r31, 0x01E4	; 0x8001e4 <mtable+0x21>
    186e:	30 97       	sbiw	r30, 0x00	; 0
    1870:	39 f0       	breq	.+14     	; 0x1880 <__vector_21+0xb4>
    1872:	60 e1       	ldi	r22, 0x10	; 16
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <otable+0x20>
    187a:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <otable+0x21>
    187e:	09 95       	icall
    1880:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	7f 91       	pop	r23
    1892:	6f 91       	pop	r22
    1894:	5f 91       	pop	r21
    1896:	4f 91       	pop	r20
    1898:	3f 91       	pop	r19
    189a:	2f 91       	pop	r18
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	0f 90       	pop	r0
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	0f 90       	pop	r0
    18a6:	1f 90       	pop	r1
    18a8:	18 95       	reti

000018aa <__vector_22>:
    18aa:	1f 92       	push	r1
    18ac:	0f 92       	push	r0
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	0f 92       	push	r0
    18b2:	11 24       	eor	r1, r1
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	2f 93       	push	r18
    18ba:	3f 93       	push	r19
    18bc:	4f 93       	push	r20
    18be:	5f 93       	push	r21
    18c0:	6f 93       	push	r22
    18c2:	7f 93       	push	r23
    18c4:	8f 93       	push	r24
    18c6:	9f 93       	push	r25
    18c8:	af 93       	push	r26
    18ca:	bf 93       	push	r27
    18cc:	ef 93       	push	r30
    18ce:	ff 93       	push	r31
    18d0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    18d4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    18d8:	ac 01       	movw	r20, r24
    18da:	09 2e       	mov	r0, r25
    18dc:	00 0c       	add	r0, r0
    18de:	66 0b       	sbc	r22, r22
    18e0:	77 0b       	sbc	r23, r23
    18e2:	9a 01       	movw	r18, r20
    18e4:	11 27       	eor	r17, r17
    18e6:	00 27       	eor	r16, r16
    18e8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18ec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18f0:	60 e0       	ldi	r22, 0x00	; 0
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	40 2b       	or	r20, r16
    18f6:	51 2b       	or	r21, r17
    18f8:	62 2b       	or	r22, r18
    18fa:	73 2b       	or	r23, r19
    18fc:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1900:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    1904:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    1908:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    190c:	b0 9b       	sbis	0x16, 0	; 22
    190e:	1a c0       	rjmp	.+52     	; 0x1944 <__vector_22+0x9a>
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	09 2e       	mov	r0, r25
    1914:	00 0c       	add	r0, r0
    1916:	aa 0b       	sbc	r26, r26
    1918:	bb 0b       	sbc	r27, r27
    191a:	bc 01       	movw	r22, r24
    191c:	55 27       	eor	r21, r21
    191e:	44 27       	eor	r20, r20
    1920:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1924:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1928:	a0 e0       	ldi	r26, 0x00	; 0
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	84 2b       	or	r24, r20
    192e:	95 2b       	or	r25, r21
    1930:	a6 2b       	or	r26, r22
    1932:	b7 2b       	or	r27, r23
    1934:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    1938:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    193c:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1940:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1944:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <mtable+0x22>
    1948:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <mtable+0x23>
    194c:	30 97       	sbiw	r30, 0x00	; 0
    194e:	39 f0       	breq	.+14     	; 0x195e <__vector_22+0xb4>
    1950:	61 e1       	ldi	r22, 0x11	; 17
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <otable+0x22>
    1958:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <otable+0x23>
    195c:	09 95       	icall
    195e:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    1962:	ff 91       	pop	r31
    1964:	ef 91       	pop	r30
    1966:	bf 91       	pop	r27
    1968:	af 91       	pop	r26
    196a:	9f 91       	pop	r25
    196c:	8f 91       	pop	r24
    196e:	7f 91       	pop	r23
    1970:	6f 91       	pop	r22
    1972:	5f 91       	pop	r21
    1974:	4f 91       	pop	r20
    1976:	3f 91       	pop	r19
    1978:	2f 91       	pop	r18
    197a:	1f 91       	pop	r17
    197c:	0f 91       	pop	r16
    197e:	0f 90       	pop	r0
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	0f 90       	pop	r0
    1984:	1f 90       	pop	r1
    1986:	18 95       	reti

00001988 <idle>:
    1988:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    198c:	78 94       	sei
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	83 bf       	out	0x33, r24	; 51
    1992:	88 95       	sleep
    1994:	fc cf       	rjmp	.-8      	; 0x198e <idle+0x6>

00001996 <__vector_9>:
    1996:	1f 92       	push	r1
    1998:	0f 92       	push	r0
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	0f 92       	push	r0
    199e:	11 24       	eor	r1, r1
    19a0:	2f 93       	push	r18
    19a2:	3f 93       	push	r19
    19a4:	4f 93       	push	r20
    19a6:	5f 93       	push	r21
    19a8:	6f 93       	push	r22
    19aa:	7f 93       	push	r23
    19ac:	8f 93       	push	r24
    19ae:	9f 93       	push	r25
    19b0:	ef 93       	push	r30
    19b2:	ff 93       	push	r31
    19b4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    19b8:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <overflows+0x1>
    19c2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <overflows>
    19c6:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <timerQ>
    19ca:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <timerQ+0x1>
    19ce:	30 97       	sbiw	r30, 0x00	; 0
    19d0:	01 f1       	breq	.+64     	; 0x1a12 <__vector_9+0x7c>
    19d2:	42 81       	ldd	r20, Z+2	; 0x02
    19d4:	53 81       	ldd	r21, Z+3	; 0x03
    19d6:	64 81       	ldd	r22, Z+4	; 0x04
    19d8:	75 81       	ldd	r23, Z+5	; 0x05
    19da:	86 17       	cp	r24, r22
    19dc:	97 07       	cpc	r25, r23
    19de:	c9 f4       	brne	.+50     	; 0x1a12 <__vector_9+0x7c>
    19e0:	ca 01       	movw	r24, r20
    19e2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19e6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19ea:	42 1b       	sub	r20, r18
    19ec:	53 0b       	sbc	r21, r19
    19ee:	41 30       	cpi	r20, 0x01	; 1
    19f0:	51 05       	cpc	r21, r1
    19f2:	29 f4       	brne	.+10     	; 0x19fe <__vector_9+0x68>
    19f4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19f8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1a02:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1a06:	ef e6       	ldi	r30, 0x6F	; 111
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	82 60       	ori	r24, 0x02	; 2
    1a0e:	80 83       	st	Z, r24
    1a10:	05 c0       	rjmp	.+10     	; 0x1a1c <__vector_9+0x86>
    1a12:	ef e6       	ldi	r30, 0x6F	; 111
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	8d 7f       	andi	r24, 0xFD	; 253
    1a1a:	80 83       	st	Z, r24
    1a1c:	ff 91       	pop	r31
    1a1e:	ef 91       	pop	r30
    1a20:	9f 91       	pop	r25
    1a22:	8f 91       	pop	r24
    1a24:	7f 91       	pop	r23
    1a26:	6f 91       	pop	r22
    1a28:	5f 91       	pop	r21
    1a2a:	4f 91       	pop	r20
    1a2c:	3f 91       	pop	r19
    1a2e:	2f 91       	pop	r18
    1a30:	0f 90       	pop	r0
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	0f 90       	pop	r0
    1a36:	1f 90       	pop	r1
    1a38:	18 95       	reti

00001a3a <__vector_7>:
    1a3a:	1f 92       	push	r1
    1a3c:	0f 92       	push	r0
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	0f 92       	push	r0
    1a42:	11 24       	eor	r1, r1
    1a44:	cf 92       	push	r12
    1a46:	df 92       	push	r13
    1a48:	ef 92       	push	r14
    1a4a:	ff 92       	push	r15
    1a4c:	2f 93       	push	r18
    1a4e:	3f 93       	push	r19
    1a50:	4f 93       	push	r20
    1a52:	5f 93       	push	r21
    1a54:	6f 93       	push	r22
    1a56:	7f 93       	push	r23
    1a58:	8f 93       	push	r24
    1a5a:	9f 93       	push	r25
    1a5c:	af 93       	push	r26
    1a5e:	bf 93       	push	r27
    1a60:	ef 93       	push	r30
    1a62:	ff 93       	push	r31
    1a64:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    1a68:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    1a6c:	6c 01       	movw	r12, r24
    1a6e:	09 2e       	mov	r0, r25
    1a70:	00 0c       	add	r0, r0
    1a72:	ee 08       	sbc	r14, r14
    1a74:	ff 08       	sbc	r15, r15
    1a76:	76 01       	movw	r14, r12
    1a78:	dd 24       	eor	r13, r13
    1a7a:	cc 24       	eor	r12, r12
    1a7c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a80:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	c4 2a       	or	r12, r20
    1a8a:	d5 2a       	or	r13, r21
    1a8c:	e6 2a       	or	r14, r22
    1a8e:	f7 2a       	or	r15, r23
    1a90:	b0 9b       	sbis	0x16, 0	; 22
    1a92:	1e c0       	rjmp	.+60     	; 0x1ad0 <__vector_7+0x96>
    1a94:	6c 01       	movw	r12, r24
    1a96:	2f ef       	ldi	r18, 0xFF	; 255
    1a98:	c2 1a       	sub	r12, r18
    1a9a:	d2 0a       	sbc	r13, r18
    1a9c:	0d 2c       	mov	r0, r13
    1a9e:	00 0c       	add	r0, r0
    1aa0:	ee 08       	sbc	r14, r14
    1aa2:	ff 08       	sbc	r15, r15
    1aa4:	d6 01       	movw	r26, r12
    1aa6:	99 27       	eor	r25, r25
    1aa8:	88 27       	eor	r24, r24
    1aaa:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aae:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ab2:	e1 2c       	mov	r14, r1
    1ab4:	f1 2c       	mov	r15, r1
    1ab6:	c8 2a       	or	r12, r24
    1ab8:	d9 2a       	or	r13, r25
    1aba:	ea 2a       	or	r14, r26
    1abc:	fb 2a       	or	r15, r27
    1abe:	08 c0       	rjmp	.+16     	; 0x1ad0 <__vector_7+0x96>
    1ac0:	87 e2       	ldi	r24, 0x27	; 39
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	0e 94 8d 04 	call	0x91a	; 0x91a <dequeue>
    1ac8:	69 e2       	ldi	r22, 0x29	; 41
    1aca:	71 e0       	ldi	r23, 0x01	; 1
    1acc:	0e 94 2b 04 	call	0x856	; 0x856 <enqueueByDeadline>
    1ad0:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <timerQ>
    1ad4:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <timerQ+0x1>
    1ad8:	30 97       	sbiw	r30, 0x00	; 0
    1ada:	69 f0       	breq	.+26     	; 0x1af6 <__vector_7+0xbc>
    1adc:	82 81       	ldd	r24, Z+2	; 0x02
    1ade:	93 81       	ldd	r25, Z+3	; 0x03
    1ae0:	a4 81       	ldd	r26, Z+4	; 0x04
    1ae2:	b5 81       	ldd	r27, Z+5	; 0x05
    1ae4:	8c 19       	sub	r24, r12
    1ae6:	9d 09       	sbc	r25, r13
    1ae8:	ae 09       	sbc	r26, r14
    1aea:	bf 09       	sbc	r27, r15
    1aec:	18 16       	cp	r1, r24
    1aee:	19 06       	cpc	r1, r25
    1af0:	1a 06       	cpc	r1, r26
    1af2:	1b 06       	cpc	r1, r27
    1af4:	2c f7       	brge	.-54     	; 0x1ac0 <__vector_7+0x86>
    1af6:	30 97       	sbiw	r30, 0x00	; 0
    1af8:	21 f1       	breq	.+72     	; 0x1b42 <__vector_7+0x108>
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	a4 81       	ldd	r26, Z+4	; 0x04
    1b00:	b5 81       	ldd	r27, Z+5	; 0x05
    1b02:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <overflows>
    1b06:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <overflows+0x1>
    1b0a:	2a 17       	cp	r18, r26
    1b0c:	3b 07       	cpc	r19, r27
    1b0e:	c9 f4       	brne	.+50     	; 0x1b42 <__vector_7+0x108>
    1b10:	9c 01       	movw	r18, r24
    1b12:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b16:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b1a:	84 1b       	sub	r24, r20
    1b1c:	95 0b       	sbc	r25, r21
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	31 f4       	brne	.+12     	; 0x1b2e <__vector_7+0xf4>
    1b22:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b26:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b2a:	2f 5f       	subi	r18, 0xFF	; 255
    1b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b32:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b36:	ef e6       	ldi	r30, 0x6F	; 111
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	82 60       	ori	r24, 0x02	; 2
    1b3e:	80 83       	st	Z, r24
    1b40:	05 c0       	rjmp	.+10     	; 0x1b4c <__vector_7+0x112>
    1b42:	ef e6       	ldi	r30, 0x6F	; 111
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	8d 7f       	andi	r24, 0xFD	; 253
    1b4a:	80 83       	st	Z, r24
    1b4c:	0e 94 c2 04 	call	0x984	; 0x984 <schedule>
    1b50:	ff 91       	pop	r31
    1b52:	ef 91       	pop	r30
    1b54:	bf 91       	pop	r27
    1b56:	af 91       	pop	r26
    1b58:	9f 91       	pop	r25
    1b5a:	8f 91       	pop	r24
    1b5c:	7f 91       	pop	r23
    1b5e:	6f 91       	pop	r22
    1b60:	5f 91       	pop	r21
    1b62:	4f 91       	pop	r20
    1b64:	3f 91       	pop	r19
    1b66:	2f 91       	pop	r18
    1b68:	ff 90       	pop	r15
    1b6a:	ef 90       	pop	r14
    1b6c:	df 90       	pop	r13
    1b6e:	cf 90       	pop	r12
    1b70:	0f 90       	pop	r0
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	0f 90       	pop	r0
    1b76:	1f 90       	pop	r1
    1b78:	18 95       	reti

00001b7a <async>:
    1b7a:	3f 92       	push	r3
    1b7c:	4f 92       	push	r4
    1b7e:	5f 92       	push	r5
    1b80:	6f 92       	push	r6
    1b82:	7f 92       	push	r7
    1b84:	8f 92       	push	r8
    1b86:	9f 92       	push	r9
    1b88:	af 92       	push	r10
    1b8a:	bf 92       	push	r11
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	2b 01       	movw	r4, r22
    1b9e:	3c 01       	movw	r6, r24
    1ba0:	49 01       	movw	r8, r18
    1ba2:	5a 01       	movw	r10, r20
    1ba4:	8f b7       	in	r24, 0x3f	; 63
    1ba6:	80 78       	andi	r24, 0x80	; 128
    1ba8:	38 2e       	mov	r3, r24
    1baa:	f8 94       	cli
    1bac:	86 e0       	ldi	r24, 0x06	; 6
    1bae:	91 e0       	ldi	r25, 0x01	; 1
    1bb0:	0e 94 8d 04 	call	0x91a	; 0x91a <dequeue>
    1bb4:	ec 01       	movw	r28, r24
    1bb6:	1b 87       	std	Y+11, r17	; 0x0b
    1bb8:	0a 87       	std	Y+10, r16	; 0x0a
    1bba:	fd 86       	std	Y+13, r15	; 0x0d
    1bbc:	ec 86       	std	Y+12, r14	; 0x0c
    1bbe:	df 86       	std	Y+15, r13	; 0x0f
    1bc0:	ce 86       	std	Y+14, r12	; 0x0e
    1bc2:	33 20       	and	r3, r3
    1bc4:	61 f0       	breq	.+24     	; 0x1bde <async+0x64>
    1bc6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1bca:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1bce:	02 80       	ldd	r0, Z+2	; 0x02
    1bd0:	f3 81       	ldd	r31, Z+3	; 0x03
    1bd2:	e0 2d       	mov	r30, r0
    1bd4:	82 81       	ldd	r24, Z+2	; 0x02
    1bd6:	93 81       	ldd	r25, Z+3	; 0x03
    1bd8:	a4 81       	ldd	r26, Z+4	; 0x04
    1bda:	b5 81       	ldd	r27, Z+5	; 0x05
    1bdc:	08 c0       	rjmp	.+16     	; 0x1bee <async+0x74>
    1bde:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <timestamp>
    1be2:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <timestamp+0x1>
    1be6:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <timestamp+0x2>
    1bea:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <timestamp+0x3>
    1bee:	48 0e       	add	r4, r24
    1bf0:	59 1e       	adc	r5, r25
    1bf2:	6a 1e       	adc	r6, r26
    1bf4:	7b 1e       	adc	r7, r27
    1bf6:	4a 82       	std	Y+2, r4	; 0x02
    1bf8:	5b 82       	std	Y+3, r5	; 0x03
    1bfa:	6c 82       	std	Y+4, r6	; 0x04
    1bfc:	7d 82       	std	Y+5, r7	; 0x05
    1bfe:	18 14       	cp	r1, r8
    1c00:	19 04       	cpc	r1, r9
    1c02:	1a 04       	cpc	r1, r10
    1c04:	1b 04       	cpc	r1, r11
    1c06:	44 f0       	brlt	.+16     	; 0x1c18 <async+0x9e>
    1c08:	0f 2e       	mov	r0, r31
    1c0a:	88 24       	eor	r8, r8
    1c0c:	8a 94       	dec	r8
    1c0e:	98 2c       	mov	r9, r8
    1c10:	a8 2c       	mov	r10, r8
    1c12:	ff e7       	ldi	r31, 0x7F	; 127
    1c14:	bf 2e       	mov	r11, r31
    1c16:	f0 2d       	mov	r31, r0
    1c18:	84 0c       	add	r8, r4
    1c1a:	95 1c       	adc	r9, r5
    1c1c:	a6 1c       	adc	r10, r6
    1c1e:	b7 1c       	adc	r11, r7
    1c20:	8e 82       	std	Y+6, r8	; 0x06
    1c22:	9f 82       	std	Y+7, r9	; 0x07
    1c24:	a8 86       	std	Y+8, r10	; 0x08
    1c26:	b9 86       	std	Y+9, r11	; 0x09
    1c28:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <overflows>
    1c2c:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <overflows+0x1>
    1c30:	c9 01       	movw	r24, r18
    1c32:	03 2e       	mov	r0, r19
    1c34:	00 0c       	add	r0, r0
    1c36:	aa 0b       	sbc	r26, r26
    1c38:	bb 0b       	sbc	r27, r27
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	99 27       	eor	r25, r25
    1c3e:	88 27       	eor	r24, r24
    1c40:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c44:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	70 e0       	ldi	r23, 0x00	; 0
    1c4c:	84 2b       	or	r24, r20
    1c4e:	95 2b       	or	r25, r21
    1c50:	a6 2b       	or	r26, r22
    1c52:	b7 2b       	or	r27, r23
    1c54:	b0 9b       	sbis	0x16, 0	; 22
    1c56:	13 c0       	rjmp	.+38     	; 0x1c7e <async+0x104>
    1c58:	c9 01       	movw	r24, r18
    1c5a:	01 96       	adiw	r24, 0x01	; 1
    1c5c:	09 2e       	mov	r0, r25
    1c5e:	00 0c       	add	r0, r0
    1c60:	aa 0b       	sbc	r26, r26
    1c62:	bb 0b       	sbc	r27, r27
    1c64:	dc 01       	movw	r26, r24
    1c66:	99 27       	eor	r25, r25
    1c68:	88 27       	eor	r24, r24
    1c6a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c6e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	84 2b       	or	r24, r20
    1c78:	95 2b       	or	r25, r21
    1c7a:	a6 2b       	or	r26, r22
    1c7c:	b7 2b       	or	r27, r23
    1c7e:	48 1a       	sub	r4, r24
    1c80:	59 0a       	sbc	r5, r25
    1c82:	6a 0a       	sbc	r6, r26
    1c84:	7b 0a       	sbc	r7, r27
    1c86:	14 14       	cp	r1, r4
    1c88:	15 04       	cpc	r1, r5
    1c8a:	16 04       	cpc	r1, r6
    1c8c:	17 04       	cpc	r1, r7
    1c8e:	ac f5       	brge	.+106    	; 0x1cfa <async+0x180>
    1c90:	67 e2       	ldi	r22, 0x27	; 39
    1c92:	71 e0       	ldi	r23, 0x01	; 1
    1c94:	ce 01       	movw	r24, r28
    1c96:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <enqueueByBaseline>
    1c9a:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <timerQ>
    1c9e:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <timerQ+0x1>
    1ca2:	30 97       	sbiw	r30, 0x00	; 0
    1ca4:	21 f1       	breq	.+72     	; 0x1cee <async+0x174>
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	a4 81       	ldd	r26, Z+4	; 0x04
    1cac:	b5 81       	ldd	r27, Z+5	; 0x05
    1cae:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <overflows>
    1cb2:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <overflows+0x1>
    1cb6:	2a 17       	cp	r18, r26
    1cb8:	3b 07       	cpc	r19, r27
    1cba:	c9 f4       	brne	.+50     	; 0x1cee <async+0x174>
    1cbc:	9c 01       	movw	r18, r24
    1cbe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cc2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cc6:	84 1b       	sub	r24, r20
    1cc8:	95 0b       	sbc	r25, r21
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	31 f4       	brne	.+12     	; 0x1cda <async+0x160>
    1cce:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cd2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cd6:	2f 5f       	subi	r18, 0xFF	; 255
    1cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cda:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1cde:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ce2:	ef e6       	ldi	r30, 0x6F	; 111
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	82 60       	ori	r24, 0x02	; 2
    1cea:	80 83       	st	Z, r24
    1cec:	39 c0       	rjmp	.+114    	; 0x1d60 <async+0x1e6>
    1cee:	ef e6       	ldi	r30, 0x6F	; 111
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8d 7f       	andi	r24, 0xFD	; 253
    1cf6:	80 83       	st	Z, r24
    1cf8:	33 c0       	rjmp	.+102    	; 0x1d60 <async+0x1e6>
    1cfa:	69 e2       	ldi	r22, 0x29	; 41
    1cfc:	71 e0       	ldi	r23, 0x01	; 1
    1cfe:	ce 01       	movw	r24, r28
    1d00:	0e 94 2b 04 	call	0x856	; 0x856 <enqueueByDeadline>
    1d04:	33 20       	and	r3, r3
    1d06:	61 f1       	breq	.+88     	; 0x1d60 <async+0x1e6>
    1d08:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1d0c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1d10:	89 2b       	or	r24, r25
    1d12:	31 f1       	breq	.+76     	; 0x1d60 <async+0x1e6>
    1d14:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <msgQ>
    1d18:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <msgQ+0x1>
    1d1c:	86 81       	ldd	r24, Z+6	; 0x06
    1d1e:	97 81       	ldd	r25, Z+7	; 0x07
    1d20:	a0 85       	ldd	r26, Z+8	; 0x08
    1d22:	b1 85       	ldd	r27, Z+9	; 0x09
    1d24:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1d28:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1d2c:	02 80       	ldd	r0, Z+2	; 0x02
    1d2e:	f3 81       	ldd	r31, Z+3	; 0x03
    1d30:	e0 2d       	mov	r30, r0
    1d32:	46 81       	ldd	r20, Z+6	; 0x06
    1d34:	57 81       	ldd	r21, Z+7	; 0x07
    1d36:	60 85       	ldd	r22, Z+8	; 0x08
    1d38:	71 85       	ldd	r23, Z+9	; 0x09
    1d3a:	84 1b       	sub	r24, r20
    1d3c:	95 0b       	sbc	r25, r21
    1d3e:	a6 0b       	sbc	r26, r22
    1d40:	b7 0b       	sbc	r27, r23
    1d42:	72 f4       	brpl	.+28     	; 0x1d60 <async+0x1e6>
    1d44:	84 e0       	ldi	r24, 0x04	; 4
    1d46:	91 e0       	ldi	r25, 0x01	; 1
    1d48:	0e 94 b8 04 	call	0x970	; 0x970 <pop>
    1d4c:	62 e0       	ldi	r22, 0x02	; 2
    1d4e:	71 e0       	ldi	r23, 0x01	; 1
    1d50:	0e 94 ae 04 	call	0x95c	; 0x95c <push>
    1d54:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
    1d58:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
    1d5c:	0e 94 0b 04 	call	0x816	; 0x816 <dispatch>
    1d60:	33 20       	and	r3, r3
    1d62:	09 f0       	breq	.+2      	; 0x1d66 <async+0x1ec>
    1d64:	78 94       	sei
    1d66:	ce 01       	movw	r24, r28
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	cf 90       	pop	r12
    1d78:	bf 90       	pop	r11
    1d7a:	af 90       	pop	r10
    1d7c:	9f 90       	pop	r9
    1d7e:	8f 90       	pop	r8
    1d80:	7f 90       	pop	r7
    1d82:	6f 90       	pop	r6
    1d84:	5f 90       	pop	r5
    1d86:	4f 90       	pop	r4
    1d88:	3f 90       	pop	r3
    1d8a:	08 95       	ret

00001d8c <sync>:
    1d8c:	cf 92       	push	r12
    1d8e:	df 92       	push	r13
    1d90:	ef 92       	push	r14
    1d92:	ff 92       	push	r15
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	ec 01       	movw	r28, r24
    1d9e:	7b 01       	movw	r14, r22
    1da0:	6a 01       	movw	r12, r20
    1da2:	1f b7       	in	r17, 0x3f	; 63
    1da4:	10 78       	andi	r17, 0x80	; 128
    1da6:	f8 94       	cli
    1da8:	a8 81       	ld	r26, Y
    1daa:	b9 81       	ldd	r27, Y+1	; 0x01
    1dac:	10 97       	sbiw	r26, 0x00	; 0
    1dae:	19 f4       	brne	.+6      	; 0x1db6 <sync+0x2a>
    1db0:	35 c0       	rjmp	.+106    	; 0x1e1c <sync+0x90>
    1db2:	a0 81       	ld	r26, Z
    1db4:	b1 81       	ldd	r27, Z+1	; 0x01
    1db6:	14 96       	adiw	r26, 0x04	; 4
    1db8:	ed 91       	ld	r30, X+
    1dba:	fc 91       	ld	r31, X
    1dbc:	15 97       	sbiw	r26, 0x05	; 5
    1dbe:	30 97       	sbiw	r30, 0x00	; 0
    1dc0:	c1 f7       	brne	.-16     	; 0x1db2 <sync+0x26>
    1dc2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1dc6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1dca:	a2 17       	cp	r26, r18
    1dcc:	b3 07       	cpc	r27, r19
    1dce:	11 f0       	breq	.+4      	; 0x1dd4 <sync+0x48>
    1dd0:	11 11       	cpse	r17, r1
    1dd2:	07 c0       	rjmp	.+14     	; 0x1de2 <sync+0x56>
    1dd4:	11 23       	and	r17, r17
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <sync+0x4e>
    1dd8:	4a c0       	rjmp	.+148    	; 0x1e6e <sync+0xe2>
    1dda:	78 94       	sei
    1ddc:	8f ef       	ldi	r24, 0xFF	; 255
    1dde:	9f ef       	ldi	r25, 0xFF	; 255
    1de0:	4e c0       	rjmp	.+156    	; 0x1e7e <sync+0xf2>
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	9b 81       	ldd	r25, Y+3	; 0x03
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	19 f0       	breq	.+6      	; 0x1df0 <sync+0x64>
    1dea:	fc 01       	movw	r30, r24
    1dec:	15 82       	std	Z+5, r1	; 0x05
    1dee:	14 82       	std	Z+4, r1	; 0x04
    1df0:	3b 83       	std	Y+3, r19	; 0x03
    1df2:	2a 83       	std	Y+2, r18	; 0x02
    1df4:	f9 01       	movw	r30, r18
    1df6:	d5 83       	std	Z+5, r29	; 0x05
    1df8:	c4 83       	std	Z+4, r28	; 0x04
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 0b 04 	call	0x816	; 0x816 <dispatch>
    1e00:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e04:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e08:	82 81       	ldd	r24, Z+2	; 0x02
    1e0a:	93 81       	ldd	r25, Z+3	; 0x03
    1e0c:	89 2b       	or	r24, r25
    1e0e:	31 f4       	brne	.+12     	; 0x1e1c <sync+0x90>
    1e10:	11 23       	and	r17, r17
    1e12:	81 f1       	breq	.+96     	; 0x1e74 <sync+0xe8>
    1e14:	78 94       	sei
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	31 c0       	rjmp	.+98     	; 0x1e7e <sync+0xf2>
    1e1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e20:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e24:	99 83       	std	Y+1, r25	; 0x01
    1e26:	88 83       	st	Y, r24
    1e28:	11 23       	and	r17, r17
    1e2a:	29 f0       	breq	.+10     	; 0x1e36 <sync+0xaa>
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <sync+0xaa>
    1e34:	78 94       	sei
    1e36:	b6 01       	movw	r22, r12
    1e38:	ce 01       	movw	r24, r28
    1e3a:	f7 01       	movw	r30, r14
    1e3c:	09 95       	icall
    1e3e:	f8 2e       	mov	r15, r24
    1e40:	09 2f       	mov	r16, r25
    1e42:	8f b7       	in	r24, 0x3f	; 63
    1e44:	f8 94       	cli
    1e46:	19 82       	std	Y+1, r1	; 0x01
    1e48:	18 82       	st	Y, r1
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4e:	82 30       	cpi	r24, 0x02	; 2
    1e50:	91 05       	cpc	r25, r1
    1e52:	38 f0       	brcs	.+14     	; 0x1e62 <sync+0xd6>
    1e54:	1b 82       	std	Y+3, r1	; 0x03
    1e56:	1a 82       	std	Y+2, r1	; 0x02
    1e58:	fc 01       	movw	r30, r24
    1e5a:	15 82       	std	Z+5, r1	; 0x05
    1e5c:	14 82       	std	Z+4, r1	; 0x04
    1e5e:	0e 94 0b 04 	call	0x816	; 0x816 <dispatch>
    1e62:	11 23       	and	r17, r17
    1e64:	51 f0       	breq	.+20     	; 0x1e7a <sync+0xee>
    1e66:	78 94       	sei
    1e68:	8f 2d       	mov	r24, r15
    1e6a:	90 2f       	mov	r25, r16
    1e6c:	08 c0       	rjmp	.+16     	; 0x1e7e <sync+0xf2>
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	9f ef       	ldi	r25, 0xFF	; 255
    1e72:	05 c0       	rjmp	.+10     	; 0x1e7e <sync+0xf2>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <sync+0xf2>
    1e7a:	8f 2d       	mov	r24, r15
    1e7c:	90 2f       	mov	r25, r16
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	1f 91       	pop	r17
    1e84:	0f 91       	pop	r16
    1e86:	ff 90       	pop	r15
    1e88:	ef 90       	pop	r14
    1e8a:	df 90       	pop	r13
    1e8c:	cf 90       	pop	r12
    1e8e:	08 95       	ret

00001e90 <run>:
    1e90:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e94:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e98:	89 e2       	ldi	r24, 0x29	; 41
    1e9a:	91 e0       	ldi	r25, 0x01	; 1
    1e9c:	0e 94 8d 04 	call	0x91a	; 0x91a <dequeue>
    1ea0:	ec 01       	movw	r28, r24
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	93 83       	std	Z+3, r25	; 0x03
    1ea6:	82 83       	std	Z+2, r24	; 0x02
    1ea8:	78 94       	sei
    1eaa:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eac:	7d 85       	ldd	r23, Y+13	; 0x0d
    1eae:	4e 85       	ldd	r20, Y+14	; 0x0e
    1eb0:	5f 85       	ldd	r21, Y+15	; 0x0f
    1eb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1eb6:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <sync>
    1eba:	8f b7       	in	r24, 0x3f	; 63
    1ebc:	f8 94       	cli
    1ebe:	66 e0       	ldi	r22, 0x06	; 6
    1ec0:	71 e0       	ldi	r23, 0x01	; 1
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	0e 94 a4 04 	call	0x948	; 0x948 <insert>
    1ec8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1ecc:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1ed0:	01 90       	ld	r0, Z+
    1ed2:	f0 81       	ld	r31, Z
    1ed4:	e0 2d       	mov	r30, r0
    1ed6:	c2 81       	ldd	r28, Z+2	; 0x02
    1ed8:	d3 81       	ldd	r29, Z+3	; 0x03
    1eda:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <msgQ>
    1ede:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <msgQ+0x1>
    1ee2:	30 97       	sbiw	r30, 0x00	; 0
    1ee4:	a1 f0       	breq	.+40     	; 0x1f0e <run+0x7e>
    1ee6:	20 97       	sbiw	r28, 0x00	; 0
    1ee8:	99 f2       	breq	.-90     	; 0x1e90 <run>
    1eea:	86 81       	ldd	r24, Z+6	; 0x06
    1eec:	97 81       	ldd	r25, Z+7	; 0x07
    1eee:	a0 85       	ldd	r26, Z+8	; 0x08
    1ef0:	b1 85       	ldd	r27, Z+9	; 0x09
    1ef2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ef4:	5f 81       	ldd	r21, Y+7	; 0x07
    1ef6:	68 85       	ldd	r22, Y+8	; 0x08
    1ef8:	79 85       	ldd	r23, Y+9	; 0x09
    1efa:	84 1b       	sub	r24, r20
    1efc:	95 0b       	sbc	r25, r21
    1efe:	a6 0b       	sbc	r26, r22
    1f00:	b7 0b       	sbc	r27, r23
    1f02:	18 16       	cp	r1, r24
    1f04:	19 06       	cpc	r1, r25
    1f06:	1a 06       	cpc	r1, r26
    1f08:	1b 06       	cpc	r1, r27
    1f0a:	0c f0       	brlt	.+2      	; 0x1f0e <run+0x7e>
    1f0c:	c1 cf       	rjmp	.-126    	; 0x1e90 <run>
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	0e 94 b8 04 	call	0x970	; 0x970 <pop>
    1f16:	64 e0       	ldi	r22, 0x04	; 4
    1f18:	71 e0       	ldi	r23, 0x01	; 1
    1f1a:	0e 94 ae 04 	call	0x95c	; 0x95c <push>
    1f1e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    1f22:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <run+0x9c>
    1f28:	a0 81       	ld	r26, Z
    1f2a:	b1 81       	ldd	r27, Z+1	; 0x01
    1f2c:	14 96       	adiw	r26, 0x04	; 4
    1f2e:	ed 91       	ld	r30, X+
    1f30:	fc 91       	ld	r31, X
    1f32:	15 97       	sbiw	r26, 0x05	; 5
    1f34:	30 97       	sbiw	r30, 0x00	; 0
    1f36:	c1 f7       	brne	.-16     	; 0x1f28 <run+0x98>
    1f38:	cd 01       	movw	r24, r26
    1f3a:	0e 94 0b 04 	call	0x816	; 0x816 <dispatch>
    1f3e:	a8 cf       	rjmp	.-176    	; 0x1e90 <run>

00001f40 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    1f40:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    1f42:	42 31       	cpi	r20, 0x12	; 18
    1f44:	b8 f4       	brcc	.+46     	; 0x1f74 <install+0x34>
        char status;
        DISABLE(status);
    1f46:	9f b7       	in	r25, 0x3f	; 63
    1f48:	90 78       	andi	r25, 0x80	; 128
    1f4a:	f8 94       	cli
        otable[i] = obj;
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	44 0f       	add	r20, r20
    1f50:	55 1f       	adc	r21, r21
    1f52:	da 01       	movw	r26, r20
    1f54:	a5 5d       	subi	r26, 0xD5	; 213
    1f56:	be 4f       	sbci	r27, 0xFE	; 254
    1f58:	ed 93       	st	X+, r30
    1f5a:	fc 93       	st	X, r31
        mtable[i] = m;
    1f5c:	da 01       	movw	r26, r20
    1f5e:	ad 53       	subi	r26, 0x3D	; 61
    1f60:	be 4f       	sbci	r27, 0xFE	; 254
    1f62:	6d 93       	st	X+, r22
    1f64:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1f66:	21 e0       	ldi	r18, 0x01	; 1
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	33 83       	std	Z+3, r19	; 0x03
    1f6c:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    1f6e:	99 23       	and	r25, r25
    1f70:	09 f0       	breq	.+2      	; 0x1f74 <install+0x34>
    1f72:	78 94       	sei
    1f74:	08 95       	ret

00001f76 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1f76:	8c 01       	movw	r16, r24
    1f78:	7b 01       	movw	r14, r22
    1f7a:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1f7c:	8f b7       	in	r24, 0x3f	; 63
    1f7e:	f8 94       	cli
    initialize();
    1f80:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <initialize>
    ENABLE(1);
    1f84:	78 94       	sei
    if (m != NULL)
    1f86:	e1 14       	cp	r14, r1
    1f88:	f1 04       	cpc	r15, r1
    1f8a:	41 f0       	breq	.+16     	; 0x1f9c <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	a9 01       	movw	r20, r18
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	cb 01       	movw	r24, r22
    1f98:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
    DISABLE(status);
    1f9c:	8f b7       	in	r24, 0x3f	; 63
    1f9e:	f8 94       	cli
    idle();
    1fa0:	0e 94 c4 0c 	call	0x1988	; 0x1988 <idle>

00001fa4 <carsEnter>:
    self->onBridge += 1;
    // AFTER(SEC(5), self, carDestroy, NULL); // 5 sec to cross bridge
    ASYNC(self, printCars, NULL);
}

void carsEnter(Bridge *self) {
    1fa4:	cf 92       	push	r12
    1fa6:	df 92       	push	r13
    1fa8:	ef 92       	push	r14
    1faa:	ff 92       	push	r15
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	ec 01       	movw	r28, r24
	if(self->onBridge < 5) {
    1fb6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fb8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fba:	05 97       	sbiw	r24, 0x05	; 5
    1fbc:	d4 f4       	brge	.+52     	; 0x1ff2 <carsEnter+0x4e>
		if(self->direction == southGreen && self->southQueue > 0) {
    1fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	49 f4       	brne	.+18     	; 0x1fd8 <carsEnter+0x34>
    1fc6:	88 85       	ldd	r24, Y+8	; 0x08
    1fc8:	99 85       	ldd	r25, Y+9	; 0x09
    1fca:	18 16       	cp	r1, r24
    1fcc:	19 06       	cpc	r1, r25
    1fce:	24 f4       	brge	.+8      	; 0x1fd8 <carsEnter+0x34>
			USART_Transmit(0b0100);
    1fd0:	84 e0       	ldi	r24, 0x04	; 4
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 13 11 	call	0x2226	; 0x2226 <USART_Transmit>

			
		}
		if(self->direction == northGreen && self->northQueue > 0) {
    1fd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fda:	9d 81       	ldd	r25, Y+5	; 0x05
    1fdc:	89 2b       	or	r24, r25
    1fde:	49 f4       	brne	.+18     	; 0x1ff2 <carsEnter+0x4e>
    1fe0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe2:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe4:	18 16       	cp	r1, r24
    1fe6:	19 06       	cpc	r1, r25
    1fe8:	24 f4       	brge	.+8      	; 0x1ff2 <carsEnter+0x4e>
			USART_Transmit(0b0001);
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	0e 94 13 11 	call	0x2226	; 0x2226 <USART_Transmit>

			
		}
		
	}
	AFTER(SEC(1), self, carsEnter, NULL);
    1ff2:	c1 2c       	mov	r12, r1
    1ff4:	d1 2c       	mov	r13, r1
    1ff6:	0f 2e       	mov	r0, r31
    1ff8:	f2 ed       	ldi	r31, 0xD2	; 210
    1ffa:	ef 2e       	mov	r14, r31
    1ffc:	ff e0       	ldi	r31, 0x0F	; 15
    1ffe:	ff 2e       	mov	r15, r31
    2000:	f0 2d       	mov	r31, r0
    2002:	8e 01       	movw	r16, r28
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	a9 01       	movw	r20, r18
    200a:	62 e1       	ldi	r22, 0x12	; 18
    200c:	7a e7       	ldi	r23, 0x7A	; 122
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
			}
		}

        AFTER(SEC(1), self, carsEnter, NULL); // - transmit light status to simulation.
		*/
	}
    2016:	df 91       	pop	r29
    2018:	cf 91       	pop	r28
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	ff 90       	pop	r15
    2020:	ef 90       	pop	r14
    2022:	df 90       	pop	r13
    2024:	cf 90       	pop	r12
    2026:	08 95       	ret

00002028 <printCars>:
	printAt(self->northQueue,4);
	

}

void printCars(Bridge *self) {
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	ec 01       	movw	r28, r24
    // prints cars in queue and on bridge to LCD-display.
	printAt(self->southQueue,0);
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	88 85       	ldd	r24, Y+8	; 0x08
    2034:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printAt>
	printAt(self->onBridge,2);
    2038:	62 e0       	ldi	r22, 0x02	; 2
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	8a 85       	ldd	r24, Y+10	; 0x0a
    203e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printAt>
	printAt(self->northQueue,4);
    2042:	64 e0       	ldi	r22, 0x04	; 4
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	8e 81       	ldd	r24, Y+6	; 0x06
    2048:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printAt>
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	08 95       	ret

00002052 <NorthboundArrival>:
#include <stdbool.h>
#include "trafficLights.h"
#include "TinyTimber.h"
#include <avr/io.h>

void NorthboundArrival(Bridge *self) {
    2052:	cf 92       	push	r12
    2054:	df 92       	push	r13
    2056:	ef 92       	push	r14
    2058:	ff 92       	push	r15
    205a:	0f 93       	push	r16
    205c:	1f 93       	push	r17
    // adds car to the northbound bridge queue.
	self->northQueue += 1;
    205e:	fc 01       	movw	r30, r24
    2060:	26 81       	ldd	r18, Z+6	; 0x06
    2062:	37 81       	ldd	r19, Z+7	; 0x07
    2064:	2f 5f       	subi	r18, 0xFF	; 255
    2066:	3f 4f       	sbci	r19, 0xFF	; 255
    2068:	37 83       	std	Z+7, r19	; 0x07
    206a:	26 83       	std	Z+6, r18	; 0x06
	ASYNC(self, printCars, NULL);
    206c:	c1 2c       	mov	r12, r1
    206e:	d1 2c       	mov	r13, r1
    2070:	0f 2e       	mov	r0, r31
    2072:	f4 e1       	ldi	r31, 0x14	; 20
    2074:	ef 2e       	mov	r14, r31
    2076:	f0 e1       	ldi	r31, 0x10	; 16
    2078:	ff 2e       	mov	r15, r31
    207a:	f0 2d       	mov	r31, r0
    207c:	8c 01       	movw	r16, r24
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	a9 01       	movw	r20, r18
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	70 e0       	ldi	r23, 0x00	; 0
    2088:	cb 01       	movw	r24, r22
    208a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
}
    208e:	1f 91       	pop	r17
    2090:	0f 91       	pop	r16
    2092:	ff 90       	pop	r15
    2094:	ef 90       	pop	r14
    2096:	df 90       	pop	r13
    2098:	cf 90       	pop	r12
    209a:	08 95       	ret

0000209c <SouthboundArrival>:

void SouthboundArrival(Bridge *self) {
    209c:	cf 92       	push	r12
    209e:	df 92       	push	r13
    20a0:	ef 92       	push	r14
    20a2:	ff 92       	push	r15
    20a4:	0f 93       	push	r16
    20a6:	1f 93       	push	r17
    // adds car to the southbound bridge queue.
	self->southQueue += 1;
    20a8:	fc 01       	movw	r30, r24
    20aa:	20 85       	ldd	r18, Z+8	; 0x08
    20ac:	31 85       	ldd	r19, Z+9	; 0x09
    20ae:	2f 5f       	subi	r18, 0xFF	; 255
    20b0:	3f 4f       	sbci	r19, 0xFF	; 255
    20b2:	31 87       	std	Z+9, r19	; 0x09
    20b4:	20 87       	std	Z+8, r18	; 0x08
	ASYNC(self, printCars, NULL);
    20b6:	c1 2c       	mov	r12, r1
    20b8:	d1 2c       	mov	r13, r1
    20ba:	0f 2e       	mov	r0, r31
    20bc:	f4 e1       	ldi	r31, 0x14	; 20
    20be:	ef 2e       	mov	r14, r31
    20c0:	f0 e1       	ldi	r31, 0x10	; 16
    20c2:	ff 2e       	mov	r15, r31
    20c4:	f0 2d       	mov	r31, r0
    20c6:	8c 01       	movw	r16, r24
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	a9 01       	movw	r20, r18
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	70 e0       	ldi	r23, 0x00	; 0
    20d2:	cb 01       	movw	r24, r22
    20d4:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
}
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	df 90       	pop	r13
    20e2:	cf 90       	pop	r12
    20e4:	08 95       	ret

000020e6 <enterSouth>:

void enterSouth(Bridge *self) {
    20e6:	cf 92       	push	r12
    20e8:	df 92       	push	r13
    20ea:	ef 92       	push	r14
    20ec:	ff 92       	push	r15
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	fc 01       	movw	r30, r24
    // Creates car event on bridge from south
    self->southQueue -= 1;
    20f4:	80 85       	ldd	r24, Z+8	; 0x08
    20f6:	91 85       	ldd	r25, Z+9	; 0x09
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	91 87       	std	Z+9, r25	; 0x09
    20fc:	80 87       	std	Z+8, r24	; 0x08
    self->onBridge += 1;
    20fe:	82 85       	ldd	r24, Z+10	; 0x0a
    2100:	93 85       	ldd	r25, Z+11	; 0x0b
    2102:	01 96       	adiw	r24, 0x01	; 1
    2104:	93 87       	std	Z+11, r25	; 0x0b
    2106:	82 87       	std	Z+10, r24	; 0x0a
    // AFTER(SEC(5), self, carDestroy, NULL); // 5 sec to cross bridge
    ASYNC(self, printCars, NULL);
    2108:	c1 2c       	mov	r12, r1
    210a:	d1 2c       	mov	r13, r1
    210c:	0f 2e       	mov	r0, r31
    210e:	f4 e1       	ldi	r31, 0x14	; 20
    2110:	ef 2e       	mov	r14, r31
    2112:	f0 e1       	ldi	r31, 0x10	; 16
    2114:	ff 2e       	mov	r15, r31
    2116:	f0 2d       	mov	r31, r0
    2118:	8f 01       	movw	r16, r30
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	a9 01       	movw	r20, r18
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	70 e0       	ldi	r23, 0x00	; 0
    2124:	cb 01       	movw	r24, r22
    2126:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
}
    212a:	1f 91       	pop	r17
    212c:	0f 91       	pop	r16
    212e:	ff 90       	pop	r15
    2130:	ef 90       	pop	r14
    2132:	df 90       	pop	r13
    2134:	cf 90       	pop	r12
    2136:	08 95       	ret

00002138 <enterNorth>:

void enterNorth(Bridge *self) {
    2138:	cf 92       	push	r12
    213a:	df 92       	push	r13
    213c:	ef 92       	push	r14
    213e:	ff 92       	push	r15
    2140:	0f 93       	push	r16
    2142:	1f 93       	push	r17
    2144:	fc 01       	movw	r30, r24
    // Creates car event on bridge from north
    self->northQueue -= 1;
    2146:	86 81       	ldd	r24, Z+6	; 0x06
    2148:	97 81       	ldd	r25, Z+7	; 0x07
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	97 83       	std	Z+7, r25	; 0x07
    214e:	86 83       	std	Z+6, r24	; 0x06
    self->onBridge += 1;
    2150:	82 85       	ldd	r24, Z+10	; 0x0a
    2152:	93 85       	ldd	r25, Z+11	; 0x0b
    2154:	01 96       	adiw	r24, 0x01	; 1
    2156:	93 87       	std	Z+11, r25	; 0x0b
    2158:	82 87       	std	Z+10, r24	; 0x0a
    // AFTER(SEC(5), self, carDestroy, NULL); // 5 sec to cross bridge
    ASYNC(self, printCars, NULL);
    215a:	c1 2c       	mov	r12, r1
    215c:	d1 2c       	mov	r13, r1
    215e:	0f 2e       	mov	r0, r31
    2160:	f4 e1       	ldi	r31, 0x14	; 20
    2162:	ef 2e       	mov	r14, r31
    2164:	f0 e1       	ldi	r31, 0x10	; 16
    2166:	ff 2e       	mov	r15, r31
    2168:	f0 2d       	mov	r31, r0
    216a:	8f 01       	movw	r16, r30
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	a9 01       	movw	r20, r18
    2172:	60 e0       	ldi	r22, 0x00	; 0
    2174:	70 e0       	ldi	r23, 0x00	; 0
    2176:	cb 01       	movw	r24, r22
    2178:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
}
    217c:	1f 91       	pop	r17
    217e:	0f 91       	pop	r16
    2180:	ff 90       	pop	r15
    2182:	ef 90       	pop	r14
    2184:	df 90       	pop	r13
    2186:	cf 90       	pop	r12
    2188:	08 95       	ret

0000218a <carDestroy>:
        AFTER(SEC(1), self, carsEnter, NULL); // - transmit light status to simulation.
		*/
	}
	

void carDestroy(Bridge *self) {
    218a:	cf 92       	push	r12
    218c:	df 92       	push	r13
    218e:	ef 92       	push	r14
    2190:	ff 92       	push	r15
    2192:	0f 93       	push	r16
    2194:	1f 93       	push	r17
    // demolishes car from simulation
	if(self->onBridge > 0) {
    2196:	fc 01       	movw	r30, r24
    2198:	22 85       	ldd	r18, Z+10	; 0x0a
    219a:	33 85       	ldd	r19, Z+11	; 0x0b
    219c:	12 16       	cp	r1, r18
    219e:	13 06       	cpc	r1, r19
    21a0:	ac f4       	brge	.+42     	; 0x21cc <carDestroy+0x42>
    21a2:	8c 01       	movw	r16, r24
		self->onBridge -= 1;
    21a4:	21 50       	subi	r18, 0x01	; 1
    21a6:	31 09       	sbc	r19, r1
    21a8:	33 87       	std	Z+11, r19	; 0x0b
    21aa:	22 87       	std	Z+10, r18	; 0x0a
		ASYNC(self, printCars, NULL);
    21ac:	c1 2c       	mov	r12, r1
    21ae:	d1 2c       	mov	r13, r1
    21b0:	0f 2e       	mov	r0, r31
    21b2:	f4 e1       	ldi	r31, 0x14	; 20
    21b4:	ef 2e       	mov	r14, r31
    21b6:	f0 e1       	ldi	r31, 0x10	; 16
    21b8:	ff 2e       	mov	r15, r31
    21ba:	f0 2d       	mov	r31, r0
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	a9 01       	movw	r20, r18
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	cb 01       	movw	r24, r22
    21c8:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <async>
	}
}
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	ff 90       	pop	r15
    21d2:	ef 90       	pop	r14
    21d4:	df 90       	pop	r13
    21d6:	cf 90       	pop	r12
    21d8:	08 95       	ret

000021da <init>:

void init(Bridge *self) {
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
    21de:	ec 01       	movw	r28, r24
	// initiates bridge and starts car event.
	printAt(self->southQueue,0);
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	88 85       	ldd	r24, Y+8	; 0x08
    21e6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printAt>
 	printAt(self->onBridge,2);
    21ea:	62 e0       	ldi	r22, 0x02	; 2
    21ec:	70 e0       	ldi	r23, 0x00	; 0
    21ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printAt>
	printAt(self->northQueue,4);
    21f4:	64 e0       	ldi	r22, 0x04	; 4
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	8e 81       	ldd	r24, Y+6	; 0x06
    21fa:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printAt>
	

}
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	08 95       	ret

00002204 <USART_Receive2>:
#include "Gui.h"
#include "USART_Receive.h"
#include <avr/io.h>

// - handles input data from simulation.
uint8_t USART_Receive2() {
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	1f 92       	push	r1
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62

    // - Wait for data to be received in buffer.
    while(!(UCSR0A & (1<<RXC0)));
    220e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
    2212:	88 23       	and	r24, r24
    2214:	e4 f7       	brge	.-8      	; 0x220e <USART_Receive2+0xa>

    // - Make received input data from buffer 8 bit length for comparing.
    volatile uint8_t input = UDR0;
    2216:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    221a:	89 83       	std	Y+1, r24	; 0x01

    return input;
    221c:	89 81       	ldd	r24, Y+1	; 0x01

}
    221e:	0f 90       	pop	r0
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <USART_Transmit>:


void USART_Transmit(unsigned char data) {
    // - Transmit light status to simulation.
    while(!(UCSR0A & (1<<UDRE0)));
    2226:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
    222a:	95 ff       	sbrs	r25, 5
    222c:	fc cf       	rjmp	.-8      	; 0x2226 <USART_Transmit>
    UDR0 = data;
    222e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    2232:	08 95       	ret

00002234 <__tablejump2__>:
    2234:	ee 0f       	add	r30, r30
    2236:	ff 1f       	adc	r31, r31
    2238:	05 90       	lpm	r0, Z+
    223a:	f4 91       	lpm	r31, Z
    223c:	e0 2d       	mov	r30, r0
    223e:	09 94       	ijmp

00002240 <setjmp>:
    2240:	dc 01       	movw	r26, r24
    2242:	2d 92       	st	X+, r2
    2244:	3d 92       	st	X+, r3
    2246:	4d 92       	st	X+, r4
    2248:	5d 92       	st	X+, r5
    224a:	6d 92       	st	X+, r6
    224c:	7d 92       	st	X+, r7
    224e:	8d 92       	st	X+, r8
    2250:	9d 92       	st	X+, r9
    2252:	ad 92       	st	X+, r10
    2254:	bd 92       	st	X+, r11
    2256:	cd 92       	st	X+, r12
    2258:	dd 92       	st	X+, r13
    225a:	ed 92       	st	X+, r14
    225c:	fd 92       	st	X+, r15
    225e:	0d 93       	st	X+, r16
    2260:	1d 93       	st	X+, r17
    2262:	cd 93       	st	X+, r28
    2264:	dd 93       	st	X+, r29
    2266:	ff 91       	pop	r31
    2268:	ef 91       	pop	r30
    226a:	8d b7       	in	r24, 0x3d	; 61
    226c:	8d 93       	st	X+, r24
    226e:	8e b7       	in	r24, 0x3e	; 62
    2270:	8d 93       	st	X+, r24
    2272:	8f b7       	in	r24, 0x3f	; 63
    2274:	8d 93       	st	X+, r24
    2276:	ed 93       	st	X+, r30
    2278:	fd 93       	st	X+, r31
    227a:	88 27       	eor	r24, r24
    227c:	99 27       	eor	r25, r25
    227e:	09 94       	ijmp

00002280 <longjmp>:
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	81 30       	cpi	r24, 0x01	; 1
    2286:	91 05       	cpc	r25, r1
    2288:	81 1d       	adc	r24, r1
    228a:	2d 90       	ld	r2, X+
    228c:	3d 90       	ld	r3, X+
    228e:	4d 90       	ld	r4, X+
    2290:	5d 90       	ld	r5, X+
    2292:	6d 90       	ld	r6, X+
    2294:	7d 90       	ld	r7, X+
    2296:	8d 90       	ld	r8, X+
    2298:	9d 90       	ld	r9, X+
    229a:	ad 90       	ld	r10, X+
    229c:	bd 90       	ld	r11, X+
    229e:	cd 90       	ld	r12, X+
    22a0:	dd 90       	ld	r13, X+
    22a2:	ed 90       	ld	r14, X+
    22a4:	fd 90       	ld	r15, X+
    22a6:	0d 91       	ld	r16, X+
    22a8:	1d 91       	ld	r17, X+
    22aa:	cd 91       	ld	r28, X+
    22ac:	dd 91       	ld	r29, X+
    22ae:	ed 91       	ld	r30, X+
    22b0:	fd 91       	ld	r31, X+
    22b2:	0d 90       	ld	r0, X+
    22b4:	f8 94       	cli
    22b6:	fe bf       	out	0x3e, r31	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	ed bf       	out	0x3d, r30	; 61
    22bc:	ed 91       	ld	r30, X+
    22be:	fd 91       	ld	r31, X+
    22c0:	09 94       	ijmp

000022c2 <_exit>:
    22c2:	f8 94       	cli

000022c4 <__stop_program>:
    22c4:	ff cf       	rjmp	.-2      	; 0x22c4 <__stop_program>
