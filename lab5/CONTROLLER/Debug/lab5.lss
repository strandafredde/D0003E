
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000292e  000029c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000292e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035e  0080011c  0080011c  000029de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000029de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00002a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002993  00000000  00000000  00002cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001001  00000000  00000000  00005667  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000171f  00000000  00000000  00006668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ccc  00000000  00000000  00007d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000096a  00000000  00000000  00008a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028a9  00000000  00000000  000093be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000bc67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
       4:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_1>
       8:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__vector_2>
       c:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__vector_3>
      10:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__vector_4>
      14:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__vector_5>
      18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      1c:	0c 94 16 0d 	jmp	0x1a2c	; 0x1a2c <__vector_7>
      20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
      24:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__vector_9>
      28:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__vector_10>
      2c:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__vector_11>
      30:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__vector_12>
      34:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_13>
      38:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_14>
      3c:	0c 94 45 09 	jmp	0x128a	; 0x128a <__vector_15>
      40:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__vector_16>
      44:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__vector_17>
      48:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__vector_18>
      4c:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__vector_19>
      50:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__vector_20>
      54:	0c 94 df 0b 	jmp	0x17be	; 0x17be <__vector_21>
      58:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__vector_22>
      5c:	64 01       	movw	r12, r8
      5e:	4c 01       	movw	r8, r24
      60:	4f 01       	movw	r8, r30
      62:	52 01       	movw	r10, r4
      64:	55 01       	movw	r10, r10
      66:	58 01       	movw	r10, r16
      68:	5b 01       	movw	r10, r22
      6a:	5e 01       	movw	r10, r28
      6c:	61 01       	movw	r12, r2

0000006e <__ctors_end>:
      6e:	11 24       	eor	r1, r1
      70:	1f be       	out	0x3f, r1	; 63
      72:	cf ef       	ldi	r28, 0xFF	; 255
      74:	d4 e0       	ldi	r29, 0x04	; 4
      76:	de bf       	out	0x3e, r29	; 62
      78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
      7a:	11 e0       	ldi	r17, 0x01	; 1
      7c:	a0 e0       	ldi	r26, 0x00	; 0
      7e:	b1 e0       	ldi	r27, 0x01	; 1
      80:	ee e2       	ldi	r30, 0x2E	; 46
      82:	f9 e2       	ldi	r31, 0x29	; 41
      84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
      86:	05 90       	lpm	r0, Z+
      88:	0d 92       	st	X+, r0
      8a:	ac 31       	cpi	r26, 0x1C	; 28
      8c:	b1 07       	cpc	r27, r17
      8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
      90:	24 e0       	ldi	r18, 0x04	; 4
      92:	ac e1       	ldi	r26, 0x1C	; 28
      94:	b1 e0       	ldi	r27, 0x01	; 1
      96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
      98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
      9a:	aa 37       	cpi	r26, 0x7A	; 122
      9c:	b2 07       	cpc	r27, r18
      9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>
      a0:	0e 94 28 03 	call	0x650	; 0x650 <main>
      a4:	0c 94 95 14 	jmp	0x292a	; 0x292a <_exit>

000000a8 <__bad_interrupt>:
      a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <dataHandler>:
#include "USART_Receive.h"
#include <avr/io.h>
#include <stdio.h>
#include "TinyTimber.h"

void dataHandler(ControllerHandler *self) {
      ac:	af 92       	push	r10
      ae:	bf 92       	push	r11
      b0:	cf 92       	push	r12
      b2:	df 92       	push	r13
      b4:	ef 92       	push	r14
      b6:	ff 92       	push	r15
      b8:	0f 93       	push	r16
      ba:	1f 93       	push	r17
      bc:	cf 93       	push	r28
      be:	5c 01       	movw	r10, r24
    uint8_t input = USART_Receive2();
      c0:	0e 94 58 11 	call	0x22b0	; 0x22b0 <USART_Receive2>
      c4:	c8 2f       	mov	r28, r24

    if (input & 0b00000010) // - car enters bridge northbound.
      c6:	81 ff       	sbrs	r24, 1
      c8:	25 c0       	rjmp	.+74     	; 0x114 <dataHandler+0x68>
    {
        ASYNC(self->bridge, enterNorth, NULL); // - Add queueing car to bridge.
      ca:	f5 01       	movw	r30, r10
      cc:	04 81       	ldd	r16, Z+4	; 0x04
      ce:	15 81       	ldd	r17, Z+5	; 0x05
      d0:	c1 2c       	mov	r12, r1
      d2:	d1 2c       	mov	r13, r1
      d4:	0f 2e       	mov	r0, r31
      d6:	f2 ef       	ldi	r31, 0xF2	; 242
      d8:	ef 2e       	mov	r14, r31
      da:	f0 e1       	ldi	r31, 0x10	; 16
      dc:	ff 2e       	mov	r15, r31
      de:	f0 2d       	mov	r31, r0
      e0:	20 e0       	ldi	r18, 0x00	; 0
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	a9 01       	movw	r20, r18
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	cb 01       	movw	r24, r22
      ec:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
        AFTER(SEC(5), self->bridge, carDestroy, NULL);
      f0:	f5 01       	movw	r30, r10
      f2:	04 81       	ldd	r16, Z+4	; 0x04
      f4:	15 81       	ldd	r17, Z+5	; 0x05
      f6:	0f 2e       	mov	r0, r31
      f8:	fb e1       	ldi	r31, 0x1B	; 27
      fa:	ef 2e       	mov	r14, r31
      fc:	f1 e1       	ldi	r31, 0x11	; 17
      fe:	ff 2e       	mov	r15, r31
     100:	f0 2d       	mov	r31, r0
     102:	20 e0       	ldi	r18, 0x00	; 0
     104:	30 e0       	ldi	r19, 0x00	; 0
     106:	a9 01       	movw	r20, r18
     108:	6a e5       	ldi	r22, 0x5A	; 90
     10a:	72 e6       	ldi	r23, 0x62	; 98
     10c:	82 e0       	ldi	r24, 0x02	; 2
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
    }
    if (input & 0b00001000) // - car enters bridge southbound.
     114:	c3 ff       	sbrs	r28, 3
     116:	25 c0       	rjmp	.+74     	; 0x162 <dataHandler+0xb6>
    {
        ASYNC(self->bridge, enterSouth, NULL); // - Add queueing car to bridge.
     118:	f5 01       	movw	r30, r10
     11a:	04 81       	ldd	r16, Z+4	; 0x04
     11c:	15 81       	ldd	r17, Z+5	; 0x05
     11e:	c1 2c       	mov	r12, r1
     120:	d1 2c       	mov	r13, r1
     122:	0f 2e       	mov	r0, r31
     124:	f9 ec       	ldi	r31, 0xC9	; 201
     126:	ef 2e       	mov	r14, r31
     128:	f0 e1       	ldi	r31, 0x10	; 16
     12a:	ff 2e       	mov	r15, r31
     12c:	f0 2d       	mov	r31, r0
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	a9 01       	movw	r20, r18
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	70 e0       	ldi	r23, 0x00	; 0
     138:	cb 01       	movw	r24, r22
     13a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
        AFTER(SEC(5), self->bridge, carDestroy, NULL);
     13e:	f5 01       	movw	r30, r10
     140:	04 81       	ldd	r16, Z+4	; 0x04
     142:	15 81       	ldd	r17, Z+5	; 0x05
     144:	0f 2e       	mov	r0, r31
     146:	fb e1       	ldi	r31, 0x1B	; 27
     148:	ef 2e       	mov	r14, r31
     14a:	f1 e1       	ldi	r31, 0x11	; 17
     14c:	ff 2e       	mov	r15, r31
     14e:	f0 2d       	mov	r31, r0
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	a9 01       	movw	r20, r18
     156:	6a e5       	ldi	r22, 0x5A	; 90
     158:	72 e6       	ldi	r23, 0x62	; 98
     15a:	82 e0       	ldi	r24, 0x02	; 2
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
    }
    if (input & 0b00000001) // - car enters queue northbound.
     162:	c0 ff       	sbrs	r28, 0
     164:	13 c0       	rjmp	.+38     	; 0x18c <dataHandler+0xe0>
    {
        ASYNC(self->bridge, NorthboundArrival, NULL); // - Add arriving car to queue.
     166:	f5 01       	movw	r30, r10
     168:	04 81       	ldd	r16, Z+4	; 0x04
     16a:	15 81       	ldd	r17, Z+5	; 0x05
     16c:	c1 2c       	mov	r12, r1
     16e:	d1 2c       	mov	r13, r1
     170:	0f 2e       	mov	r0, r31
     172:	ff e7       	ldi	r31, 0x7F	; 127
     174:	ef 2e       	mov	r14, r31
     176:	f0 e1       	ldi	r31, 0x10	; 16
     178:	ff 2e       	mov	r15, r31
     17a:	f0 2d       	mov	r31, r0
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	a9 01       	movw	r20, r18
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	cb 01       	movw	r24, r22
     188:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
    }
    if (input & 0b00000100) // - car enters queue southbound.
     18c:	c2 ff       	sbrs	r28, 2
     18e:	13 c0       	rjmp	.+38     	; 0x1b6 <dataHandler+0x10a>
    {
        ASYNC(self->bridge, SouthboundArrival, NULL); // - Add arriving car to queue.
     190:	f5 01       	movw	r30, r10
     192:	04 81       	ldd	r16, Z+4	; 0x04
     194:	15 81       	ldd	r17, Z+5	; 0x05
     196:	c1 2c       	mov	r12, r1
     198:	d1 2c       	mov	r13, r1
     19a:	0f 2e       	mov	r0, r31
     19c:	f4 ea       	ldi	r31, 0xA4	; 164
     19e:	ef 2e       	mov	r14, r31
     1a0:	f0 e1       	ldi	r31, 0x10	; 16
     1a2:	ff 2e       	mov	r15, r31
     1a4:	f0 2d       	mov	r31, r0
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	a9 01       	movw	r20, r18
     1ac:	60 e0       	ldi	r22, 0x00	; 0
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	cb 01       	movw	r24, r22
     1b2:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
    }

}
     1b6:	cf 91       	pop	r28
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	bf 90       	pop	r11
     1c6:	af 90       	pop	r10
     1c8:	08 95       	ret

000001ca <initiate>:

void initiate(ControllerHandler *self) {
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
    ASYNC(self->bridge, carsEnter, NULL);
     1d6:	fc 01       	movw	r30, r24
     1d8:	04 81       	ldd	r16, Z+4	; 0x04
     1da:	15 81       	ldd	r17, Z+5	; 0x05
     1dc:	c1 2c       	mov	r12, r1
     1de:	d1 2c       	mov	r13, r1
     1e0:	0f 2e       	mov	r0, r31
     1e2:	fb ec       	ldi	r31, 0xCB	; 203
     1e4:	ef 2e       	mov	r14, r31
     1e6:	ff e0       	ldi	r31, 0x0F	; 15
     1e8:	ff 2e       	mov	r15, r31
     1ea:	f0 2d       	mov	r31, r0
     1ec:	20 e0       	ldi	r18, 0x00	; 0
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	a9 01       	movw	r20, r18
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	70 e0       	ldi	r23, 0x00	; 0
     1f6:	cb 01       	movw	r24, r22
     1f8:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
     1fc:	1f 91       	pop	r17
     1fe:	0f 91       	pop	r16
     200:	ff 90       	pop	r15
     202:	ef 90       	pop	r14
     204:	df 90       	pop	r13
     206:	cf 90       	pop	r12
     208:	08 95       	ret

0000020a <LCD_init>:
     *
     * returns: none
     */
	
	//Initialize clock 
	CLKPR = 0x80;
     20a:	e1 e6       	ldi	r30, 0x61	; 97
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	80 83       	st	Z, r24
	CLKPR = 0x00;
     212:	10 82       	st	Z, r1
	
    /* Asynchronous clock, 1/3 bias, 1/4 duty cycle,   25 segments */
    LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
     214:	87 eb       	ldi	r24, 0xB7	; 183
     216:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
    /* Set volt to 3.35V */
    LCDCCR = (1<<LCDCC3) |(1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
     21a:	8f e0       	ldi	r24, 0x0F	; 15
     21c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
    /* Clock division factor to 8, and prescaler to 16 */
    LCDFRR = (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
     220:	87 e0       	ldi	r24, 0x07	; 7
     222:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
    /* low power waveform, no frame interrupt, no blanking */
    LCDCRA = (1<<LCDAB) | (1<<LCDEN);
     226:	90 ec       	ldi	r25, 0xC0	; 192
     228:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

    PORTB |= (1<<PB7)|(1<<PB6)|(1<<PB4);
     22c:	85 b1       	in	r24, 0x05	; 5
     22e:	80 6d       	ori	r24, 0xD0	; 208
     230:	85 b9       	out	0x05, r24	; 5
    PORTE |= (1<<PE2)|(1<<PE3);
     232:	8e b1       	in	r24, 0x0e	; 14
     234:	8c 60       	ori	r24, 0x0C	; 12
     236:	8e b9       	out	0x0e, r24	; 14
	DDRB   = (1<<DDB5)|(1<<DDB3)|(1<<DDB2)|(1<<DDB1)|(1<<DDB0);
     238:	8f e2       	ldi	r24, 0x2F	; 47
     23a:	84 b9       	out	0x04, r24	; 4
	DDRE   = (1<<DDE6)|(1<<DDE4);
     23c:	80 e5       	ldi	r24, 0x50	; 80
     23e:	8d b9       	out	0x0d, r24	; 13
   
    // Enable external interrupts
	PCMSK0 = (1<<PCINT3)|(1<<PCINT2);
     240:	8c e0       	ldi	r24, 0x0C	; 12
     242:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
	PCMSK1 = (1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
     246:	80 ed       	ldi	r24, 0xD0	; 208
     248:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (1 << PCIE1)|(1 << PCIE0);
     24c:	9d bb       	out	0x1d, r25	; 29
     24e:	08 95       	ret

00000250 <writeChar>:

    
}

void writeChar(char ch, int pos){
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	64 97       	sbiw	r28, 0x14	; 20
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	f8 94       	cli
     25e:	de bf       	out	0x3e, r29	; 62
     260:	0f be       	out	0x3f, r0	; 63
     262:	cd bf       	out	0x3d, r28	; 61
	#define SCC_6  0x1F41
	#define SCC_7  0x0111
	#define SCC_8  0x1F51
	#define SCC_9  0x0B51

	int numArr[10] = {SCC_0, SCC_1 , SCC_2, SCC_3, SCC_4, SCC_5, SCC_6, SCC_7, SCC_8, SCC_9};
     264:	94 e1       	ldi	r25, 0x14	; 20
     266:	e8 e0       	ldi	r30, 0x08	; 8
     268:	f1 e0       	ldi	r31, 0x01	; 1
     26a:	de 01       	movw	r26, r28
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	01 90       	ld	r0, Z+
     270:	0d 92       	st	X+, r0
     272:	9a 95       	dec	r25
     274:	e1 f7       	brne	.-8      	; 0x26e <writeChar+0x1e>
     */

    int i = 0;

    /* checks if pos is within fixed range */
    if(pos < 0 || pos > 5) {
     276:	66 30       	cpi	r22, 0x06	; 6
     278:	71 05       	cpc	r23, r1
     27a:	08 f0       	brcs	.+2      	; 0x27e <writeChar+0x2e>
     27c:	9d c1       	rjmp	.+826    	; 0x5b8 <__stack+0xb9>
        return;
    }

    /* index select of character */
    switch(ch){
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	fc 01       	movw	r30, r24
     282:	f1 97       	sbiw	r30, 0x31	; 49
     284:	e9 30       	cpi	r30, 0x09	; 9
     286:	f1 05       	cpc	r31, r1
     288:	20 f4       	brcc	.+8      	; 0x292 <writeChar+0x42>
     28a:	e2 5d       	subi	r30, 0xD2	; 210
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__tablejump2__>
     * position (int pos) if within fixed range.
     *
     * returns: none
     */

    int i = 0;
     292:	80 e0       	ldi	r24, 0x00	; 0
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	1a c0       	rjmp	.+52     	; 0x2cc <writeChar+0x7c>
            break;
        case '1':
            i = 1;
            break;
        case '2':
            i = 2;
     298:	82 e0       	ldi	r24, 0x02	; 2
     29a:	90 e0       	ldi	r25, 0x00	; 0
            break;
     29c:	17 c0       	rjmp	.+46     	; 0x2cc <writeChar+0x7c>
        case '3':
            i = 3;
     29e:	83 e0       	ldi	r24, 0x03	; 3
     2a0:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2a2:	14 c0       	rjmp	.+40     	; 0x2cc <writeChar+0x7c>
        case '4':
            i = 4;
     2a4:	84 e0       	ldi	r24, 0x04	; 4
     2a6:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2a8:	11 c0       	rjmp	.+34     	; 0x2cc <writeChar+0x7c>
        case '5':
            i = 5;
     2aa:	85 e0       	ldi	r24, 0x05	; 5
     2ac:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2ae:	0e c0       	rjmp	.+28     	; 0x2cc <writeChar+0x7c>
        case '6':
            i = 6;
     2b0:	86 e0       	ldi	r24, 0x06	; 6
     2b2:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2b4:	0b c0       	rjmp	.+22     	; 0x2cc <writeChar+0x7c>
        case '7':
            i = 7;
     2b6:	87 e0       	ldi	r24, 0x07	; 7
     2b8:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2ba:	08 c0       	rjmp	.+16     	; 0x2cc <writeChar+0x7c>
        case '8':
            i = 8;
     2bc:	88 e0       	ldi	r24, 0x08	; 8
     2be:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2c0:	05 c0       	rjmp	.+10     	; 0x2cc <writeChar+0x7c>
        case '9':
            i = 9;
     2c2:	89 e0       	ldi	r24, 0x09	; 9
     2c4:	90 e0       	ldi	r25, 0x00	; 0
            break;
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <writeChar+0x7c>
    switch(ch){
        case '0':
            i = 0;
            break;
        case '1':
            i = 1;
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
        default:
            break;
    }

    /* writes translated char at pos to LCD */
    switch(pos){
     2cc:	62 30       	cpi	r22, 0x02	; 2
     2ce:	71 05       	cpc	r23, r1
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <writeChar+0x84>
     2d2:	89 c0       	rjmp	.+274    	; 0x3e6 <writeChar+0x196>
     2d4:	44 f4       	brge	.+16     	; 0x2e6 <writeChar+0x96>
     2d6:	61 15       	cp	r22, r1
     2d8:	71 05       	cpc	r23, r1
     2da:	81 f0       	breq	.+32     	; 0x2fc <writeChar+0xac>
     2dc:	61 30       	cpi	r22, 0x01	; 1
     2de:	71 05       	cpc	r23, r1
     2e0:	09 f4       	brne	.+2      	; 0x2e4 <writeChar+0x94>
     2e2:	44 c0       	rjmp	.+136    	; 0x36c <writeChar+0x11c>
     2e4:	69 c1       	rjmp	.+722    	; 0x5b8 <__stack+0xb9>
     2e6:	64 30       	cpi	r22, 0x04	; 4
     2e8:	71 05       	cpc	r23, r1
     2ea:	09 f4       	brne	.+2      	; 0x2ee <writeChar+0x9e>
     2ec:	f1 c0       	rjmp	.+482    	; 0x4d0 <__DATA_REGION_LENGTH__+0xd0>
     2ee:	0c f4       	brge	.+2      	; 0x2f2 <writeChar+0xa2>
     2f0:	b2 c0       	rjmp	.+356    	; 0x456 <__DATA_REGION_LENGTH__+0x56>
     2f2:	65 30       	cpi	r22, 0x05	; 5
     2f4:	71 05       	cpc	r23, r1
     2f6:	09 f4       	brne	.+2      	; 0x2fa <writeChar+0xaa>
     2f8:	23 c1       	rjmp	.+582    	; 0x540 <__stack+0x41>
     2fa:	5e c1       	rjmp	.+700    	; 0x5b8 <__stack+0xb9>
        case 0:
            LCDDR0  = (LCDDR0&0x00F0)  |  (numArr[i] & 0x000F);
     2fc:	ac ee       	ldi	r26, 0xEC	; 236
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	2c 91       	ld	r18, X
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	e1 e0       	ldi	r30, 0x01	; 1
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	ec 0f       	add	r30, r28
     30c:	fd 1f       	adc	r31, r29
     30e:	e8 0f       	add	r30, r24
     310:	f9 1f       	adc	r31, r25
     312:	80 81       	ld	r24, Z
     314:	92 2f       	mov	r25, r18
     316:	90 7f       	andi	r25, 0xF0	; 240
     318:	8f 70       	andi	r24, 0x0F	; 15
     31a:	89 2b       	or	r24, r25
     31c:	8c 93       	st	X, r24
            LCDDR5  = (LCDDR5&0x00F0)  | ((numArr[i] & 0x00F0))>>4;
     31e:	a1 ef       	ldi	r26, 0xF1	; 241
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	2c 91       	ld	r18, X
     324:	80 81       	ld	r24, Z
     326:	91 81       	ldd	r25, Z+1	; 0x01
     328:	80 7f       	andi	r24, 0xF0	; 240
     32a:	99 27       	eor	r25, r25
     32c:	95 95       	asr	r25
     32e:	87 95       	ror	r24
     330:	95 95       	asr	r25
     332:	87 95       	ror	r24
     334:	95 95       	asr	r25
     336:	87 95       	ror	r24
     338:	95 95       	asr	r25
     33a:	87 95       	ror	r24
     33c:	92 2f       	mov	r25, r18
     33e:	90 7f       	andi	r25, 0xF0	; 240
     340:	89 2b       	or	r24, r25
     342:	8c 93       	st	X, r24
            LCDDR10 = (LCDDR10&0x00F0) | ((numArr[i] & 0x0F00))>>8;
     344:	a6 ef       	ldi	r26, 0xF6	; 246
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	8c 91       	ld	r24, X
     34a:	20 81       	ld	r18, Z
     34c:	31 81       	ldd	r19, Z+1	; 0x01
     34e:	22 27       	eor	r18, r18
     350:	3f 70       	andi	r19, 0x0F	; 15
     352:	80 7f       	andi	r24, 0xF0	; 240
     354:	83 2b       	or	r24, r19
     356:	8c 93       	st	X, r24
            LCDDR15 = (LCDDR15&0x00F0) | ((numArr[i] & 0xF000))>>12;
     358:	ab ef       	ldi	r26, 0xFB	; 251
     35a:	b0 e0       	ldi	r27, 0x00	; 0
     35c:	8c 91       	ld	r24, X
     35e:	91 81       	ldd	r25, Z+1	; 0x01
     360:	92 95       	swap	r25
     362:	9f 70       	andi	r25, 0x0F	; 15
     364:	80 7f       	andi	r24, 0xF0	; 240
     366:	89 2b       	or	r24, r25
     368:	8c 93       	st	X, r24
            break;
     36a:	26 c1       	rjmp	.+588    	; 0x5b8 <__stack+0xb9>
        case 1:
            LCDDR0  = (LCDDR0&0x000F)  |  ((numArr[i] & 0x000F))<<4;
     36c:	ac ee       	ldi	r26, 0xEC	; 236
     36e:	b0 e0       	ldi	r27, 0x00	; 0
     370:	2c 91       	ld	r18, X
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	e1 e0       	ldi	r30, 0x01	; 1
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	ec 0f       	add	r30, r28
     37c:	fd 1f       	adc	r31, r29
     37e:	e8 0f       	add	r30, r24
     380:	f9 1f       	adc	r31, r25
     382:	80 81       	ld	r24, Z
     384:	91 81       	ldd	r25, Z+1	; 0x01
     386:	82 95       	swap	r24
     388:	92 95       	swap	r25
     38a:	90 7f       	andi	r25, 0xF0	; 240
     38c:	98 27       	eor	r25, r24
     38e:	80 7f       	andi	r24, 0xF0	; 240
     390:	98 27       	eor	r25, r24
     392:	92 2f       	mov	r25, r18
     394:	9f 70       	andi	r25, 0x0F	; 15
     396:	89 2b       	or	r24, r25
     398:	8c 93       	st	X, r24
            LCDDR5  = (LCDDR5&0x000F)  |   (numArr[i] & 0x00F0);
     39a:	a1 ef       	ldi	r26, 0xF1	; 241
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	9c 91       	ld	r25, X
     3a0:	80 81       	ld	r24, Z
     3a2:	9f 70       	andi	r25, 0x0F	; 15
     3a4:	80 7f       	andi	r24, 0xF0	; 240
     3a6:	89 2b       	or	r24, r25
     3a8:	8c 93       	st	X, r24
            LCDDR10 = (LCDDR10&0x000F) |  ((numArr[i] & 0x0F00))>>4;
     3aa:	a6 ef       	ldi	r26, 0xF6	; 246
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	2c 91       	ld	r18, X
     3b0:	80 81       	ld	r24, Z
     3b2:	91 81       	ldd	r25, Z+1	; 0x01
     3b4:	88 27       	eor	r24, r24
     3b6:	9f 70       	andi	r25, 0x0F	; 15
     3b8:	95 95       	asr	r25
     3ba:	87 95       	ror	r24
     3bc:	95 95       	asr	r25
     3be:	87 95       	ror	r24
     3c0:	95 95       	asr	r25
     3c2:	87 95       	ror	r24
     3c4:	95 95       	asr	r25
     3c6:	87 95       	ror	r24
     3c8:	92 2f       	mov	r25, r18
     3ca:	9f 70       	andi	r25, 0x0F	; 15
     3cc:	89 2b       	or	r24, r25
     3ce:	8c 93       	st	X, r24
            LCDDR15 = (LCDDR15&0x000F) |  ((numArr[i] & 0xF000))>>8;
     3d0:	ab ef       	ldi	r26, 0xFB	; 251
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	8c 91       	ld	r24, X
     3d6:	20 81       	ld	r18, Z
     3d8:	31 81       	ldd	r19, Z+1	; 0x01
     3da:	22 27       	eor	r18, r18
     3dc:	30 7f       	andi	r19, 0xF0	; 240
     3de:	8f 70       	andi	r24, 0x0F	; 15
     3e0:	83 2b       	or	r24, r19
     3e2:	8c 93       	st	X, r24
            break;
     3e4:	e9 c0       	rjmp	.+466    	; 0x5b8 <__stack+0xb9>
        case 2:
            LCDDR1  = (LCDDR1&0x00F0)  |  (numArr[i] & 0x000F);
     3e6:	ad ee       	ldi	r26, 0xED	; 237
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	2c 91       	ld	r18, X
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	e1 e0       	ldi	r30, 0x01	; 1
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	ec 0f       	add	r30, r28
     3f6:	fd 1f       	adc	r31, r29
     3f8:	e8 0f       	add	r30, r24
     3fa:	f9 1f       	adc	r31, r25
     3fc:	80 81       	ld	r24, Z
     3fe:	92 2f       	mov	r25, r18
     400:	90 7f       	andi	r25, 0xF0	; 240
     402:	8f 70       	andi	r24, 0x0F	; 15
     404:	89 2b       	or	r24, r25
     406:	8c 93       	st	X, r24
            LCDDR6  = (LCDDR6&0x00F0)  |  ((numArr[i] & 0x00F0))>>4;
     408:	a2 ef       	ldi	r26, 0xF2	; 242
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	2c 91       	ld	r18, X
     40e:	80 81       	ld	r24, Z
     410:	91 81       	ldd	r25, Z+1	; 0x01
     412:	80 7f       	andi	r24, 0xF0	; 240
     414:	99 27       	eor	r25, r25
     416:	95 95       	asr	r25
     418:	87 95       	ror	r24
     41a:	95 95       	asr	r25
     41c:	87 95       	ror	r24
     41e:	95 95       	asr	r25
     420:	87 95       	ror	r24
     422:	95 95       	asr	r25
     424:	87 95       	ror	r24
     426:	92 2f       	mov	r25, r18
     428:	90 7f       	andi	r25, 0xF0	; 240
     42a:	89 2b       	or	r24, r25
     42c:	8c 93       	st	X, r24
            LCDDR11 = (LCDDR11&0x00F0) |  ((numArr[i] & 0x0F00))>>8;
     42e:	a7 ef       	ldi	r26, 0xF7	; 247
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	8c 91       	ld	r24, X
     434:	20 81       	ld	r18, Z
     436:	31 81       	ldd	r19, Z+1	; 0x01
     438:	22 27       	eor	r18, r18
     43a:	3f 70       	andi	r19, 0x0F	; 15
     43c:	80 7f       	andi	r24, 0xF0	; 240
     43e:	83 2b       	or	r24, r19
     440:	8c 93       	st	X, r24
            LCDDR16 = (LCDDR16&0x00F0) |  ((numArr[i] & 0xF000))>>12;
     442:	ac ef       	ldi	r26, 0xFC	; 252
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	8c 91       	ld	r24, X
     448:	91 81       	ldd	r25, Z+1	; 0x01
     44a:	92 95       	swap	r25
     44c:	9f 70       	andi	r25, 0x0F	; 15
     44e:	80 7f       	andi	r24, 0xF0	; 240
     450:	89 2b       	or	r24, r25
     452:	8c 93       	st	X, r24
            break;
     454:	b1 c0       	rjmp	.+354    	; 0x5b8 <__stack+0xb9>
        case 3:
            LCDDR1  = (LCDDR1&0x000F)  |  ((numArr[i] & 0x000F))<<4;
     456:	ad ee       	ldi	r26, 0xED	; 237
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	2c 91       	ld	r18, X
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	e1 e0       	ldi	r30, 0x01	; 1
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	ec 0f       	add	r30, r28
     466:	fd 1f       	adc	r31, r29
     468:	e8 0f       	add	r30, r24
     46a:	f9 1f       	adc	r31, r25
     46c:	80 81       	ld	r24, Z
     46e:	91 81       	ldd	r25, Z+1	; 0x01
     470:	82 95       	swap	r24
     472:	92 95       	swap	r25
     474:	90 7f       	andi	r25, 0xF0	; 240
     476:	98 27       	eor	r25, r24
     478:	80 7f       	andi	r24, 0xF0	; 240
     47a:	98 27       	eor	r25, r24
     47c:	92 2f       	mov	r25, r18
     47e:	9f 70       	andi	r25, 0x0F	; 15
     480:	89 2b       	or	r24, r25
     482:	8c 93       	st	X, r24
            LCDDR6  = (LCDDR6&0x000F)  |   (numArr[i] & 0x00F0);
     484:	a2 ef       	ldi	r26, 0xF2	; 242
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	9c 91       	ld	r25, X
     48a:	80 81       	ld	r24, Z
     48c:	9f 70       	andi	r25, 0x0F	; 15
     48e:	80 7f       	andi	r24, 0xF0	; 240
     490:	89 2b       	or	r24, r25
     492:	8c 93       	st	X, r24
            LCDDR11 = (LCDDR11&0x000F) |  ((numArr[i] & 0x0F00))>>4;
     494:	a7 ef       	ldi	r26, 0xF7	; 247
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	2c 91       	ld	r18, X
     49a:	80 81       	ld	r24, Z
     49c:	91 81       	ldd	r25, Z+1	; 0x01
     49e:	88 27       	eor	r24, r24
     4a0:	9f 70       	andi	r25, 0x0F	; 15
     4a2:	95 95       	asr	r25
     4a4:	87 95       	ror	r24
     4a6:	95 95       	asr	r25
     4a8:	87 95       	ror	r24
     4aa:	95 95       	asr	r25
     4ac:	87 95       	ror	r24
     4ae:	95 95       	asr	r25
     4b0:	87 95       	ror	r24
     4b2:	92 2f       	mov	r25, r18
     4b4:	9f 70       	andi	r25, 0x0F	; 15
     4b6:	89 2b       	or	r24, r25
     4b8:	8c 93       	st	X, r24
            LCDDR16 = (LCDDR16&0x000F) |  ((numArr[i] & 0xF000))>>8;
     4ba:	ac ef       	ldi	r26, 0xFC	; 252
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	8c 91       	ld	r24, X
     4c0:	20 81       	ld	r18, Z
     4c2:	31 81       	ldd	r19, Z+1	; 0x01
     4c4:	22 27       	eor	r18, r18
     4c6:	30 7f       	andi	r19, 0xF0	; 240
     4c8:	8f 70       	andi	r24, 0x0F	; 15
     4ca:	83 2b       	or	r24, r19
     4cc:	8c 93       	st	X, r24
            break;
     4ce:	74 c0       	rjmp	.+232    	; 0x5b8 <__stack+0xb9>
        case 4:
            LCDDR2  = (LCDDR2&0x00F0)  | ((numArr[i] & 0x000F));
     4d0:	ae ee       	ldi	r26, 0xEE	; 238
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	2c 91       	ld	r18, X
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	e1 e0       	ldi	r30, 0x01	; 1
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	ec 0f       	add	r30, r28
     4e0:	fd 1f       	adc	r31, r29
     4e2:	e8 0f       	add	r30, r24
     4e4:	f9 1f       	adc	r31, r25
     4e6:	80 81       	ld	r24, Z
     4e8:	92 2f       	mov	r25, r18
     4ea:	90 7f       	andi	r25, 0xF0	; 240
     4ec:	8f 70       	andi	r24, 0x0F	; 15
     4ee:	89 2b       	or	r24, r25
     4f0:	8c 93       	st	X, r24
            LCDDR7  = (LCDDR7&0x00F0)  | ((numArr[i] & 0x00F0))>>4;
     4f2:	a3 ef       	ldi	r26, 0xF3	; 243
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	2c 91       	ld	r18, X
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	80 7f       	andi	r24, 0xF0	; 240
     4fe:	99 27       	eor	r25, r25
     500:	95 95       	asr	r25
     502:	87 95       	ror	r24
     504:	95 95       	asr	r25
     506:	87 95       	ror	r24
     508:	95 95       	asr	r25
     50a:	87 95       	ror	r24
     50c:	95 95       	asr	r25
     50e:	87 95       	ror	r24
     510:	92 2f       	mov	r25, r18
     512:	90 7f       	andi	r25, 0xF0	; 240
     514:	89 2b       	or	r24, r25
     516:	8c 93       	st	X, r24
            LCDDR12 = (LCDDR12&0x00F0) | ((numArr[i] & 0x0F00))>>8;
     518:	a8 ef       	ldi	r26, 0xF8	; 248
     51a:	b0 e0       	ldi	r27, 0x00	; 0
     51c:	8c 91       	ld	r24, X
     51e:	20 81       	ld	r18, Z
     520:	31 81       	ldd	r19, Z+1	; 0x01
     522:	22 27       	eor	r18, r18
     524:	3f 70       	andi	r19, 0x0F	; 15
     526:	80 7f       	andi	r24, 0xF0	; 240
     528:	83 2b       	or	r24, r19
     52a:	8c 93       	st	X, r24
            LCDDR17 = (LCDDR17&0x00F0) | ((numArr[i] & 0xF000))>>12;
     52c:	ad ef       	ldi	r26, 0xFD	; 253
     52e:	b0 e0       	ldi	r27, 0x00	; 0
     530:	8c 91       	ld	r24, X
     532:	91 81       	ldd	r25, Z+1	; 0x01
     534:	92 95       	swap	r25
     536:	9f 70       	andi	r25, 0x0F	; 15
     538:	80 7f       	andi	r24, 0xF0	; 240
     53a:	89 2b       	or	r24, r25
     53c:	8c 93       	st	X, r24
            break;
     53e:	3c c0       	rjmp	.+120    	; 0x5b8 <__stack+0xb9>
        case 5:
            LCDDR2  = (LCDDR2&0x000F)  |  ((numArr[i] & 0x000F))<<4;
     540:	ae ee       	ldi	r26, 0xEE	; 238
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	2c 91       	ld	r18, X
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	e1 e0       	ldi	r30, 0x01	; 1
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	ec 0f       	add	r30, r28
     550:	fd 1f       	adc	r31, r29
     552:	e8 0f       	add	r30, r24
     554:	f9 1f       	adc	r31, r25
     556:	80 81       	ld	r24, Z
     558:	91 81       	ldd	r25, Z+1	; 0x01
     55a:	82 95       	swap	r24
     55c:	92 95       	swap	r25
     55e:	90 7f       	andi	r25, 0xF0	; 240
     560:	98 27       	eor	r25, r24
     562:	80 7f       	andi	r24, 0xF0	; 240
     564:	98 27       	eor	r25, r24
     566:	92 2f       	mov	r25, r18
     568:	9f 70       	andi	r25, 0x0F	; 15
     56a:	89 2b       	or	r24, r25
     56c:	8c 93       	st	X, r24
            LCDDR7  = (LCDDR7&0x000F)  |  (numArr[i] & 0x00F0);
     56e:	a3 ef       	ldi	r26, 0xF3	; 243
     570:	b0 e0       	ldi	r27, 0x00	; 0
     572:	9c 91       	ld	r25, X
     574:	80 81       	ld	r24, Z
     576:	9f 70       	andi	r25, 0x0F	; 15
     578:	80 7f       	andi	r24, 0xF0	; 240
     57a:	89 2b       	or	r24, r25
     57c:	8c 93       	st	X, r24
            LCDDR12 = (LCDDR12&0x000F) |  ((numArr[i] & 0x0F00))>>4;
     57e:	a8 ef       	ldi	r26, 0xF8	; 248
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	2c 91       	ld	r18, X
     584:	80 81       	ld	r24, Z
     586:	91 81       	ldd	r25, Z+1	; 0x01
     588:	88 27       	eor	r24, r24
     58a:	9f 70       	andi	r25, 0x0F	; 15
     58c:	95 95       	asr	r25
     58e:	87 95       	ror	r24
     590:	95 95       	asr	r25
     592:	87 95       	ror	r24
     594:	95 95       	asr	r25
     596:	87 95       	ror	r24
     598:	95 95       	asr	r25
     59a:	87 95       	ror	r24
     59c:	92 2f       	mov	r25, r18
     59e:	9f 70       	andi	r25, 0x0F	; 15
     5a0:	89 2b       	or	r24, r25
     5a2:	8c 93       	st	X, r24
            LCDDR17 = (LCDDR17&0x000F) |  ((numArr[i] & 0xF000))>>8;
     5a4:	ad ef       	ldi	r26, 0xFD	; 253
     5a6:	b0 e0       	ldi	r27, 0x00	; 0
     5a8:	8c 91       	ld	r24, X
     5aa:	20 81       	ld	r18, Z
     5ac:	31 81       	ldd	r19, Z+1	; 0x01
     5ae:	22 27       	eor	r18, r18
     5b0:	30 7f       	andi	r19, 0xF0	; 240
     5b2:	8f 70       	andi	r24, 0x0F	; 15
     5b4:	83 2b       	or	r24, r19
     5b6:	8c 93       	st	X, r24
            break;
        default:
            break;
    }

}
     5b8:	64 96       	adiw	r28, 0x14	; 20
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	08 95       	ret

000005ca <printAt>:


void printAt(uint8_t num, int pos ) {
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	d8 2f       	mov	r29, r24
     5d4:	8b 01       	movw	r16, r22
     *
     * returns: none
     */
	
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
     5d6:	89 e2       	ldi	r24, 0x29	; 41
     5d8:	d8 9f       	mul	r29, r24
     5da:	81 2d       	mov	r24, r1
     5dc:	11 24       	eor	r1, r1
     5de:	82 95       	swap	r24
     5e0:	8f 70       	andi	r24, 0x0F	; 15
     5e2:	9d 2f       	mov	r25, r29
     5e4:	24 e6       	ldi	r18, 0x64	; 100
     5e6:	82 9f       	mul	r24, r18
     5e8:	90 19       	sub	r25, r0
     5ea:	11 24       	eor	r1, r1
     5ec:	cd ec       	ldi	r28, 0xCD	; 205
     5ee:	9c 9f       	mul	r25, r28
     5f0:	81 2d       	mov	r24, r1
     5f2:	11 24       	eor	r1, r1
     5f4:	86 95       	lsr	r24
     5f6:	86 95       	lsr	r24
     5f8:	86 95       	lsr	r24
     5fa:	80 5d       	subi	r24, 0xD0	; 208
     5fc:	0e 94 28 01 	call	0x250	; 0x250 <writeChar>
    pp++;
     600:	b8 01       	movw	r22, r16
     602:	6f 5f       	subi	r22, 0xFF	; 255
     604:	7f 4f       	sbci	r23, 0xFF	; 255
    writeChar( num % 10 + '0', pp);
     606:	dc 9f       	mul	r29, r28
     608:	c1 2d       	mov	r28, r1
     60a:	11 24       	eor	r1, r1
     60c:	c6 95       	lsr	r28
     60e:	c6 95       	lsr	r28
     610:	c6 95       	lsr	r28
     612:	cc 0f       	add	r28, r28
     614:	8c 2f       	mov	r24, r28
     616:	88 0f       	add	r24, r24
     618:	88 0f       	add	r24, r24
     61a:	c8 0f       	add	r28, r24
     61c:	8d 2f       	mov	r24, r29
     61e:	8c 1b       	sub	r24, r28
     620:	80 5d       	subi	r24, 0xD0	; 208
     622:	0e 94 28 01 	call	0x250	; 0x250 <writeChar>
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	08 95       	ret

00000630 <USART_init>:
guiClass GUI = initGUI(NULL); // (pos)


void USART_init(void){
	// - Set baud rate prescaler.
	UBRR0H = (UBRR_VALUE >> 8);
     630:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = UBRR_VALUE;
     634:	84 e3       	ldi	r24, 0x34	; 52
     636:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	// - Enable receiver and transmitter
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1<<RXCIE0);
     63a:	e1 ec       	ldi	r30, 0xC1	; 193
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	88 69       	ori	r24, 0x98	; 152
     642:	80 83       	st	Z, r24
	// - Set frame format: 8 data bits, no parity, 1 stop bit.
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     644:	e2 ec       	ldi	r30, 0xC2	; 194
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	86 60       	ori	r24, 0x06	; 6
     64c:	80 83       	st	Z, r24
     64e:	08 95       	ret

00000650 <main>:

// - handles input data from simulation.



int main(void) {
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	66 97       	sbiw	r28, 0x16	; 22
     65a:	0f b6       	in	r0, 0x3f	; 63
     65c:	f8 94       	cli
     65e:	de bf       	out	0x3e, r29	; 62
     660:	0f be       	out	0x3f, r0	; 63
     662:	cd bf       	out	0x3d, r28	; 61
	USART_init(); // - initiate USART settings.
     664:	0e 94 18 03 	call	0x630	; 0x630 <USART_init>
	LCD_init(&GUI); // - initiate LCD.
     668:	8c e1       	ldi	r24, 0x1C	; 28
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	0e 94 05 01 	call	0x20a	; 0x20a <LCD_init>
	Bridge B = initBridge(); // - initiate traffic lights.
     670:	ce 01       	movw	r24, r28
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	20 e1       	ldi	r18, 0x10	; 16
     676:	fc 01       	movw	r30, r24
     678:	11 92       	st	Z+, r1
     67a:	2a 95       	dec	r18
     67c:	e9 f7       	brne	.-6      	; 0x678 <main+0x28>
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	3e 83       	std	Y+6, r19	; 0x06
     684:	2d 83       	std	Y+5, r18	; 0x05
	ControllerHandler CH = initControllerHandler(&B); // - initiate controller handler.
     686:	1a 8a       	std	Y+18, r1	; 0x12
     688:	19 8a       	std	Y+17, r1	; 0x11
     68a:	1c 8a       	std	Y+20, r1	; 0x14
     68c:	1b 8a       	std	Y+19, r1	; 0x13
     68e:	9e 8b       	std	Y+22, r25	; 0x16
     690:	8d 8b       	std	Y+21, r24	; 0x15
	init(&B); // - print cars on LCD.
     692:	0e 94 43 11 	call	0x2286	; 0x2286 <init>
	INSTALL(&CH, dataHandler, IRQ_USART0_RX);
     696:	48 e0       	ldi	r20, 0x08	; 8
     698:	66 e5       	ldi	r22, 0x56	; 86
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	ce 01       	movw	r24, r28
     69e:	41 96       	adiw	r24, 0x11	; 17
     6a0:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <install>
	TINYTIMBER(&CH, initiate, NULL);
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	65 ee       	ldi	r22, 0xE5	; 229
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	ce 01       	movw	r24, r28
     6ae:	41 96       	adiw	r24, 0x11	; 17
     6b0:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <tinytimber>

}
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	66 96       	adiw	r28, 0x16	; 22
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <initialize+0x6>
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <initialize+0x8>
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	18 c0       	rjmp	.+48     	; 0x70c <initialize+0x42>
     6dc:	ac 01       	movw	r20, r24
     6de:	4f 5f       	subi	r20, 0xFF	; 255
     6e0:	5f 4f       	sbci	r21, 0xFF	; 255
     6e2:	9a 01       	movw	r18, r20
     6e4:	22 95       	swap	r18
     6e6:	32 95       	swap	r19
     6e8:	30 7f       	andi	r19, 0xF0	; 240
     6ea:	32 27       	eor	r19, r18
     6ec:	20 7f       	andi	r18, 0xF0	; 240
     6ee:	32 27       	eor	r19, r18
     6f0:	2c 5f       	subi	r18, 0xFC	; 252
     6f2:	3d 4f       	sbci	r19, 0xFD	; 253
     6f4:	82 95       	swap	r24
     6f6:	92 95       	swap	r25
     6f8:	90 7f       	andi	r25, 0xF0	; 240
     6fa:	98 27       	eor	r25, r24
     6fc:	80 7f       	andi	r24, 0xF0	; 240
     6fe:	98 27       	eor	r25, r24
     700:	fc 01       	movw	r30, r24
     702:	ec 5f       	subi	r30, 0xFC	; 252
     704:	fd 4f       	sbci	r31, 0xFD	; 253
     706:	31 83       	std	Z+1, r19	; 0x01
     708:	20 83       	st	Z, r18
     70a:	ca 01       	movw	r24, r20
     70c:	8e 30       	cpi	r24, 0x0E	; 14
     70e:	91 05       	cpc	r25, r1
     710:	2c f3       	brlt	.-54     	; 0x6dc <initialize+0x12>
     712:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <messages+0xe1>
     716:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <messages+0xe0>
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	15 c0       	rjmp	.+42     	; 0x74a <initialize+0x80>
     720:	ac 01       	movw	r20, r24
     722:	4f 5f       	subi	r20, 0xFF	; 255
     724:	5f 4f       	sbci	r21, 0xFF	; 255
     726:	6d e1       	ldi	r22, 0x1D	; 29
     728:	64 9f       	mul	r22, r20
     72a:	90 01       	movw	r18, r0
     72c:	65 9f       	mul	r22, r21
     72e:	30 0d       	add	r19, r0
     730:	11 24       	eor	r1, r1
     732:	21 5b       	subi	r18, 0xB1	; 177
     734:	3e 4f       	sbci	r19, 0xFE	; 254
     736:	68 9f       	mul	r22, r24
     738:	f0 01       	movw	r30, r0
     73a:	69 9f       	mul	r22, r25
     73c:	f0 0d       	add	r31, r0
     73e:	11 24       	eor	r1, r1
     740:	e1 5b       	subi	r30, 0xB1	; 177
     742:	fe 4f       	sbci	r31, 0xFE	; 254
     744:	31 83       	std	Z+1, r19	; 0x01
     746:	20 83       	st	Z, r18
     748:	ca 01       	movw	r24, r20
     74a:	83 30       	cpi	r24, 0x03	; 3
     74c:	91 05       	cpc	r25, r1
     74e:	44 f3       	brlt	.-48     	; 0x720 <initialize+0x56>
     750:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <threads+0x58>
     754:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <threads+0x57>
     758:	1a 82       	std	Y+2, r1	; 0x02
     75a:	19 82       	std	Y+1, r1	; 0x01
     75c:	32 c0       	rjmp	.+100    	; 0x7c2 <initialize+0xf8>
     75e:	2d e1       	ldi	r18, 0x1D	; 29
     760:	49 81       	ldd	r20, Y+1	; 0x01
     762:	5a 81       	ldd	r21, Y+2	; 0x02
     764:	24 9f       	mul	r18, r20
     766:	c0 01       	movw	r24, r0
     768:	25 9f       	mul	r18, r21
     76a:	90 0d       	add	r25, r0
     76c:	11 24       	eor	r1, r1
     76e:	fc 01       	movw	r30, r24
     770:	eb 5a       	subi	r30, 0xAB	; 171
     772:	fe 4f       	sbci	r31, 0xFE	; 254
     774:	fc 83       	std	Y+4, r31	; 0x04
     776:	eb 83       	std	Y+3, r30	; 0x03
     778:	cf 01       	movw	r24, r30
     77a:	0e 94 76 11 	call	0x22ec	; 0x22ec <setjmp>
     77e:	20 e6       	ldi	r18, 0x60	; 96
     780:	49 81       	ldd	r20, Y+1	; 0x01
     782:	5a 81       	ldd	r21, Y+2	; 0x02
     784:	24 9f       	mul	r18, r20
     786:	c0 01       	movw	r24, r0
     788:	25 9f       	mul	r18, r21
     78a:	90 0d       	add	r25, r0
     78c:	11 24       	eor	r1, r1
     78e:	80 5b       	subi	r24, 0xB0	; 176
     790:	9c 4f       	sbci	r25, 0xFC	; 252
     792:	eb 81       	ldd	r30, Y+3	; 0x03
     794:	fc 81       	ldd	r31, Y+4	; 0x04
     796:	91 8b       	std	Z+17, r25	; 0x11
     798:	80 8b       	std	Z+16, r24	; 0x10
     79a:	93 8b       	std	Z+19, r25	; 0x13
     79c:	82 8b       	std	Z+18, r24	; 0x12
     79e:	81 e4       	ldi	r24, 0x41	; 65
     7a0:	9f e0       	ldi	r25, 0x0F	; 15
     7a2:	96 8b       	std	Z+22, r25	; 0x16
     7a4:	85 8b       	std	Z+21, r24	; 0x15
     7a6:	8d e1       	ldi	r24, 0x1D	; 29
     7a8:	84 9f       	mul	r24, r20
     7aa:	f0 01       	movw	r30, r0
     7ac:	85 9f       	mul	r24, r21
     7ae:	f0 0d       	add	r31, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	e1 5b       	subi	r30, 0xB1	; 177
     7b4:	fe 4f       	sbci	r31, 0xFE	; 254
     7b6:	15 82       	std	Z+5, r1	; 0x05
     7b8:	14 82       	std	Z+4, r1	; 0x04
     7ba:	4f 5f       	subi	r20, 0xFF	; 255
     7bc:	5f 4f       	sbci	r21, 0xFF	; 255
     7be:	5a 83       	std	Y+2, r21	; 0x02
     7c0:	49 83       	std	Y+1, r20	; 0x01
     7c2:	29 81       	ldd	r18, Y+1	; 0x01
     7c4:	3a 81       	ldd	r19, Y+2	; 0x02
     7c6:	24 30       	cpi	r18, 0x04	; 4
     7c8:	31 05       	cpc	r19, r1
     7ca:	4c f2       	brlt	.-110    	; 0x75e <initialize+0x94>
     7cc:	e7 ee       	ldi	r30, 0xE7	; 231
     7ce:	f1 e0       	ldi	r31, 0x01	; 1
     7d0:	11 82       	std	Z+1, r1	; 0x01
     7d2:	10 82       	st	Z, r1
     7d4:	15 82       	std	Z+5, r1	; 0x05
     7d6:	14 82       	std	Z+4, r1	; 0x04
     7d8:	13 82       	std	Z+3, r1	; 0x03
     7da:	12 82       	std	Z+2, r1	; 0x02
     7dc:	e1 e6       	ldi	r30, 0x61	; 97
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 e8       	ldi	r24, 0x80	; 128
     7e2:	80 83       	st	Z, r24
     7e4:	10 82       	st	Z, r1
     7e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     7ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	08 95       	ret

00000808 <dispatch>:
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	00 d0       	rcall	.+0      	; 0x80e <dispatch+0x6>
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	9a 83       	std	Y+2, r25	; 0x02
     814:	89 83       	std	Y+1, r24	; 0x01
     816:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     81a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     81e:	06 96       	adiw	r24, 0x06	; 6
     820:	0e 94 76 11 	call	0x22ec	; 0x22ec <setjmp>
     824:	89 2b       	or	r24, r25
     826:	59 f4       	brne	.+22     	; 0x83e <dispatch+0x36>
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     830:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     834:	61 e0       	ldi	r22, 0x01	; 1
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	06 96       	adiw	r24, 0x06	; 6
     83a:	0e 94 96 11 	call	0x232c	; 0x232c <longjmp>
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <enqueueByDeadline>:
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	eb 01       	movw	r28, r22
     856:	e8 81       	ld	r30, Y
     858:	f9 81       	ldd	r31, Y+1	; 0x01
     85a:	c0 e0       	ldi	r28, 0x00	; 0
     85c:	d0 e0       	ldi	r29, 0x00	; 0
     85e:	04 c0       	rjmp	.+8      	; 0x868 <enqueueByDeadline+0x20>
     860:	ef 01       	movw	r28, r30
     862:	01 90       	ld	r0, Z+
     864:	f0 81       	ld	r31, Z
     866:	e0 2d       	mov	r30, r0
     868:	30 97       	sbiw	r30, 0x00	; 0
     86a:	79 f0       	breq	.+30     	; 0x88a <enqueueByDeadline+0x42>
     86c:	06 81       	ldd	r16, Z+6	; 0x06
     86e:	17 81       	ldd	r17, Z+7	; 0x07
     870:	20 85       	ldd	r18, Z+8	; 0x08
     872:	31 85       	ldd	r19, Z+9	; 0x09
     874:	16 96       	adiw	r26, 0x06	; 6
     876:	4d 91       	ld	r20, X+
     878:	5d 91       	ld	r21, X+
     87a:	6d 91       	ld	r22, X+
     87c:	7c 91       	ld	r23, X
     87e:	19 97       	sbiw	r26, 0x09	; 9
     880:	40 17       	cp	r20, r16
     882:	51 07       	cpc	r21, r17
     884:	62 07       	cpc	r22, r18
     886:	73 07       	cpc	r23, r19
     888:	5c f7       	brge	.-42     	; 0x860 <enqueueByDeadline+0x18>
     88a:	11 96       	adiw	r26, 0x01	; 1
     88c:	fc 93       	st	X, r31
     88e:	ee 93       	st	-X, r30
     890:	20 97       	sbiw	r28, 0x00	; 0
     892:	21 f4       	brne	.+8      	; 0x89c <enqueueByDeadline+0x54>
     894:	fc 01       	movw	r30, r24
     896:	b1 83       	std	Z+1, r27	; 0x01
     898:	a0 83       	st	Z, r26
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <enqueueByDeadline+0x58>
     89c:	b9 83       	std	Y+1, r27	; 0x01
     89e:	a8 83       	st	Y, r26
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	08 95       	ret

000008aa <enqueueByBaseline>:
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	eb 01       	movw	r28, r22
     8b8:	e8 81       	ld	r30, Y
     8ba:	f9 81       	ldd	r31, Y+1	; 0x01
     8bc:	c0 e0       	ldi	r28, 0x00	; 0
     8be:	d0 e0       	ldi	r29, 0x00	; 0
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <enqueueByBaseline+0x20>
     8c2:	ef 01       	movw	r28, r30
     8c4:	01 90       	ld	r0, Z+
     8c6:	f0 81       	ld	r31, Z
     8c8:	e0 2d       	mov	r30, r0
     8ca:	30 97       	sbiw	r30, 0x00	; 0
     8cc:	79 f0       	breq	.+30     	; 0x8ec <enqueueByBaseline+0x42>
     8ce:	02 81       	ldd	r16, Z+2	; 0x02
     8d0:	13 81       	ldd	r17, Z+3	; 0x03
     8d2:	24 81       	ldd	r18, Z+4	; 0x04
     8d4:	35 81       	ldd	r19, Z+5	; 0x05
     8d6:	12 96       	adiw	r26, 0x02	; 2
     8d8:	4d 91       	ld	r20, X+
     8da:	5d 91       	ld	r21, X+
     8dc:	6d 91       	ld	r22, X+
     8de:	7c 91       	ld	r23, X
     8e0:	15 97       	sbiw	r26, 0x05	; 5
     8e2:	40 17       	cp	r20, r16
     8e4:	51 07       	cpc	r21, r17
     8e6:	62 07       	cpc	r22, r18
     8e8:	73 07       	cpc	r23, r19
     8ea:	5c f7       	brge	.-42     	; 0x8c2 <enqueueByBaseline+0x18>
     8ec:	11 96       	adiw	r26, 0x01	; 1
     8ee:	fc 93       	st	X, r31
     8f0:	ee 93       	st	-X, r30
     8f2:	20 97       	sbiw	r28, 0x00	; 0
     8f4:	21 f4       	brne	.+8      	; 0x8fe <enqueueByBaseline+0x54>
     8f6:	fc 01       	movw	r30, r24
     8f8:	b1 83       	std	Z+1, r27	; 0x01
     8fa:	a0 83       	st	Z, r26
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <enqueueByBaseline+0x58>
     8fe:	b9 83       	std	Y+1, r27	; 0x01
     900:	a8 83       	st	Y, r26
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	08 95       	ret

0000090c <dequeue>:
     90c:	dc 01       	movw	r26, r24
     90e:	ed 91       	ld	r30, X+
     910:	fc 91       	ld	r31, X
     912:	11 97       	sbiw	r26, 0x01	; 1
     914:	30 97       	sbiw	r30, 0x00	; 0
     916:	59 f4       	brne	.+22     	; 0x92e <dequeue+0x22>
     918:	8f ef       	ldi	r24, 0xFF	; 255
     91a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     91e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     922:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	83 bf       	out	0x33, r24	; 51
     92a:	88 95       	sleep
     92c:	fc cf       	rjmp	.-8      	; 0x926 <dequeue+0x1a>
     92e:	20 81       	ld	r18, Z
     930:	31 81       	ldd	r19, Z+1	; 0x01
     932:	2d 93       	st	X+, r18
     934:	3c 93       	st	X, r19
     936:	cf 01       	movw	r24, r30
     938:	08 95       	ret

0000093a <insert>:
     93a:	fb 01       	movw	r30, r22
     93c:	20 81       	ld	r18, Z
     93e:	31 81       	ldd	r19, Z+1	; 0x01
     940:	fc 01       	movw	r30, r24
     942:	31 83       	std	Z+1, r19	; 0x01
     944:	20 83       	st	Z, r18
     946:	fb 01       	movw	r30, r22
     948:	91 83       	std	Z+1, r25	; 0x01
     94a:	80 83       	st	Z, r24
     94c:	08 95       	ret

0000094e <push>:
     94e:	fb 01       	movw	r30, r22
     950:	20 81       	ld	r18, Z
     952:	31 81       	ldd	r19, Z+1	; 0x01
     954:	fc 01       	movw	r30, r24
     956:	31 83       	std	Z+1, r19	; 0x01
     958:	20 83       	st	Z, r18
     95a:	fb 01       	movw	r30, r22
     95c:	91 83       	std	Z+1, r25	; 0x01
     95e:	80 83       	st	Z, r24
     960:	08 95       	ret

00000962 <pop>:
     962:	dc 01       	movw	r26, r24
     964:	ed 91       	ld	r30, X+
     966:	fc 91       	ld	r31, X
     968:	11 97       	sbiw	r26, 0x01	; 1
     96a:	20 81       	ld	r18, Z
     96c:	31 81       	ldd	r19, Z+1	; 0x01
     96e:	2d 93       	st	X+, r18
     970:	3c 93       	st	X, r19
     972:	cf 01       	movw	r24, r30
     974:	08 95       	ret

00000976 <schedule>:
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
     97e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
     982:	c2 81       	ldd	r28, Z+2	; 0x02
     984:	d3 81       	ldd	r29, Z+3	; 0x03
     986:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <msgQ>
     98a:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <msgQ+0x1>
     98e:	30 97       	sbiw	r30, 0x00	; 0
     990:	19 f1       	breq	.+70     	; 0x9d8 <schedule+0x62>
     992:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     996:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     99a:	89 2b       	or	r24, r25
     99c:	e9 f0       	breq	.+58     	; 0x9d8 <schedule+0x62>
     99e:	20 97       	sbiw	r28, 0x00	; 0
     9a0:	69 f0       	breq	.+26     	; 0x9bc <schedule+0x46>
     9a2:	86 81       	ldd	r24, Z+6	; 0x06
     9a4:	97 81       	ldd	r25, Z+7	; 0x07
     9a6:	a0 85       	ldd	r26, Z+8	; 0x08
     9a8:	b1 85       	ldd	r27, Z+9	; 0x09
     9aa:	4e 81       	ldd	r20, Y+6	; 0x06
     9ac:	5f 81       	ldd	r21, Y+7	; 0x07
     9ae:	68 85       	ldd	r22, Y+8	; 0x08
     9b0:	79 85       	ldd	r23, Y+9	; 0x09
     9b2:	84 1b       	sub	r24, r20
     9b4:	95 0b       	sbc	r25, r21
     9b6:	a6 0b       	sbc	r26, r22
     9b8:	b7 0b       	sbc	r27, r23
     9ba:	72 f4       	brpl	.+28     	; 0x9d8 <schedule+0x62>
     9bc:	84 e0       	ldi	r24, 0x04	; 4
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	0e 94 b1 04 	call	0x962	; 0x962 <pop>
     9c4:	62 e0       	ldi	r22, 0x02	; 2
     9c6:	71 e0       	ldi	r23, 0x01	; 1
     9c8:	0e 94 a7 04 	call	0x94e	; 0x94e <push>
     9cc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
     9d0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
     9d4:	0e 94 04 04 	call	0x808	; 0x808 <dispatch>
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <__vector_1>:
     9de:	1f 92       	push	r1
     9e0:	0f 92       	push	r0
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	0f 92       	push	r0
     9e6:	11 24       	eor	r1, r1
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	2f 93       	push	r18
     9ee:	3f 93       	push	r19
     9f0:	4f 93       	push	r20
     9f2:	5f 93       	push	r21
     9f4:	6f 93       	push	r22
     9f6:	7f 93       	push	r23
     9f8:	8f 93       	push	r24
     9fa:	9f 93       	push	r25
     9fc:	af 93       	push	r26
     9fe:	bf 93       	push	r27
     a00:	ef 93       	push	r30
     a02:	ff 93       	push	r31
     a04:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     a08:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     a0c:	ac 01       	movw	r20, r24
     a0e:	09 2e       	mov	r0, r25
     a10:	00 0c       	add	r0, r0
     a12:	66 0b       	sbc	r22, r22
     a14:	77 0b       	sbc	r23, r23
     a16:	9a 01       	movw	r18, r20
     a18:	11 27       	eor	r17, r17
     a1a:	00 27       	eor	r16, r16
     a1c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a20:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	40 2b       	or	r20, r16
     a2a:	51 2b       	or	r21, r17
     a2c:	62 2b       	or	r22, r18
     a2e:	73 2b       	or	r23, r19
     a30:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     a34:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     a38:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     a3c:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     a40:	b0 9b       	sbis	0x16, 0	; 22
     a42:	1a c0       	rjmp	.+52     	; 0xa78 <__vector_1+0x9a>
     a44:	01 96       	adiw	r24, 0x01	; 1
     a46:	09 2e       	mov	r0, r25
     a48:	00 0c       	add	r0, r0
     a4a:	aa 0b       	sbc	r26, r26
     a4c:	bb 0b       	sbc	r27, r27
     a4e:	bc 01       	movw	r22, r24
     a50:	55 27       	eor	r21, r21
     a52:	44 27       	eor	r20, r20
     a54:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a58:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a5c:	a0 e0       	ldi	r26, 0x00	; 0
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	84 2b       	or	r24, r20
     a62:	95 2b       	or	r25, r21
     a64:	a6 2b       	or	r26, r22
     a66:	b7 2b       	or	r27, r23
     a68:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     a6c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     a70:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     a74:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     a78:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <mtable>
     a7c:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <mtable+0x1>
     a80:	30 97       	sbiw	r30, 0x00	; 0
     a82:	39 f0       	breq	.+14     	; 0xa92 <__vector_1+0xb4>
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <otable>
     a8c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <otable+0x1>
     a90:	09 95       	icall
     a92:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
     a96:	ff 91       	pop	r31
     a98:	ef 91       	pop	r30
     a9a:	bf 91       	pop	r27
     a9c:	af 91       	pop	r26
     a9e:	9f 91       	pop	r25
     aa0:	8f 91       	pop	r24
     aa2:	7f 91       	pop	r23
     aa4:	6f 91       	pop	r22
     aa6:	5f 91       	pop	r21
     aa8:	4f 91       	pop	r20
     aaa:	3f 91       	pop	r19
     aac:	2f 91       	pop	r18
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	0f 90       	pop	r0
     ab8:	1f 90       	pop	r1
     aba:	18 95       	reti

00000abc <__vector_2>:
     abc:	1f 92       	push	r1
     abe:	0f 92       	push	r0
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	2f 93       	push	r18
     acc:	3f 93       	push	r19
     ace:	4f 93       	push	r20
     ad0:	5f 93       	push	r21
     ad2:	6f 93       	push	r22
     ad4:	7f 93       	push	r23
     ad6:	8f 93       	push	r24
     ad8:	9f 93       	push	r25
     ada:	af 93       	push	r26
     adc:	bf 93       	push	r27
     ade:	ef 93       	push	r30
     ae0:	ff 93       	push	r31
     ae2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     ae6:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     aea:	ac 01       	movw	r20, r24
     aec:	09 2e       	mov	r0, r25
     aee:	00 0c       	add	r0, r0
     af0:	66 0b       	sbc	r22, r22
     af2:	77 0b       	sbc	r23, r23
     af4:	9a 01       	movw	r18, r20
     af6:	11 27       	eor	r17, r17
     af8:	00 27       	eor	r16, r16
     afa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     afe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	40 2b       	or	r20, r16
     b08:	51 2b       	or	r21, r17
     b0a:	62 2b       	or	r22, r18
     b0c:	73 2b       	or	r23, r19
     b0e:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     b12:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     b16:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     b1a:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     b1e:	b0 9b       	sbis	0x16, 0	; 22
     b20:	1a c0       	rjmp	.+52     	; 0xb56 <__vector_2+0x9a>
     b22:	01 96       	adiw	r24, 0x01	; 1
     b24:	09 2e       	mov	r0, r25
     b26:	00 0c       	add	r0, r0
     b28:	aa 0b       	sbc	r26, r26
     b2a:	bb 0b       	sbc	r27, r27
     b2c:	bc 01       	movw	r22, r24
     b2e:	55 27       	eor	r21, r21
     b30:	44 27       	eor	r20, r20
     b32:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b36:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	84 2b       	or	r24, r20
     b40:	95 2b       	or	r25, r21
     b42:	a6 2b       	or	r26, r22
     b44:	b7 2b       	or	r27, r23
     b46:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     b4a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     b4e:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     b52:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     b56:	e0 91 c5 01 	lds	r30, 0x01C5	; 0x8001c5 <mtable+0x2>
     b5a:	f0 91 c6 01 	lds	r31, 0x01C6	; 0x8001c6 <mtable+0x3>
     b5e:	30 97       	sbiw	r30, 0x00	; 0
     b60:	39 f0       	breq	.+14     	; 0xb70 <__vector_2+0xb4>
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <otable+0x2>
     b6a:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <otable+0x3>
     b6e:	09 95       	icall
     b70:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
     b74:	ff 91       	pop	r31
     b76:	ef 91       	pop	r30
     b78:	bf 91       	pop	r27
     b7a:	af 91       	pop	r26
     b7c:	9f 91       	pop	r25
     b7e:	8f 91       	pop	r24
     b80:	7f 91       	pop	r23
     b82:	6f 91       	pop	r22
     b84:	5f 91       	pop	r21
     b86:	4f 91       	pop	r20
     b88:	3f 91       	pop	r19
     b8a:	2f 91       	pop	r18
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	0f 90       	pop	r0
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	0f 90       	pop	r0
     b96:	1f 90       	pop	r1
     b98:	18 95       	reti

00000b9a <__vector_3>:
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	2f 93       	push	r18
     baa:	3f 93       	push	r19
     bac:	4f 93       	push	r20
     bae:	5f 93       	push	r21
     bb0:	6f 93       	push	r22
     bb2:	7f 93       	push	r23
     bb4:	8f 93       	push	r24
     bb6:	9f 93       	push	r25
     bb8:	af 93       	push	r26
     bba:	bf 93       	push	r27
     bbc:	ef 93       	push	r30
     bbe:	ff 93       	push	r31
     bc0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     bc4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     bc8:	ac 01       	movw	r20, r24
     bca:	09 2e       	mov	r0, r25
     bcc:	00 0c       	add	r0, r0
     bce:	66 0b       	sbc	r22, r22
     bd0:	77 0b       	sbc	r23, r23
     bd2:	9a 01       	movw	r18, r20
     bd4:	11 27       	eor	r17, r17
     bd6:	00 27       	eor	r16, r16
     bd8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bdc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	40 2b       	or	r20, r16
     be6:	51 2b       	or	r21, r17
     be8:	62 2b       	or	r22, r18
     bea:	73 2b       	or	r23, r19
     bec:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     bf0:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     bf4:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     bf8:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     bfc:	b0 9b       	sbis	0x16, 0	; 22
     bfe:	1a c0       	rjmp	.+52     	; 0xc34 <__vector_3+0x9a>
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	09 2e       	mov	r0, r25
     c04:	00 0c       	add	r0, r0
     c06:	aa 0b       	sbc	r26, r26
     c08:	bb 0b       	sbc	r27, r27
     c0a:	bc 01       	movw	r22, r24
     c0c:	55 27       	eor	r21, r21
     c0e:	44 27       	eor	r20, r20
     c10:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c14:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c18:	a0 e0       	ldi	r26, 0x00	; 0
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	84 2b       	or	r24, r20
     c1e:	95 2b       	or	r25, r21
     c20:	a6 2b       	or	r26, r22
     c22:	b7 2b       	or	r27, r23
     c24:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     c28:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     c2c:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     c30:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     c34:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <mtable+0x4>
     c38:	f0 91 c8 01 	lds	r31, 0x01C8	; 0x8001c8 <mtable+0x5>
     c3c:	30 97       	sbiw	r30, 0x00	; 0
     c3e:	39 f0       	breq	.+14     	; 0xc4e <__vector_3+0xb4>
     c40:	62 e0       	ldi	r22, 0x02	; 2
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <otable+0x4>
     c48:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <otable+0x5>
     c4c:	09 95       	icall
     c4e:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	7f 91       	pop	r23
     c60:	6f 91       	pop	r22
     c62:	5f 91       	pop	r21
     c64:	4f 91       	pop	r20
     c66:	3f 91       	pop	r19
     c68:	2f 91       	pop	r18
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <__vector_4>:
     c78:	1f 92       	push	r1
     c7a:	0f 92       	push	r0
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	0f 92       	push	r0
     c80:	11 24       	eor	r1, r1
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	2f 93       	push	r18
     c88:	3f 93       	push	r19
     c8a:	4f 93       	push	r20
     c8c:	5f 93       	push	r21
     c8e:	6f 93       	push	r22
     c90:	7f 93       	push	r23
     c92:	8f 93       	push	r24
     c94:	9f 93       	push	r25
     c96:	af 93       	push	r26
     c98:	bf 93       	push	r27
     c9a:	ef 93       	push	r30
     c9c:	ff 93       	push	r31
     c9e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     ca2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     ca6:	ac 01       	movw	r20, r24
     ca8:	09 2e       	mov	r0, r25
     caa:	00 0c       	add	r0, r0
     cac:	66 0b       	sbc	r22, r22
     cae:	77 0b       	sbc	r23, r23
     cb0:	9a 01       	movw	r18, r20
     cb2:	11 27       	eor	r17, r17
     cb4:	00 27       	eor	r16, r16
     cb6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	40 2b       	or	r20, r16
     cc4:	51 2b       	or	r21, r17
     cc6:	62 2b       	or	r22, r18
     cc8:	73 2b       	or	r23, r19
     cca:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     cce:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     cd2:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     cd6:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     cda:	b0 9b       	sbis	0x16, 0	; 22
     cdc:	1a c0       	rjmp	.+52     	; 0xd12 <__vector_4+0x9a>
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	09 2e       	mov	r0, r25
     ce2:	00 0c       	add	r0, r0
     ce4:	aa 0b       	sbc	r26, r26
     ce6:	bb 0b       	sbc	r27, r27
     ce8:	bc 01       	movw	r22, r24
     cea:	55 27       	eor	r21, r21
     cec:	44 27       	eor	r20, r20
     cee:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cf2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cf6:	a0 e0       	ldi	r26, 0x00	; 0
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	84 2b       	or	r24, r20
     cfc:	95 2b       	or	r25, r21
     cfe:	a6 2b       	or	r26, r22
     d00:	b7 2b       	or	r27, r23
     d02:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     d06:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     d0a:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     d0e:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     d12:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <mtable+0x6>
     d16:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <mtable+0x7>
     d1a:	30 97       	sbiw	r30, 0x00	; 0
     d1c:	39 f0       	breq	.+14     	; 0xd2c <__vector_4+0xb4>
     d1e:	63 e0       	ldi	r22, 0x03	; 3
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <otable+0x6>
     d26:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <otable+0x7>
     d2a:	09 95       	icall
     d2c:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <__vector_5>:
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	11 24       	eor	r1, r1
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	2f 93       	push	r18
     d66:	3f 93       	push	r19
     d68:	4f 93       	push	r20
     d6a:	5f 93       	push	r21
     d6c:	6f 93       	push	r22
     d6e:	7f 93       	push	r23
     d70:	8f 93       	push	r24
     d72:	9f 93       	push	r25
     d74:	af 93       	push	r26
     d76:	bf 93       	push	r27
     d78:	ef 93       	push	r30
     d7a:	ff 93       	push	r31
     d7c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     d80:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     d84:	ac 01       	movw	r20, r24
     d86:	09 2e       	mov	r0, r25
     d88:	00 0c       	add	r0, r0
     d8a:	66 0b       	sbc	r22, r22
     d8c:	77 0b       	sbc	r23, r23
     d8e:	9a 01       	movw	r18, r20
     d90:	11 27       	eor	r17, r17
     d92:	00 27       	eor	r16, r16
     d94:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d98:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	40 2b       	or	r20, r16
     da2:	51 2b       	or	r21, r17
     da4:	62 2b       	or	r22, r18
     da6:	73 2b       	or	r23, r19
     da8:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     dac:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     db0:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     db4:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     db8:	b0 9b       	sbis	0x16, 0	; 22
     dba:	1a c0       	rjmp	.+52     	; 0xdf0 <__vector_5+0x9a>
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	09 2e       	mov	r0, r25
     dc0:	00 0c       	add	r0, r0
     dc2:	aa 0b       	sbc	r26, r26
     dc4:	bb 0b       	sbc	r27, r27
     dc6:	bc 01       	movw	r22, r24
     dc8:	55 27       	eor	r21, r21
     dca:	44 27       	eor	r20, r20
     dcc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dd0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dd4:	a0 e0       	ldi	r26, 0x00	; 0
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	84 2b       	or	r24, r20
     dda:	95 2b       	or	r25, r21
     ddc:	a6 2b       	or	r26, r22
     dde:	b7 2b       	or	r27, r23
     de0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     de4:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     de8:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     dec:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     df0:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <mtable+0x8>
     df4:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <mtable+0x9>
     df8:	30 97       	sbiw	r30, 0x00	; 0
     dfa:	39 f0       	breq	.+14     	; 0xe0a <__vector_5+0xb4>
     dfc:	64 e0       	ldi	r22, 0x04	; 4
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <otable+0x8>
     e04:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <otable+0x9>
     e08:	09 95       	icall
     e0a:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
     e0e:	ff 91       	pop	r31
     e10:	ef 91       	pop	r30
     e12:	bf 91       	pop	r27
     e14:	af 91       	pop	r26
     e16:	9f 91       	pop	r25
     e18:	8f 91       	pop	r24
     e1a:	7f 91       	pop	r23
     e1c:	6f 91       	pop	r22
     e1e:	5f 91       	pop	r21
     e20:	4f 91       	pop	r20
     e22:	3f 91       	pop	r19
     e24:	2f 91       	pop	r18
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	0f 90       	pop	r0
     e30:	1f 90       	pop	r1
     e32:	18 95       	reti

00000e34 <__vector_10>:
     e34:	1f 92       	push	r1
     e36:	0f 92       	push	r0
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	0f 92       	push	r0
     e3c:	11 24       	eor	r1, r1
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	2f 93       	push	r18
     e44:	3f 93       	push	r19
     e46:	4f 93       	push	r20
     e48:	5f 93       	push	r21
     e4a:	6f 93       	push	r22
     e4c:	7f 93       	push	r23
     e4e:	8f 93       	push	r24
     e50:	9f 93       	push	r25
     e52:	af 93       	push	r26
     e54:	bf 93       	push	r27
     e56:	ef 93       	push	r30
     e58:	ff 93       	push	r31
     e5a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     e5e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     e62:	ac 01       	movw	r20, r24
     e64:	09 2e       	mov	r0, r25
     e66:	00 0c       	add	r0, r0
     e68:	66 0b       	sbc	r22, r22
     e6a:	77 0b       	sbc	r23, r23
     e6c:	9a 01       	movw	r18, r20
     e6e:	11 27       	eor	r17, r17
     e70:	00 27       	eor	r16, r16
     e72:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e76:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	40 2b       	or	r20, r16
     e80:	51 2b       	or	r21, r17
     e82:	62 2b       	or	r22, r18
     e84:	73 2b       	or	r23, r19
     e86:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     e8a:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     e8e:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     e92:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     e96:	b0 9b       	sbis	0x16, 0	; 22
     e98:	1a c0       	rjmp	.+52     	; 0xece <__vector_10+0x9a>
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	09 2e       	mov	r0, r25
     e9e:	00 0c       	add	r0, r0
     ea0:	aa 0b       	sbc	r26, r26
     ea2:	bb 0b       	sbc	r27, r27
     ea4:	bc 01       	movw	r22, r24
     ea6:	55 27       	eor	r21, r21
     ea8:	44 27       	eor	r20, r20
     eaa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eae:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eb2:	a0 e0       	ldi	r26, 0x00	; 0
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	84 2b       	or	r24, r20
     eb8:	95 2b       	or	r25, r21
     eba:	a6 2b       	or	r26, r22
     ebc:	b7 2b       	or	r27, r23
     ebe:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     ec2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     ec6:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     eca:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     ece:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <mtable+0xa>
     ed2:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <mtable+0xb>
     ed6:	30 97       	sbiw	r30, 0x00	; 0
     ed8:	39 f0       	breq	.+14     	; 0xee8 <__vector_10+0xb4>
     eda:	65 e0       	ldi	r22, 0x05	; 5
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <otable+0xa>
     ee2:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <otable+0xb>
     ee6:	09 95       	icall
     ee8:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
     eec:	ff 91       	pop	r31
     eee:	ef 91       	pop	r30
     ef0:	bf 91       	pop	r27
     ef2:	af 91       	pop	r26
     ef4:	9f 91       	pop	r25
     ef6:	8f 91       	pop	r24
     ef8:	7f 91       	pop	r23
     efa:	6f 91       	pop	r22
     efc:	5f 91       	pop	r21
     efe:	4f 91       	pop	r20
     f00:	3f 91       	pop	r19
     f02:	2f 91       	pop	r18
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <__vector_11>:
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	2f 93       	push	r18
     f22:	3f 93       	push	r19
     f24:	4f 93       	push	r20
     f26:	5f 93       	push	r21
     f28:	6f 93       	push	r22
     f2a:	7f 93       	push	r23
     f2c:	8f 93       	push	r24
     f2e:	9f 93       	push	r25
     f30:	af 93       	push	r26
     f32:	bf 93       	push	r27
     f34:	ef 93       	push	r30
     f36:	ff 93       	push	r31
     f38:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
     f3c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
     f40:	ac 01       	movw	r20, r24
     f42:	09 2e       	mov	r0, r25
     f44:	00 0c       	add	r0, r0
     f46:	66 0b       	sbc	r22, r22
     f48:	77 0b       	sbc	r23, r23
     f4a:	9a 01       	movw	r18, r20
     f4c:	11 27       	eor	r17, r17
     f4e:	00 27       	eor	r16, r16
     f50:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f54:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	40 2b       	or	r20, r16
     f5e:	51 2b       	or	r21, r17
     f60:	62 2b       	or	r22, r18
     f62:	73 2b       	or	r23, r19
     f64:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
     f68:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
     f6c:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
     f70:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
     f74:	b0 9b       	sbis	0x16, 0	; 22
     f76:	1a c0       	rjmp	.+52     	; 0xfac <__vector_11+0x9a>
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	09 2e       	mov	r0, r25
     f7c:	00 0c       	add	r0, r0
     f7e:	aa 0b       	sbc	r26, r26
     f80:	bb 0b       	sbc	r27, r27
     f82:	bc 01       	movw	r22, r24
     f84:	55 27       	eor	r21, r21
     f86:	44 27       	eor	r20, r20
     f88:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f8c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f90:	a0 e0       	ldi	r26, 0x00	; 0
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	84 2b       	or	r24, r20
     f96:	95 2b       	or	r25, r21
     f98:	a6 2b       	or	r26, r22
     f9a:	b7 2b       	or	r27, r23
     f9c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
     fa0:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
     fa4:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
     fa8:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
     fac:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <mtable+0xc>
     fb0:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <mtable+0xd>
     fb4:	30 97       	sbiw	r30, 0x00	; 0
     fb6:	39 f0       	breq	.+14     	; 0xfc6 <__vector_11+0xb4>
     fb8:	66 e0       	ldi	r22, 0x06	; 6
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <otable+0xc>
     fc0:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <otable+0xd>
     fc4:	09 95       	icall
     fc6:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
     fca:	ff 91       	pop	r31
     fcc:	ef 91       	pop	r30
     fce:	bf 91       	pop	r27
     fd0:	af 91       	pop	r26
     fd2:	9f 91       	pop	r25
     fd4:	8f 91       	pop	r24
     fd6:	7f 91       	pop	r23
     fd8:	6f 91       	pop	r22
     fda:	5f 91       	pop	r21
     fdc:	4f 91       	pop	r20
     fde:	3f 91       	pop	r19
     fe0:	2f 91       	pop	r18
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <__vector_12>:
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	2f 93       	push	r18
    1000:	3f 93       	push	r19
    1002:	4f 93       	push	r20
    1004:	5f 93       	push	r21
    1006:	6f 93       	push	r22
    1008:	7f 93       	push	r23
    100a:	8f 93       	push	r24
    100c:	9f 93       	push	r25
    100e:	af 93       	push	r26
    1010:	bf 93       	push	r27
    1012:	ef 93       	push	r30
    1014:	ff 93       	push	r31
    1016:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    101a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    101e:	ac 01       	movw	r20, r24
    1020:	09 2e       	mov	r0, r25
    1022:	00 0c       	add	r0, r0
    1024:	66 0b       	sbc	r22, r22
    1026:	77 0b       	sbc	r23, r23
    1028:	9a 01       	movw	r18, r20
    102a:	11 27       	eor	r17, r17
    102c:	00 27       	eor	r16, r16
    102e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1032:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	40 2b       	or	r20, r16
    103c:	51 2b       	or	r21, r17
    103e:	62 2b       	or	r22, r18
    1040:	73 2b       	or	r23, r19
    1042:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1046:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    104a:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    104e:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    1052:	b0 9b       	sbis	0x16, 0	; 22
    1054:	1a c0       	rjmp	.+52     	; 0x108a <__vector_12+0x9a>
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	09 2e       	mov	r0, r25
    105a:	00 0c       	add	r0, r0
    105c:	aa 0b       	sbc	r26, r26
    105e:	bb 0b       	sbc	r27, r27
    1060:	bc 01       	movw	r22, r24
    1062:	55 27       	eor	r21, r21
    1064:	44 27       	eor	r20, r20
    1066:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    106a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    106e:	a0 e0       	ldi	r26, 0x00	; 0
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	84 2b       	or	r24, r20
    1074:	95 2b       	or	r25, r21
    1076:	a6 2b       	or	r26, r22
    1078:	b7 2b       	or	r27, r23
    107a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    107e:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    1082:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1086:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    108a:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <mtable+0xe>
    108e:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <mtable+0xf>
    1092:	30 97       	sbiw	r30, 0x00	; 0
    1094:	39 f0       	breq	.+14     	; 0x10a4 <__vector_12+0xb4>
    1096:	67 e0       	ldi	r22, 0x07	; 7
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <otable+0xe>
    109e:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <otable+0xf>
    10a2:	09 95       	icall
    10a4:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    10a8:	ff 91       	pop	r31
    10aa:	ef 91       	pop	r30
    10ac:	bf 91       	pop	r27
    10ae:	af 91       	pop	r26
    10b0:	9f 91       	pop	r25
    10b2:	8f 91       	pop	r24
    10b4:	7f 91       	pop	r23
    10b6:	6f 91       	pop	r22
    10b8:	5f 91       	pop	r21
    10ba:	4f 91       	pop	r20
    10bc:	3f 91       	pop	r19
    10be:	2f 91       	pop	r18
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <__vector_13>:
    10ce:	1f 92       	push	r1
    10d0:	0f 92       	push	r0
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	0f 92       	push	r0
    10d6:	11 24       	eor	r1, r1
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31
    10f4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    10f8:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    10fc:	ac 01       	movw	r20, r24
    10fe:	09 2e       	mov	r0, r25
    1100:	00 0c       	add	r0, r0
    1102:	66 0b       	sbc	r22, r22
    1104:	77 0b       	sbc	r23, r23
    1106:	9a 01       	movw	r18, r20
    1108:	11 27       	eor	r17, r17
    110a:	00 27       	eor	r16, r16
    110c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1110:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	40 2b       	or	r20, r16
    111a:	51 2b       	or	r21, r17
    111c:	62 2b       	or	r22, r18
    111e:	73 2b       	or	r23, r19
    1120:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1124:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    1128:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    112c:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    1130:	b0 9b       	sbis	0x16, 0	; 22
    1132:	1a c0       	rjmp	.+52     	; 0x1168 <__vector_13+0x9a>
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	09 2e       	mov	r0, r25
    1138:	00 0c       	add	r0, r0
    113a:	aa 0b       	sbc	r26, r26
    113c:	bb 0b       	sbc	r27, r27
    113e:	bc 01       	movw	r22, r24
    1140:	55 27       	eor	r21, r21
    1142:	44 27       	eor	r20, r20
    1144:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1148:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    114c:	a0 e0       	ldi	r26, 0x00	; 0
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	84 2b       	or	r24, r20
    1152:	95 2b       	or	r25, r21
    1154:	a6 2b       	or	r26, r22
    1156:	b7 2b       	or	r27, r23
    1158:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    115c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    1160:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1164:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1168:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <mtable+0x10>
    116c:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <mtable+0x11>
    1170:	30 97       	sbiw	r30, 0x00	; 0
    1172:	39 f0       	breq	.+14     	; 0x1182 <__vector_13+0xb4>
    1174:	68 e0       	ldi	r22, 0x08	; 8
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <otable+0x10>
    117c:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <otable+0x11>
    1180:	09 95       	icall
    1182:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    1186:	ff 91       	pop	r31
    1188:	ef 91       	pop	r30
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <__vector_14>:
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	0f 93       	push	r16
    11b8:	1f 93       	push	r17
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    11d6:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    11da:	ac 01       	movw	r20, r24
    11dc:	09 2e       	mov	r0, r25
    11de:	00 0c       	add	r0, r0
    11e0:	66 0b       	sbc	r22, r22
    11e2:	77 0b       	sbc	r23, r23
    11e4:	9a 01       	movw	r18, r20
    11e6:	11 27       	eor	r17, r17
    11e8:	00 27       	eor	r16, r16
    11ea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11ee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	40 2b       	or	r20, r16
    11f8:	51 2b       	or	r21, r17
    11fa:	62 2b       	or	r22, r18
    11fc:	73 2b       	or	r23, r19
    11fe:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1202:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    1206:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    120a:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    120e:	b0 9b       	sbis	0x16, 0	; 22
    1210:	1a c0       	rjmp	.+52     	; 0x1246 <__vector_14+0x9a>
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	09 2e       	mov	r0, r25
    1216:	00 0c       	add	r0, r0
    1218:	aa 0b       	sbc	r26, r26
    121a:	bb 0b       	sbc	r27, r27
    121c:	bc 01       	movw	r22, r24
    121e:	55 27       	eor	r21, r21
    1220:	44 27       	eor	r20, r20
    1222:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1226:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	84 2b       	or	r24, r20
    1230:	95 2b       	or	r25, r21
    1232:	a6 2b       	or	r26, r22
    1234:	b7 2b       	or	r27, r23
    1236:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    123a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    123e:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1242:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1246:	e0 91 d5 01 	lds	r30, 0x01D5	; 0x8001d5 <mtable+0x12>
    124a:	f0 91 d6 01 	lds	r31, 0x01D6	; 0x8001d6 <mtable+0x13>
    124e:	30 97       	sbiw	r30, 0x00	; 0
    1250:	39 f0       	breq	.+14     	; 0x1260 <__vector_14+0xb4>
    1252:	69 e0       	ldi	r22, 0x09	; 9
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <otable+0x12>
    125a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <otable+0x13>
    125e:	09 95       	icall
    1260:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	0f 90       	pop	r0
    1286:	1f 90       	pop	r1
    1288:	18 95       	reti

0000128a <__vector_15>:
    128a:	1f 92       	push	r1
    128c:	0f 92       	push	r0
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	0f 92       	push	r0
    1292:	11 24       	eor	r1, r1
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	2f 93       	push	r18
    129a:	3f 93       	push	r19
    129c:	4f 93       	push	r20
    129e:	5f 93       	push	r21
    12a0:	6f 93       	push	r22
    12a2:	7f 93       	push	r23
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	ef 93       	push	r30
    12ae:	ff 93       	push	r31
    12b0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    12b4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    12b8:	ac 01       	movw	r20, r24
    12ba:	09 2e       	mov	r0, r25
    12bc:	00 0c       	add	r0, r0
    12be:	66 0b       	sbc	r22, r22
    12c0:	77 0b       	sbc	r23, r23
    12c2:	9a 01       	movw	r18, r20
    12c4:	11 27       	eor	r17, r17
    12c6:	00 27       	eor	r16, r16
    12c8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12cc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	40 2b       	or	r20, r16
    12d6:	51 2b       	or	r21, r17
    12d8:	62 2b       	or	r22, r18
    12da:	73 2b       	or	r23, r19
    12dc:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    12e0:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    12e4:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    12e8:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    12ec:	b0 9b       	sbis	0x16, 0	; 22
    12ee:	1a c0       	rjmp	.+52     	; 0x1324 <__vector_15+0x9a>
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	09 2e       	mov	r0, r25
    12f4:	00 0c       	add	r0, r0
    12f6:	aa 0b       	sbc	r26, r26
    12f8:	bb 0b       	sbc	r27, r27
    12fa:	bc 01       	movw	r22, r24
    12fc:	55 27       	eor	r21, r21
    12fe:	44 27       	eor	r20, r20
    1300:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1304:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1308:	a0 e0       	ldi	r26, 0x00	; 0
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	84 2b       	or	r24, r20
    130e:	95 2b       	or	r25, r21
    1310:	a6 2b       	or	r26, r22
    1312:	b7 2b       	or	r27, r23
    1314:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    1318:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    131c:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1320:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1324:	e0 91 d7 01 	lds	r30, 0x01D7	; 0x8001d7 <mtable+0x14>
    1328:	f0 91 d8 01 	lds	r31, 0x01D8	; 0x8001d8 <mtable+0x15>
    132c:	30 97       	sbiw	r30, 0x00	; 0
    132e:	39 f0       	breq	.+14     	; 0x133e <__vector_15+0xb4>
    1330:	6a e0       	ldi	r22, 0x0A	; 10
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <otable+0x14>
    1338:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <otable+0x15>
    133c:	09 95       	icall
    133e:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    1342:	ff 91       	pop	r31
    1344:	ef 91       	pop	r30
    1346:	bf 91       	pop	r27
    1348:	af 91       	pop	r26
    134a:	9f 91       	pop	r25
    134c:	8f 91       	pop	r24
    134e:	7f 91       	pop	r23
    1350:	6f 91       	pop	r22
    1352:	5f 91       	pop	r21
    1354:	4f 91       	pop	r20
    1356:	3f 91       	pop	r19
    1358:	2f 91       	pop	r18
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	0f 90       	pop	r0
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	0f 90       	pop	r0
    1364:	1f 90       	pop	r1
    1366:	18 95       	reti

00001368 <__vector_16>:
    1368:	1f 92       	push	r1
    136a:	0f 92       	push	r0
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	0f 92       	push	r0
    1370:	11 24       	eor	r1, r1
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	2f 93       	push	r18
    1378:	3f 93       	push	r19
    137a:	4f 93       	push	r20
    137c:	5f 93       	push	r21
    137e:	6f 93       	push	r22
    1380:	7f 93       	push	r23
    1382:	8f 93       	push	r24
    1384:	9f 93       	push	r25
    1386:	af 93       	push	r26
    1388:	bf 93       	push	r27
    138a:	ef 93       	push	r30
    138c:	ff 93       	push	r31
    138e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    1392:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    1396:	ac 01       	movw	r20, r24
    1398:	09 2e       	mov	r0, r25
    139a:	00 0c       	add	r0, r0
    139c:	66 0b       	sbc	r22, r22
    139e:	77 0b       	sbc	r23, r23
    13a0:	9a 01       	movw	r18, r20
    13a2:	11 27       	eor	r17, r17
    13a4:	00 27       	eor	r16, r16
    13a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	40 2b       	or	r20, r16
    13b4:	51 2b       	or	r21, r17
    13b6:	62 2b       	or	r22, r18
    13b8:	73 2b       	or	r23, r19
    13ba:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    13be:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    13c2:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    13c6:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    13ca:	b0 9b       	sbis	0x16, 0	; 22
    13cc:	1a c0       	rjmp	.+52     	; 0x1402 <__vector_16+0x9a>
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	09 2e       	mov	r0, r25
    13d2:	00 0c       	add	r0, r0
    13d4:	aa 0b       	sbc	r26, r26
    13d6:	bb 0b       	sbc	r27, r27
    13d8:	bc 01       	movw	r22, r24
    13da:	55 27       	eor	r21, r21
    13dc:	44 27       	eor	r20, r20
    13de:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13e2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13e6:	a0 e0       	ldi	r26, 0x00	; 0
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	84 2b       	or	r24, r20
    13ec:	95 2b       	or	r25, r21
    13ee:	a6 2b       	or	r26, r22
    13f0:	b7 2b       	or	r27, r23
    13f2:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    13f6:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    13fa:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    13fe:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1402:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <mtable+0x16>
    1406:	f0 91 da 01 	lds	r31, 0x01DA	; 0x8001da <mtable+0x17>
    140a:	30 97       	sbiw	r30, 0x00	; 0
    140c:	39 f0       	breq	.+14     	; 0x141c <__vector_16+0xb4>
    140e:	6b e0       	ldi	r22, 0x0B	; 11
    1410:	70 e0       	ldi	r23, 0x00	; 0
    1412:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <otable+0x16>
    1416:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <otable+0x17>
    141a:	09 95       	icall
    141c:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    1420:	ff 91       	pop	r31
    1422:	ef 91       	pop	r30
    1424:	bf 91       	pop	r27
    1426:	af 91       	pop	r26
    1428:	9f 91       	pop	r25
    142a:	8f 91       	pop	r24
    142c:	7f 91       	pop	r23
    142e:	6f 91       	pop	r22
    1430:	5f 91       	pop	r21
    1432:	4f 91       	pop	r20
    1434:	3f 91       	pop	r19
    1436:	2f 91       	pop	r18
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	0f 90       	pop	r0
    1442:	1f 90       	pop	r1
    1444:	18 95       	reti

00001446 <__vector_17>:
    1446:	1f 92       	push	r1
    1448:	0f 92       	push	r0
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	0f 92       	push	r0
    144e:	11 24       	eor	r1, r1
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	2f 93       	push	r18
    1456:	3f 93       	push	r19
    1458:	4f 93       	push	r20
    145a:	5f 93       	push	r21
    145c:	6f 93       	push	r22
    145e:	7f 93       	push	r23
    1460:	8f 93       	push	r24
    1462:	9f 93       	push	r25
    1464:	af 93       	push	r26
    1466:	bf 93       	push	r27
    1468:	ef 93       	push	r30
    146a:	ff 93       	push	r31
    146c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    1470:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    1474:	ac 01       	movw	r20, r24
    1476:	09 2e       	mov	r0, r25
    1478:	00 0c       	add	r0, r0
    147a:	66 0b       	sbc	r22, r22
    147c:	77 0b       	sbc	r23, r23
    147e:	9a 01       	movw	r18, r20
    1480:	11 27       	eor	r17, r17
    1482:	00 27       	eor	r16, r16
    1484:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1488:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	40 2b       	or	r20, r16
    1492:	51 2b       	or	r21, r17
    1494:	62 2b       	or	r22, r18
    1496:	73 2b       	or	r23, r19
    1498:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    149c:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    14a0:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    14a4:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    14a8:	b0 9b       	sbis	0x16, 0	; 22
    14aa:	1a c0       	rjmp	.+52     	; 0x14e0 <__vector_17+0x9a>
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	09 2e       	mov	r0, r25
    14b0:	00 0c       	add	r0, r0
    14b2:	aa 0b       	sbc	r26, r26
    14b4:	bb 0b       	sbc	r27, r27
    14b6:	bc 01       	movw	r22, r24
    14b8:	55 27       	eor	r21, r21
    14ba:	44 27       	eor	r20, r20
    14bc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14c0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14c4:	a0 e0       	ldi	r26, 0x00	; 0
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	84 2b       	or	r24, r20
    14ca:	95 2b       	or	r25, r21
    14cc:	a6 2b       	or	r26, r22
    14ce:	b7 2b       	or	r27, r23
    14d0:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    14d4:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    14d8:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    14dc:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    14e0:	e0 91 db 01 	lds	r30, 0x01DB	; 0x8001db <mtable+0x18>
    14e4:	f0 91 dc 01 	lds	r31, 0x01DC	; 0x8001dc <mtable+0x19>
    14e8:	30 97       	sbiw	r30, 0x00	; 0
    14ea:	39 f0       	breq	.+14     	; 0x14fa <__vector_17+0xb4>
    14ec:	6c e0       	ldi	r22, 0x0C	; 12
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <otable+0x18>
    14f4:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <otable+0x19>
    14f8:	09 95       	icall
    14fa:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    14fe:	ff 91       	pop	r31
    1500:	ef 91       	pop	r30
    1502:	bf 91       	pop	r27
    1504:	af 91       	pop	r26
    1506:	9f 91       	pop	r25
    1508:	8f 91       	pop	r24
    150a:	7f 91       	pop	r23
    150c:	6f 91       	pop	r22
    150e:	5f 91       	pop	r21
    1510:	4f 91       	pop	r20
    1512:	3f 91       	pop	r19
    1514:	2f 91       	pop	r18
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	0f 90       	pop	r0
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	0f 90       	pop	r0
    1520:	1f 90       	pop	r1
    1522:	18 95       	reti

00001524 <__vector_18>:
    1524:	1f 92       	push	r1
    1526:	0f 92       	push	r0
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	0f 92       	push	r0
    152c:	11 24       	eor	r1, r1
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	2f 93       	push	r18
    1534:	3f 93       	push	r19
    1536:	4f 93       	push	r20
    1538:	5f 93       	push	r21
    153a:	6f 93       	push	r22
    153c:	7f 93       	push	r23
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	af 93       	push	r26
    1544:	bf 93       	push	r27
    1546:	ef 93       	push	r30
    1548:	ff 93       	push	r31
    154a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    154e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    1552:	ac 01       	movw	r20, r24
    1554:	09 2e       	mov	r0, r25
    1556:	00 0c       	add	r0, r0
    1558:	66 0b       	sbc	r22, r22
    155a:	77 0b       	sbc	r23, r23
    155c:	9a 01       	movw	r18, r20
    155e:	11 27       	eor	r17, r17
    1560:	00 27       	eor	r16, r16
    1562:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1566:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	40 2b       	or	r20, r16
    1570:	51 2b       	or	r21, r17
    1572:	62 2b       	or	r22, r18
    1574:	73 2b       	or	r23, r19
    1576:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    157a:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    157e:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    1582:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    1586:	b0 9b       	sbis	0x16, 0	; 22
    1588:	1a c0       	rjmp	.+52     	; 0x15be <__vector_18+0x9a>
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	09 2e       	mov	r0, r25
    158e:	00 0c       	add	r0, r0
    1590:	aa 0b       	sbc	r26, r26
    1592:	bb 0b       	sbc	r27, r27
    1594:	bc 01       	movw	r22, r24
    1596:	55 27       	eor	r21, r21
    1598:	44 27       	eor	r20, r20
    159a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    159e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15a2:	a0 e0       	ldi	r26, 0x00	; 0
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	84 2b       	or	r24, r20
    15a8:	95 2b       	or	r25, r21
    15aa:	a6 2b       	or	r26, r22
    15ac:	b7 2b       	or	r27, r23
    15ae:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    15b2:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    15b6:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    15ba:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    15be:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <mtable+0x1a>
    15c2:	f0 91 de 01 	lds	r31, 0x01DE	; 0x8001de <mtable+0x1b>
    15c6:	30 97       	sbiw	r30, 0x00	; 0
    15c8:	39 f0       	breq	.+14     	; 0x15d8 <__vector_18+0xb4>
    15ca:	6d e0       	ldi	r22, 0x0D	; 13
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <otable+0x1a>
    15d2:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <otable+0x1b>
    15d6:	09 95       	icall
    15d8:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    15dc:	ff 91       	pop	r31
    15de:	ef 91       	pop	r30
    15e0:	bf 91       	pop	r27
    15e2:	af 91       	pop	r26
    15e4:	9f 91       	pop	r25
    15e6:	8f 91       	pop	r24
    15e8:	7f 91       	pop	r23
    15ea:	6f 91       	pop	r22
    15ec:	5f 91       	pop	r21
    15ee:	4f 91       	pop	r20
    15f0:	3f 91       	pop	r19
    15f2:	2f 91       	pop	r18
    15f4:	1f 91       	pop	r17
    15f6:	0f 91       	pop	r16
    15f8:	0f 90       	pop	r0
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	0f 90       	pop	r0
    15fe:	1f 90       	pop	r1
    1600:	18 95       	reti

00001602 <__vector_19>:
    1602:	1f 92       	push	r1
    1604:	0f 92       	push	r0
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	0f 92       	push	r0
    160a:	11 24       	eor	r1, r1
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	2f 93       	push	r18
    1612:	3f 93       	push	r19
    1614:	4f 93       	push	r20
    1616:	5f 93       	push	r21
    1618:	6f 93       	push	r22
    161a:	7f 93       	push	r23
    161c:	8f 93       	push	r24
    161e:	9f 93       	push	r25
    1620:	af 93       	push	r26
    1622:	bf 93       	push	r27
    1624:	ef 93       	push	r30
    1626:	ff 93       	push	r31
    1628:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    162c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    1630:	ac 01       	movw	r20, r24
    1632:	09 2e       	mov	r0, r25
    1634:	00 0c       	add	r0, r0
    1636:	66 0b       	sbc	r22, r22
    1638:	77 0b       	sbc	r23, r23
    163a:	9a 01       	movw	r18, r20
    163c:	11 27       	eor	r17, r17
    163e:	00 27       	eor	r16, r16
    1640:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1644:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	40 2b       	or	r20, r16
    164e:	51 2b       	or	r21, r17
    1650:	62 2b       	or	r22, r18
    1652:	73 2b       	or	r23, r19
    1654:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1658:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    165c:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    1660:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    1664:	b0 9b       	sbis	0x16, 0	; 22
    1666:	1a c0       	rjmp	.+52     	; 0x169c <__vector_19+0x9a>
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	09 2e       	mov	r0, r25
    166c:	00 0c       	add	r0, r0
    166e:	aa 0b       	sbc	r26, r26
    1670:	bb 0b       	sbc	r27, r27
    1672:	bc 01       	movw	r22, r24
    1674:	55 27       	eor	r21, r21
    1676:	44 27       	eor	r20, r20
    1678:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    167c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1680:	a0 e0       	ldi	r26, 0x00	; 0
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	84 2b       	or	r24, r20
    1686:	95 2b       	or	r25, r21
    1688:	a6 2b       	or	r26, r22
    168a:	b7 2b       	or	r27, r23
    168c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    1690:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    1694:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1698:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    169c:	e0 91 df 01 	lds	r30, 0x01DF	; 0x8001df <mtable+0x1c>
    16a0:	f0 91 e0 01 	lds	r31, 0x01E0	; 0x8001e0 <mtable+0x1d>
    16a4:	30 97       	sbiw	r30, 0x00	; 0
    16a6:	39 f0       	breq	.+14     	; 0x16b6 <__vector_19+0xb4>
    16a8:	6e e0       	ldi	r22, 0x0E	; 14
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <otable+0x1c>
    16b0:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <otable+0x1d>
    16b4:	09 95       	icall
    16b6:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    16ba:	ff 91       	pop	r31
    16bc:	ef 91       	pop	r30
    16be:	bf 91       	pop	r27
    16c0:	af 91       	pop	r26
    16c2:	9f 91       	pop	r25
    16c4:	8f 91       	pop	r24
    16c6:	7f 91       	pop	r23
    16c8:	6f 91       	pop	r22
    16ca:	5f 91       	pop	r21
    16cc:	4f 91       	pop	r20
    16ce:	3f 91       	pop	r19
    16d0:	2f 91       	pop	r18
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	1f 90       	pop	r1
    16de:	18 95       	reti

000016e0 <__vector_20>:
    16e0:	1f 92       	push	r1
    16e2:	0f 92       	push	r0
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	0f 92       	push	r0
    16e8:	11 24       	eor	r1, r1
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	2f 93       	push	r18
    16f0:	3f 93       	push	r19
    16f2:	4f 93       	push	r20
    16f4:	5f 93       	push	r21
    16f6:	6f 93       	push	r22
    16f8:	7f 93       	push	r23
    16fa:	8f 93       	push	r24
    16fc:	9f 93       	push	r25
    16fe:	af 93       	push	r26
    1700:	bf 93       	push	r27
    1702:	ef 93       	push	r30
    1704:	ff 93       	push	r31
    1706:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    170a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    170e:	ac 01       	movw	r20, r24
    1710:	09 2e       	mov	r0, r25
    1712:	00 0c       	add	r0, r0
    1714:	66 0b       	sbc	r22, r22
    1716:	77 0b       	sbc	r23, r23
    1718:	9a 01       	movw	r18, r20
    171a:	11 27       	eor	r17, r17
    171c:	00 27       	eor	r16, r16
    171e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1722:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	40 2b       	or	r20, r16
    172c:	51 2b       	or	r21, r17
    172e:	62 2b       	or	r22, r18
    1730:	73 2b       	or	r23, r19
    1732:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1736:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    173a:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    173e:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    1742:	b0 9b       	sbis	0x16, 0	; 22
    1744:	1a c0       	rjmp	.+52     	; 0x177a <__vector_20+0x9a>
    1746:	01 96       	adiw	r24, 0x01	; 1
    1748:	09 2e       	mov	r0, r25
    174a:	00 0c       	add	r0, r0
    174c:	aa 0b       	sbc	r26, r26
    174e:	bb 0b       	sbc	r27, r27
    1750:	bc 01       	movw	r22, r24
    1752:	55 27       	eor	r21, r21
    1754:	44 27       	eor	r20, r20
    1756:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    175a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    175e:	a0 e0       	ldi	r26, 0x00	; 0
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	84 2b       	or	r24, r20
    1764:	95 2b       	or	r25, r21
    1766:	a6 2b       	or	r26, r22
    1768:	b7 2b       	or	r27, r23
    176a:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    176e:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    1772:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1776:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    177a:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <mtable+0x1e>
    177e:	f0 91 e2 01 	lds	r31, 0x01E2	; 0x8001e2 <mtable+0x1f>
    1782:	30 97       	sbiw	r30, 0x00	; 0
    1784:	39 f0       	breq	.+14     	; 0x1794 <__vector_20+0xb4>
    1786:	6f e0       	ldi	r22, 0x0F	; 15
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <otable+0x1e>
    178e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <otable+0x1f>
    1792:	09 95       	icall
    1794:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	0f 90       	pop	r0
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	0f 90       	pop	r0
    17ba:	1f 90       	pop	r1
    17bc:	18 95       	reti

000017be <__vector_21>:
    17be:	1f 92       	push	r1
    17c0:	0f 92       	push	r0
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	0f 92       	push	r0
    17c6:	11 24       	eor	r1, r1
    17c8:	0f 93       	push	r16
    17ca:	1f 93       	push	r17
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
    17e4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    17e8:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    17ec:	ac 01       	movw	r20, r24
    17ee:	09 2e       	mov	r0, r25
    17f0:	00 0c       	add	r0, r0
    17f2:	66 0b       	sbc	r22, r22
    17f4:	77 0b       	sbc	r23, r23
    17f6:	9a 01       	movw	r18, r20
    17f8:	11 27       	eor	r17, r17
    17fa:	00 27       	eor	r16, r16
    17fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1800:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	40 2b       	or	r20, r16
    180a:	51 2b       	or	r21, r17
    180c:	62 2b       	or	r22, r18
    180e:	73 2b       	or	r23, r19
    1810:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    1814:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    1818:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    181c:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    1820:	b0 9b       	sbis	0x16, 0	; 22
    1822:	1a c0       	rjmp	.+52     	; 0x1858 <__vector_21+0x9a>
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	09 2e       	mov	r0, r25
    1828:	00 0c       	add	r0, r0
    182a:	aa 0b       	sbc	r26, r26
    182c:	bb 0b       	sbc	r27, r27
    182e:	bc 01       	movw	r22, r24
    1830:	55 27       	eor	r21, r21
    1832:	44 27       	eor	r20, r20
    1834:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1838:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    183c:	a0 e0       	ldi	r26, 0x00	; 0
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	84 2b       	or	r24, r20
    1842:	95 2b       	or	r25, r21
    1844:	a6 2b       	or	r26, r22
    1846:	b7 2b       	or	r27, r23
    1848:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    184c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    1850:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1854:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1858:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <mtable+0x20>
    185c:	f0 91 e4 01 	lds	r31, 0x01E4	; 0x8001e4 <mtable+0x21>
    1860:	30 97       	sbiw	r30, 0x00	; 0
    1862:	39 f0       	breq	.+14     	; 0x1872 <__vector_21+0xb4>
    1864:	60 e1       	ldi	r22, 0x10	; 16
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <otable+0x20>
    186c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <otable+0x21>
    1870:	09 95       	icall
    1872:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	bf 91       	pop	r27
    187c:	af 91       	pop	r26
    187e:	9f 91       	pop	r25
    1880:	8f 91       	pop	r24
    1882:	7f 91       	pop	r23
    1884:	6f 91       	pop	r22
    1886:	5f 91       	pop	r21
    1888:	4f 91       	pop	r20
    188a:	3f 91       	pop	r19
    188c:	2f 91       	pop	r18
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	0f 90       	pop	r0
    1898:	1f 90       	pop	r1
    189a:	18 95       	reti

0000189c <__vector_22>:
    189c:	1f 92       	push	r1
    189e:	0f 92       	push	r0
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	0f 92       	push	r0
    18a4:	11 24       	eor	r1, r1
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	2f 93       	push	r18
    18ac:	3f 93       	push	r19
    18ae:	4f 93       	push	r20
    18b0:	5f 93       	push	r21
    18b2:	6f 93       	push	r22
    18b4:	7f 93       	push	r23
    18b6:	8f 93       	push	r24
    18b8:	9f 93       	push	r25
    18ba:	af 93       	push	r26
    18bc:	bf 93       	push	r27
    18be:	ef 93       	push	r30
    18c0:	ff 93       	push	r31
    18c2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    18c6:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    18ca:	ac 01       	movw	r20, r24
    18cc:	09 2e       	mov	r0, r25
    18ce:	00 0c       	add	r0, r0
    18d0:	66 0b       	sbc	r22, r22
    18d2:	77 0b       	sbc	r23, r23
    18d4:	9a 01       	movw	r18, r20
    18d6:	11 27       	eor	r17, r17
    18d8:	00 27       	eor	r16, r16
    18da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	40 2b       	or	r20, r16
    18e8:	51 2b       	or	r21, r17
    18ea:	62 2b       	or	r22, r18
    18ec:	73 2b       	or	r23, r19
    18ee:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <timestamp>
    18f2:	50 93 24 01 	sts	0x0124, r21	; 0x800124 <timestamp+0x1>
    18f6:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <timestamp+0x2>
    18fa:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <timestamp+0x3>
    18fe:	b0 9b       	sbis	0x16, 0	; 22
    1900:	1a c0       	rjmp	.+52     	; 0x1936 <__vector_22+0x9a>
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	09 2e       	mov	r0, r25
    1906:	00 0c       	add	r0, r0
    1908:	aa 0b       	sbc	r26, r26
    190a:	bb 0b       	sbc	r27, r27
    190c:	bc 01       	movw	r22, r24
    190e:	55 27       	eor	r21, r21
    1910:	44 27       	eor	r20, r20
    1912:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1916:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    191a:	a0 e0       	ldi	r26, 0x00	; 0
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	84 2b       	or	r24, r20
    1920:	95 2b       	or	r25, r21
    1922:	a6 2b       	or	r26, r22
    1924:	b7 2b       	or	r27, r23
    1926:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <timestamp>
    192a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <timestamp+0x1>
    192e:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <timestamp+0x2>
    1932:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <timestamp+0x3>
    1936:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <mtable+0x22>
    193a:	f0 91 e6 01 	lds	r31, 0x01E6	; 0x8001e6 <mtable+0x23>
    193e:	30 97       	sbiw	r30, 0x00	; 0
    1940:	39 f0       	breq	.+14     	; 0x1950 <__vector_22+0xb4>
    1942:	61 e1       	ldi	r22, 0x11	; 17
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <otable+0x22>
    194a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <otable+0x23>
    194e:	09 95       	icall
    1950:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    1954:	ff 91       	pop	r31
    1956:	ef 91       	pop	r30
    1958:	bf 91       	pop	r27
    195a:	af 91       	pop	r26
    195c:	9f 91       	pop	r25
    195e:	8f 91       	pop	r24
    1960:	7f 91       	pop	r23
    1962:	6f 91       	pop	r22
    1964:	5f 91       	pop	r21
    1966:	4f 91       	pop	r20
    1968:	3f 91       	pop	r19
    196a:	2f 91       	pop	r18
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	0f 90       	pop	r0
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	0f 90       	pop	r0
    1976:	1f 90       	pop	r1
    1978:	18 95       	reti

0000197a <idle>:
    197a:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    197e:	78 94       	sei
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	83 bf       	out	0x33, r24	; 51
    1984:	88 95       	sleep
    1986:	fc cf       	rjmp	.-8      	; 0x1980 <idle+0x6>

00001988 <__vector_9>:
    1988:	1f 92       	push	r1
    198a:	0f 92       	push	r0
    198c:	0f b6       	in	r0, 0x3f	; 63
    198e:	0f 92       	push	r0
    1990:	11 24       	eor	r1, r1
    1992:	2f 93       	push	r18
    1994:	3f 93       	push	r19
    1996:	4f 93       	push	r20
    1998:	5f 93       	push	r21
    199a:	6f 93       	push	r22
    199c:	7f 93       	push	r23
    199e:	8f 93       	push	r24
    19a0:	9f 93       	push	r25
    19a2:	ef 93       	push	r30
    19a4:	ff 93       	push	r31
    19a6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    19aa:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <overflows+0x1>
    19b4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <overflows>
    19b8:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <timerQ>
    19bc:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <timerQ+0x1>
    19c0:	30 97       	sbiw	r30, 0x00	; 0
    19c2:	01 f1       	breq	.+64     	; 0x1a04 <__vector_9+0x7c>
    19c4:	42 81       	ldd	r20, Z+2	; 0x02
    19c6:	53 81       	ldd	r21, Z+3	; 0x03
    19c8:	64 81       	ldd	r22, Z+4	; 0x04
    19ca:	75 81       	ldd	r23, Z+5	; 0x05
    19cc:	86 17       	cp	r24, r22
    19ce:	97 07       	cpc	r25, r23
    19d0:	c9 f4       	brne	.+50     	; 0x1a04 <__vector_9+0x7c>
    19d2:	ca 01       	movw	r24, r20
    19d4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19d8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19dc:	42 1b       	sub	r20, r18
    19de:	53 0b       	sbc	r21, r19
    19e0:	41 30       	cpi	r20, 0x01	; 1
    19e2:	51 05       	cpc	r21, r1
    19e4:	29 f4       	brne	.+10     	; 0x19f0 <__vector_9+0x68>
    19e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19ea:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    19f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    19f8:	ef e6       	ldi	r30, 0x6F	; 111
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	82 60       	ori	r24, 0x02	; 2
    1a00:	80 83       	st	Z, r24
    1a02:	05 c0       	rjmp	.+10     	; 0x1a0e <__vector_9+0x86>
    1a04:	ef e6       	ldi	r30, 0x6F	; 111
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	8d 7f       	andi	r24, 0xFD	; 253
    1a0c:	80 83       	st	Z, r24
    1a0e:	ff 91       	pop	r31
    1a10:	ef 91       	pop	r30
    1a12:	9f 91       	pop	r25
    1a14:	8f 91       	pop	r24
    1a16:	7f 91       	pop	r23
    1a18:	6f 91       	pop	r22
    1a1a:	5f 91       	pop	r21
    1a1c:	4f 91       	pop	r20
    1a1e:	3f 91       	pop	r19
    1a20:	2f 91       	pop	r18
    1a22:	0f 90       	pop	r0
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	0f 90       	pop	r0
    1a28:	1f 90       	pop	r1
    1a2a:	18 95       	reti

00001a2c <__vector_7>:
    1a2c:	1f 92       	push	r1
    1a2e:	0f 92       	push	r0
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	0f 92       	push	r0
    1a34:	11 24       	eor	r1, r1
    1a36:	cf 92       	push	r12
    1a38:	df 92       	push	r13
    1a3a:	ef 92       	push	r14
    1a3c:	ff 92       	push	r15
    1a3e:	2f 93       	push	r18
    1a40:	3f 93       	push	r19
    1a42:	4f 93       	push	r20
    1a44:	5f 93       	push	r21
    1a46:	6f 93       	push	r22
    1a48:	7f 93       	push	r23
    1a4a:	8f 93       	push	r24
    1a4c:	9f 93       	push	r25
    1a4e:	af 93       	push	r26
    1a50:	bf 93       	push	r27
    1a52:	ef 93       	push	r30
    1a54:	ff 93       	push	r31
    1a56:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <overflows>
    1a5a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <overflows+0x1>
    1a5e:	6c 01       	movw	r12, r24
    1a60:	09 2e       	mov	r0, r25
    1a62:	00 0c       	add	r0, r0
    1a64:	ee 08       	sbc	r14, r14
    1a66:	ff 08       	sbc	r15, r15
    1a68:	76 01       	movw	r14, r12
    1a6a:	dd 24       	eor	r13, r13
    1a6c:	cc 24       	eor	r12, r12
    1a6e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a72:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	c4 2a       	or	r12, r20
    1a7c:	d5 2a       	or	r13, r21
    1a7e:	e6 2a       	or	r14, r22
    1a80:	f7 2a       	or	r15, r23
    1a82:	b0 9b       	sbis	0x16, 0	; 22
    1a84:	1e c0       	rjmp	.+60     	; 0x1ac2 <__vector_7+0x96>
    1a86:	6c 01       	movw	r12, r24
    1a88:	2f ef       	ldi	r18, 0xFF	; 255
    1a8a:	c2 1a       	sub	r12, r18
    1a8c:	d2 0a       	sbc	r13, r18
    1a8e:	0d 2c       	mov	r0, r13
    1a90:	00 0c       	add	r0, r0
    1a92:	ee 08       	sbc	r14, r14
    1a94:	ff 08       	sbc	r15, r15
    1a96:	d6 01       	movw	r26, r12
    1a98:	99 27       	eor	r25, r25
    1a9a:	88 27       	eor	r24, r24
    1a9c:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aa0:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1aa4:	e1 2c       	mov	r14, r1
    1aa6:	f1 2c       	mov	r15, r1
    1aa8:	c8 2a       	or	r12, r24
    1aaa:	d9 2a       	or	r13, r25
    1aac:	ea 2a       	or	r14, r26
    1aae:	fb 2a       	or	r15, r27
    1ab0:	08 c0       	rjmp	.+16     	; 0x1ac2 <__vector_7+0x96>
    1ab2:	87 e2       	ldi	r24, 0x27	; 39
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	0e 94 86 04 	call	0x90c	; 0x90c <dequeue>
    1aba:	69 e2       	ldi	r22, 0x29	; 41
    1abc:	71 e0       	ldi	r23, 0x01	; 1
    1abe:	0e 94 24 04 	call	0x848	; 0x848 <enqueueByDeadline>
    1ac2:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <timerQ>
    1ac6:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <timerQ+0x1>
    1aca:	30 97       	sbiw	r30, 0x00	; 0
    1acc:	69 f0       	breq	.+26     	; 0x1ae8 <__vector_7+0xbc>
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	a4 81       	ldd	r26, Z+4	; 0x04
    1ad4:	b5 81       	ldd	r27, Z+5	; 0x05
    1ad6:	8c 19       	sub	r24, r12
    1ad8:	9d 09       	sbc	r25, r13
    1ada:	ae 09       	sbc	r26, r14
    1adc:	bf 09       	sbc	r27, r15
    1ade:	18 16       	cp	r1, r24
    1ae0:	19 06       	cpc	r1, r25
    1ae2:	1a 06       	cpc	r1, r26
    1ae4:	1b 06       	cpc	r1, r27
    1ae6:	2c f7       	brge	.-54     	; 0x1ab2 <__vector_7+0x86>
    1ae8:	30 97       	sbiw	r30, 0x00	; 0
    1aea:	21 f1       	breq	.+72     	; 0x1b34 <__vector_7+0x108>
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	a4 81       	ldd	r26, Z+4	; 0x04
    1af2:	b5 81       	ldd	r27, Z+5	; 0x05
    1af4:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <overflows>
    1af8:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <overflows+0x1>
    1afc:	2a 17       	cp	r18, r26
    1afe:	3b 07       	cpc	r19, r27
    1b00:	c9 f4       	brne	.+50     	; 0x1b34 <__vector_7+0x108>
    1b02:	9c 01       	movw	r18, r24
    1b04:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b08:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b0c:	84 1b       	sub	r24, r20
    1b0e:	95 0b       	sbc	r25, r21
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	31 f4       	brne	.+12     	; 0x1b20 <__vector_7+0xf4>
    1b14:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b18:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b1c:	2f 5f       	subi	r18, 0xFF	; 255
    1b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b20:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b24:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b28:	ef e6       	ldi	r30, 0x6F	; 111
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	82 60       	ori	r24, 0x02	; 2
    1b30:	80 83       	st	Z, r24
    1b32:	05 c0       	rjmp	.+10     	; 0x1b3e <__vector_7+0x112>
    1b34:	ef e6       	ldi	r30, 0x6F	; 111
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	8d 7f       	andi	r24, 0xFD	; 253
    1b3c:	80 83       	st	Z, r24
    1b3e:	0e 94 bb 04 	call	0x976	; 0x976 <schedule>
    1b42:	ff 91       	pop	r31
    1b44:	ef 91       	pop	r30
    1b46:	bf 91       	pop	r27
    1b48:	af 91       	pop	r26
    1b4a:	9f 91       	pop	r25
    1b4c:	8f 91       	pop	r24
    1b4e:	7f 91       	pop	r23
    1b50:	6f 91       	pop	r22
    1b52:	5f 91       	pop	r21
    1b54:	4f 91       	pop	r20
    1b56:	3f 91       	pop	r19
    1b58:	2f 91       	pop	r18
    1b5a:	ff 90       	pop	r15
    1b5c:	ef 90       	pop	r14
    1b5e:	df 90       	pop	r13
    1b60:	cf 90       	pop	r12
    1b62:	0f 90       	pop	r0
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	0f 90       	pop	r0
    1b68:	1f 90       	pop	r1
    1b6a:	18 95       	reti

00001b6c <async>:
    1b6c:	3f 92       	push	r3
    1b6e:	4f 92       	push	r4
    1b70:	5f 92       	push	r5
    1b72:	6f 92       	push	r6
    1b74:	7f 92       	push	r7
    1b76:	8f 92       	push	r8
    1b78:	9f 92       	push	r9
    1b7a:	af 92       	push	r10
    1b7c:	bf 92       	push	r11
    1b7e:	cf 92       	push	r12
    1b80:	df 92       	push	r13
    1b82:	ef 92       	push	r14
    1b84:	ff 92       	push	r15
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	2b 01       	movw	r4, r22
    1b90:	3c 01       	movw	r6, r24
    1b92:	49 01       	movw	r8, r18
    1b94:	5a 01       	movw	r10, r20
    1b96:	8f b7       	in	r24, 0x3f	; 63
    1b98:	80 78       	andi	r24, 0x80	; 128
    1b9a:	38 2e       	mov	r3, r24
    1b9c:	f8 94       	cli
    1b9e:	86 e0       	ldi	r24, 0x06	; 6
    1ba0:	91 e0       	ldi	r25, 0x01	; 1
    1ba2:	0e 94 86 04 	call	0x90c	; 0x90c <dequeue>
    1ba6:	ec 01       	movw	r28, r24
    1ba8:	1b 87       	std	Y+11, r17	; 0x0b
    1baa:	0a 87       	std	Y+10, r16	; 0x0a
    1bac:	fd 86       	std	Y+13, r15	; 0x0d
    1bae:	ec 86       	std	Y+12, r14	; 0x0c
    1bb0:	df 86       	std	Y+15, r13	; 0x0f
    1bb2:	ce 86       	std	Y+14, r12	; 0x0e
    1bb4:	33 20       	and	r3, r3
    1bb6:	61 f0       	breq	.+24     	; 0x1bd0 <async+0x64>
    1bb8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1bbc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1bc0:	02 80       	ldd	r0, Z+2	; 0x02
    1bc2:	f3 81       	ldd	r31, Z+3	; 0x03
    1bc4:	e0 2d       	mov	r30, r0
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	a4 81       	ldd	r26, Z+4	; 0x04
    1bcc:	b5 81       	ldd	r27, Z+5	; 0x05
    1bce:	08 c0       	rjmp	.+16     	; 0x1be0 <async+0x74>
    1bd0:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <timestamp>
    1bd4:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <timestamp+0x1>
    1bd8:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <timestamp+0x2>
    1bdc:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <timestamp+0x3>
    1be0:	48 0e       	add	r4, r24
    1be2:	59 1e       	adc	r5, r25
    1be4:	6a 1e       	adc	r6, r26
    1be6:	7b 1e       	adc	r7, r27
    1be8:	4a 82       	std	Y+2, r4	; 0x02
    1bea:	5b 82       	std	Y+3, r5	; 0x03
    1bec:	6c 82       	std	Y+4, r6	; 0x04
    1bee:	7d 82       	std	Y+5, r7	; 0x05
    1bf0:	18 14       	cp	r1, r8
    1bf2:	19 04       	cpc	r1, r9
    1bf4:	1a 04       	cpc	r1, r10
    1bf6:	1b 04       	cpc	r1, r11
    1bf8:	44 f0       	brlt	.+16     	; 0x1c0a <async+0x9e>
    1bfa:	0f 2e       	mov	r0, r31
    1bfc:	88 24       	eor	r8, r8
    1bfe:	8a 94       	dec	r8
    1c00:	98 2c       	mov	r9, r8
    1c02:	a8 2c       	mov	r10, r8
    1c04:	ff e7       	ldi	r31, 0x7F	; 127
    1c06:	bf 2e       	mov	r11, r31
    1c08:	f0 2d       	mov	r31, r0
    1c0a:	84 0c       	add	r8, r4
    1c0c:	95 1c       	adc	r9, r5
    1c0e:	a6 1c       	adc	r10, r6
    1c10:	b7 1c       	adc	r11, r7
    1c12:	8e 82       	std	Y+6, r8	; 0x06
    1c14:	9f 82       	std	Y+7, r9	; 0x07
    1c16:	a8 86       	std	Y+8, r10	; 0x08
    1c18:	b9 86       	std	Y+9, r11	; 0x09
    1c1a:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <overflows>
    1c1e:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <overflows+0x1>
    1c22:	c9 01       	movw	r24, r18
    1c24:	03 2e       	mov	r0, r19
    1c26:	00 0c       	add	r0, r0
    1c28:	aa 0b       	sbc	r26, r26
    1c2a:	bb 0b       	sbc	r27, r27
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	99 27       	eor	r25, r25
    1c30:	88 27       	eor	r24, r24
    1c32:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c36:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	70 e0       	ldi	r23, 0x00	; 0
    1c3e:	84 2b       	or	r24, r20
    1c40:	95 2b       	or	r25, r21
    1c42:	a6 2b       	or	r26, r22
    1c44:	b7 2b       	or	r27, r23
    1c46:	b0 9b       	sbis	0x16, 0	; 22
    1c48:	13 c0       	rjmp	.+38     	; 0x1c70 <async+0x104>
    1c4a:	c9 01       	movw	r24, r18
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	09 2e       	mov	r0, r25
    1c50:	00 0c       	add	r0, r0
    1c52:	aa 0b       	sbc	r26, r26
    1c54:	bb 0b       	sbc	r27, r27
    1c56:	dc 01       	movw	r26, r24
    1c58:	99 27       	eor	r25, r25
    1c5a:	88 27       	eor	r24, r24
    1c5c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c60:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	84 2b       	or	r24, r20
    1c6a:	95 2b       	or	r25, r21
    1c6c:	a6 2b       	or	r26, r22
    1c6e:	b7 2b       	or	r27, r23
    1c70:	48 1a       	sub	r4, r24
    1c72:	59 0a       	sbc	r5, r25
    1c74:	6a 0a       	sbc	r6, r26
    1c76:	7b 0a       	sbc	r7, r27
    1c78:	14 14       	cp	r1, r4
    1c7a:	15 04       	cpc	r1, r5
    1c7c:	16 04       	cpc	r1, r6
    1c7e:	17 04       	cpc	r1, r7
    1c80:	ac f5       	brge	.+106    	; 0x1cec <async+0x180>
    1c82:	67 e2       	ldi	r22, 0x27	; 39
    1c84:	71 e0       	ldi	r23, 0x01	; 1
    1c86:	ce 01       	movw	r24, r28
    1c88:	0e 94 55 04 	call	0x8aa	; 0x8aa <enqueueByBaseline>
    1c8c:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <timerQ>
    1c90:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <timerQ+0x1>
    1c94:	30 97       	sbiw	r30, 0x00	; 0
    1c96:	21 f1       	breq	.+72     	; 0x1ce0 <async+0x174>
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	a4 81       	ldd	r26, Z+4	; 0x04
    1c9e:	b5 81       	ldd	r27, Z+5	; 0x05
    1ca0:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <overflows>
    1ca4:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <overflows+0x1>
    1ca8:	2a 17       	cp	r18, r26
    1caa:	3b 07       	cpc	r19, r27
    1cac:	c9 f4       	brne	.+50     	; 0x1ce0 <async+0x174>
    1cae:	9c 01       	movw	r18, r24
    1cb0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cb4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cb8:	84 1b       	sub	r24, r20
    1cba:	95 0b       	sbc	r25, r21
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	31 f4       	brne	.+12     	; 0x1ccc <async+0x160>
    1cc0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cc4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cc8:	2f 5f       	subi	r18, 0xFF	; 255
    1cca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ccc:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1cd0:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1cd4:	ef e6       	ldi	r30, 0x6F	; 111
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	82 60       	ori	r24, 0x02	; 2
    1cdc:	80 83       	st	Z, r24
    1cde:	39 c0       	rjmp	.+114    	; 0x1d52 <async+0x1e6>
    1ce0:	ef e6       	ldi	r30, 0x6F	; 111
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8d 7f       	andi	r24, 0xFD	; 253
    1ce8:	80 83       	st	Z, r24
    1cea:	33 c0       	rjmp	.+102    	; 0x1d52 <async+0x1e6>
    1cec:	69 e2       	ldi	r22, 0x29	; 41
    1cee:	71 e0       	ldi	r23, 0x01	; 1
    1cf0:	ce 01       	movw	r24, r28
    1cf2:	0e 94 24 04 	call	0x848	; 0x848 <enqueueByDeadline>
    1cf6:	33 20       	and	r3, r3
    1cf8:	61 f1       	breq	.+88     	; 0x1d52 <async+0x1e6>
    1cfa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1cfe:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1d02:	89 2b       	or	r24, r25
    1d04:	31 f1       	breq	.+76     	; 0x1d52 <async+0x1e6>
    1d06:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <msgQ>
    1d0a:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <msgQ+0x1>
    1d0e:	86 81       	ldd	r24, Z+6	; 0x06
    1d10:	97 81       	ldd	r25, Z+7	; 0x07
    1d12:	a0 85       	ldd	r26, Z+8	; 0x08
    1d14:	b1 85       	ldd	r27, Z+9	; 0x09
    1d16:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1d1a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1d1e:	02 80       	ldd	r0, Z+2	; 0x02
    1d20:	f3 81       	ldd	r31, Z+3	; 0x03
    1d22:	e0 2d       	mov	r30, r0
    1d24:	46 81       	ldd	r20, Z+6	; 0x06
    1d26:	57 81       	ldd	r21, Z+7	; 0x07
    1d28:	60 85       	ldd	r22, Z+8	; 0x08
    1d2a:	71 85       	ldd	r23, Z+9	; 0x09
    1d2c:	84 1b       	sub	r24, r20
    1d2e:	95 0b       	sbc	r25, r21
    1d30:	a6 0b       	sbc	r26, r22
    1d32:	b7 0b       	sbc	r27, r23
    1d34:	72 f4       	brpl	.+28     	; 0x1d52 <async+0x1e6>
    1d36:	84 e0       	ldi	r24, 0x04	; 4
    1d38:	91 e0       	ldi	r25, 0x01	; 1
    1d3a:	0e 94 b1 04 	call	0x962	; 0x962 <pop>
    1d3e:	62 e0       	ldi	r22, 0x02	; 2
    1d40:	71 e0       	ldi	r23, 0x01	; 1
    1d42:	0e 94 a7 04 	call	0x94e	; 0x94e <push>
    1d46:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
    1d4a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
    1d4e:	0e 94 04 04 	call	0x808	; 0x808 <dispatch>
    1d52:	33 20       	and	r3, r3
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <async+0x1ec>
    1d56:	78 94       	sei
    1d58:	ce 01       	movw	r24, r28
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	ff 90       	pop	r15
    1d64:	ef 90       	pop	r14
    1d66:	df 90       	pop	r13
    1d68:	cf 90       	pop	r12
    1d6a:	bf 90       	pop	r11
    1d6c:	af 90       	pop	r10
    1d6e:	9f 90       	pop	r9
    1d70:	8f 90       	pop	r8
    1d72:	7f 90       	pop	r7
    1d74:	6f 90       	pop	r6
    1d76:	5f 90       	pop	r5
    1d78:	4f 90       	pop	r4
    1d7a:	3f 90       	pop	r3
    1d7c:	08 95       	ret

00001d7e <sync>:
    1d7e:	cf 92       	push	r12
    1d80:	df 92       	push	r13
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	ec 01       	movw	r28, r24
    1d90:	7b 01       	movw	r14, r22
    1d92:	6a 01       	movw	r12, r20
    1d94:	1f b7       	in	r17, 0x3f	; 63
    1d96:	10 78       	andi	r17, 0x80	; 128
    1d98:	f8 94       	cli
    1d9a:	a8 81       	ld	r26, Y
    1d9c:	b9 81       	ldd	r27, Y+1	; 0x01
    1d9e:	10 97       	sbiw	r26, 0x00	; 0
    1da0:	19 f4       	brne	.+6      	; 0x1da8 <sync+0x2a>
    1da2:	35 c0       	rjmp	.+106    	; 0x1e0e <sync+0x90>
    1da4:	a0 81       	ld	r26, Z
    1da6:	b1 81       	ldd	r27, Z+1	; 0x01
    1da8:	14 96       	adiw	r26, 0x04	; 4
    1daa:	ed 91       	ld	r30, X+
    1dac:	fc 91       	ld	r31, X
    1dae:	15 97       	sbiw	r26, 0x05	; 5
    1db0:	30 97       	sbiw	r30, 0x00	; 0
    1db2:	c1 f7       	brne	.-16     	; 0x1da4 <sync+0x26>
    1db4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1db8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1dbc:	a2 17       	cp	r26, r18
    1dbe:	b3 07       	cpc	r27, r19
    1dc0:	11 f0       	breq	.+4      	; 0x1dc6 <sync+0x48>
    1dc2:	11 11       	cpse	r17, r1
    1dc4:	07 c0       	rjmp	.+14     	; 0x1dd4 <sync+0x56>
    1dc6:	11 23       	and	r17, r17
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <sync+0x4e>
    1dca:	4a c0       	rjmp	.+148    	; 0x1e60 <sync+0xe2>
    1dcc:	78 94       	sei
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	9f ef       	ldi	r25, 0xFF	; 255
    1dd2:	4e c0       	rjmp	.+156    	; 0x1e70 <sync+0xf2>
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	19 f0       	breq	.+6      	; 0x1de2 <sync+0x64>
    1ddc:	fc 01       	movw	r30, r24
    1dde:	15 82       	std	Z+5, r1	; 0x05
    1de0:	14 82       	std	Z+4, r1	; 0x04
    1de2:	3b 83       	std	Y+3, r19	; 0x03
    1de4:	2a 83       	std	Y+2, r18	; 0x02
    1de6:	f9 01       	movw	r30, r18
    1de8:	d5 83       	std	Z+5, r29	; 0x05
    1dea:	c4 83       	std	Z+4, r28	; 0x04
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 04 04 	call	0x808	; 0x808 <dispatch>
    1df2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1df6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	89 2b       	or	r24, r25
    1e00:	31 f4       	brne	.+12     	; 0x1e0e <sync+0x90>
    1e02:	11 23       	and	r17, r17
    1e04:	81 f1       	breq	.+96     	; 0x1e66 <sync+0xe8>
    1e06:	78 94       	sei
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	31 c0       	rjmp	.+98     	; 0x1e70 <sync+0xf2>
    1e0e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e12:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e16:	99 83       	std	Y+1, r25	; 0x01
    1e18:	88 83       	st	Y, r24
    1e1a:	11 23       	and	r17, r17
    1e1c:	29 f0       	breq	.+10     	; 0x1e28 <sync+0xaa>
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	9b 81       	ldd	r25, Y+3	; 0x03
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <sync+0xaa>
    1e26:	78 94       	sei
    1e28:	b6 01       	movw	r22, r12
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	f7 01       	movw	r30, r14
    1e2e:	09 95       	icall
    1e30:	f8 2e       	mov	r15, r24
    1e32:	09 2f       	mov	r16, r25
    1e34:	8f b7       	in	r24, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	19 82       	std	Y+1, r1	; 0x01
    1e3a:	18 82       	st	Y, r1
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e40:	82 30       	cpi	r24, 0x02	; 2
    1e42:	91 05       	cpc	r25, r1
    1e44:	38 f0       	brcs	.+14     	; 0x1e54 <sync+0xd6>
    1e46:	1b 82       	std	Y+3, r1	; 0x03
    1e48:	1a 82       	std	Y+2, r1	; 0x02
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	15 82       	std	Z+5, r1	; 0x05
    1e4e:	14 82       	std	Z+4, r1	; 0x04
    1e50:	0e 94 04 04 	call	0x808	; 0x808 <dispatch>
    1e54:	11 23       	and	r17, r17
    1e56:	51 f0       	breq	.+20     	; 0x1e6c <sync+0xee>
    1e58:	78 94       	sei
    1e5a:	8f 2d       	mov	r24, r15
    1e5c:	90 2f       	mov	r25, r16
    1e5e:	08 c0       	rjmp	.+16     	; 0x1e70 <sync+0xf2>
    1e60:	8f ef       	ldi	r24, 0xFF	; 255
    1e62:	9f ef       	ldi	r25, 0xFF	; 255
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <sync+0xf2>
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <sync+0xf2>
    1e6c:	8f 2d       	mov	r24, r15
    1e6e:	90 2f       	mov	r25, r16
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	df 90       	pop	r13
    1e7e:	cf 90       	pop	r12
    1e80:	08 95       	ret

00001e82 <run>:
    1e82:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e86:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e8a:	89 e2       	ldi	r24, 0x29	; 41
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	0e 94 86 04 	call	0x90c	; 0x90c <dequeue>
    1e92:	ec 01       	movw	r28, r24
    1e94:	f8 01       	movw	r30, r16
    1e96:	93 83       	std	Z+3, r25	; 0x03
    1e98:	82 83       	std	Z+2, r24	; 0x02
    1e9a:	78 94       	sei
    1e9c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e9e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ea0:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ea2:	5f 85       	ldd	r21, Y+15	; 0x0f
    1ea4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ea8:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <sync>
    1eac:	8f b7       	in	r24, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	66 e0       	ldi	r22, 0x06	; 6
    1eb2:	71 e0       	ldi	r23, 0x01	; 1
    1eb4:	ce 01       	movw	r24, r28
    1eb6:	0e 94 9d 04 	call	0x93a	; 0x93a <insert>
    1eba:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1ebe:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1ec2:	01 90       	ld	r0, Z+
    1ec4:	f0 81       	ld	r31, Z
    1ec6:	e0 2d       	mov	r30, r0
    1ec8:	c2 81       	ldd	r28, Z+2	; 0x02
    1eca:	d3 81       	ldd	r29, Z+3	; 0x03
    1ecc:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <msgQ>
    1ed0:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <msgQ+0x1>
    1ed4:	30 97       	sbiw	r30, 0x00	; 0
    1ed6:	a1 f0       	breq	.+40     	; 0x1f00 <run+0x7e>
    1ed8:	20 97       	sbiw	r28, 0x00	; 0
    1eda:	99 f2       	breq	.-90     	; 0x1e82 <run>
    1edc:	86 81       	ldd	r24, Z+6	; 0x06
    1ede:	97 81       	ldd	r25, Z+7	; 0x07
    1ee0:	a0 85       	ldd	r26, Z+8	; 0x08
    1ee2:	b1 85       	ldd	r27, Z+9	; 0x09
    1ee4:	4e 81       	ldd	r20, Y+6	; 0x06
    1ee6:	5f 81       	ldd	r21, Y+7	; 0x07
    1ee8:	68 85       	ldd	r22, Y+8	; 0x08
    1eea:	79 85       	ldd	r23, Y+9	; 0x09
    1eec:	84 1b       	sub	r24, r20
    1eee:	95 0b       	sbc	r25, r21
    1ef0:	a6 0b       	sbc	r26, r22
    1ef2:	b7 0b       	sbc	r27, r23
    1ef4:	18 16       	cp	r1, r24
    1ef6:	19 06       	cpc	r1, r25
    1ef8:	1a 06       	cpc	r1, r26
    1efa:	1b 06       	cpc	r1, r27
    1efc:	0c f0       	brlt	.+2      	; 0x1f00 <run+0x7e>
    1efe:	c1 cf       	rjmp	.-126    	; 0x1e82 <run>
    1f00:	82 e0       	ldi	r24, 0x02	; 2
    1f02:	91 e0       	ldi	r25, 0x01	; 1
    1f04:	0e 94 b1 04 	call	0x962	; 0x962 <pop>
    1f08:	64 e0       	ldi	r22, 0x04	; 4
    1f0a:	71 e0       	ldi	r23, 0x01	; 1
    1f0c:	0e 94 a7 04 	call	0x94e	; 0x94e <push>
    1f10:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    1f14:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <run+0x9c>
    1f1a:	a0 81       	ld	r26, Z
    1f1c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f1e:	14 96       	adiw	r26, 0x04	; 4
    1f20:	ed 91       	ld	r30, X+
    1f22:	fc 91       	ld	r31, X
    1f24:	15 97       	sbiw	r26, 0x05	; 5
    1f26:	30 97       	sbiw	r30, 0x00	; 0
    1f28:	c1 f7       	brne	.-16     	; 0x1f1a <run+0x98>
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	0e 94 04 04 	call	0x808	; 0x808 <dispatch>
    1f30:	a8 cf       	rjmp	.-176    	; 0x1e82 <run>

00001f32 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    1f32:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    1f34:	42 31       	cpi	r20, 0x12	; 18
    1f36:	b8 f4       	brcc	.+46     	; 0x1f66 <install+0x34>
        char status;
        DISABLE(status);
    1f38:	9f b7       	in	r25, 0x3f	; 63
    1f3a:	90 78       	andi	r25, 0x80	; 128
    1f3c:	f8 94       	cli
        otable[i] = obj;
    1f3e:	50 e0       	ldi	r21, 0x00	; 0
    1f40:	44 0f       	add	r20, r20
    1f42:	55 1f       	adc	r21, r21
    1f44:	da 01       	movw	r26, r20
    1f46:	a5 5d       	subi	r26, 0xD5	; 213
    1f48:	be 4f       	sbci	r27, 0xFE	; 254
    1f4a:	ed 93       	st	X+, r30
    1f4c:	fc 93       	st	X, r31
        mtable[i] = m;
    1f4e:	da 01       	movw	r26, r20
    1f50:	ad 53       	subi	r26, 0x3D	; 61
    1f52:	be 4f       	sbci	r27, 0xFE	; 254
    1f54:	6d 93       	st	X+, r22
    1f56:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1f58:	21 e0       	ldi	r18, 0x01	; 1
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	33 83       	std	Z+3, r19	; 0x03
    1f5e:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    1f60:	99 23       	and	r25, r25
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <install+0x34>
    1f64:	78 94       	sei
    1f66:	08 95       	ret

00001f68 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1f68:	8c 01       	movw	r16, r24
    1f6a:	7b 01       	movw	r14, r22
    1f6c:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1f6e:	8f b7       	in	r24, 0x3f	; 63
    1f70:	f8 94       	cli
    initialize();
    1f72:	0e 94 65 03 	call	0x6ca	; 0x6ca <initialize>
    ENABLE(1);
    1f76:	78 94       	sei
    if (m != NULL)
    1f78:	e1 14       	cp	r14, r1
    1f7a:	f1 04       	cpc	r15, r1
    1f7c:	41 f0       	breq	.+16     	; 0x1f8e <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	a9 01       	movw	r20, r18
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	70 e0       	ldi	r23, 0x00	; 0
    1f88:	cb 01       	movw	r24, r22
    1f8a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
    DISABLE(status);
    1f8e:	8f b7       	in	r24, 0x3f	; 63
    1f90:	f8 94       	cli
    idle();
    1f92:	0e 94 bd 0c 	call	0x197a	; 0x197a <idle>

00001f96 <carsEnter>:
    self->onBridge += 1;
    // AFTER(SEC(5), self, carDestroy, NULL); // 5 sec to cross bridge
    ASYNC(self, printCars, NULL);
}

void carsEnter(Bridge *self) {
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	ec 01       	movw	r28, r24
    // Allow up to 5 cars from the current direction to enter the bridge
    if(self->onBridge < 5 && self->carsPassed <= 5) {
    1fa8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1faa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fac:	05 97       	sbiw	r24, 0x05	; 5
    1fae:	b4 f5       	brge	.+108    	; 0x201c <carsEnter+0x86>
    1fb0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fb2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fb4:	86 30       	cpi	r24, 0x06	; 6
    1fb6:	91 05       	cpc	r25, r1
    1fb8:	8c f5       	brge	.+98     	; 0x201c <carsEnter+0x86>
        if(self->direction == southGreen && self->southQueue > 0) {
    1fba:	2c 81       	ldd	r18, Y+4	; 0x04
    1fbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fbe:	21 30       	cpi	r18, 0x01	; 1
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	a1 f4       	brne	.+40     	; 0x1fec <carsEnter+0x56>
    1fc4:	28 85       	ldd	r18, Y+8	; 0x08
    1fc6:	39 85       	ldd	r19, Y+9	; 0x09
    1fc8:	12 16       	cp	r1, r18
    1fca:	13 06       	cpc	r1, r19
    1fcc:	7c f4       	brge	.+30     	; 0x1fec <carsEnter+0x56>
            printf(self->carsPassed);
    1fce:	9f 93       	push	r25
    1fd0:	8f 93       	push	r24
    1fd2:	0e 94 b7 11 	call	0x236e	; 0x236e <printf>
			self->carsPassed++;
    1fd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fd8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	9f 87       	std	Y+15, r25	; 0x0f
    1fde:	8e 87       	std	Y+14, r24	; 0x0e
            USART_Transmit(0b0100);
    1fe0:	84 e0       	ldi	r24, 0x04	; 4
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	0e 94 69 11 	call	0x22d2	; 0x22d2 <USART_Transmit>
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
 
        }
        if(self->direction == northGreen && self->northQueue > 0) {
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff0:	89 2b       	or	r24, r25
    1ff2:	a1 f4       	brne	.+40     	; 0x201c <carsEnter+0x86>
    1ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff8:	18 16       	cp	r1, r24
    1ffa:	19 06       	cpc	r1, r25
    1ffc:	7c f4       	brge	.+30     	; 0x201c <carsEnter+0x86>
			self->carsPassed++;
    1ffe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2000:	9f 85       	ldd	r25, Y+15	; 0x0f
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	9f 87       	std	Y+15, r25	; 0x0f
    2006:	8e 87       	std	Y+14, r24	; 0x0e
            printf(self->carsPassed);
    2008:	9f 93       	push	r25
    200a:	8f 93       	push	r24
    200c:	0e 94 b7 11 	call	0x236e	; 0x236e <printf>
            USART_Transmit(0b0001);
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 69 11 	call	0x22d2	; 0x22d2 <USART_Transmit>
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0

        }
    }

    // If 5 cars have passed or no more cars in current direction, switch direction
    if (self->carsPassed >= 5 || (self->direction == southGreen && self->southQueue == 0) || (self->direction == northGreen && self->northQueue == 0)) {
    201c:	8e 85       	ldd	r24, Y+14	; 0x0e
    201e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2020:	05 97       	sbiw	r24, 0x05	; 5
    2022:	7c f4       	brge	.+30     	; 0x2042 <carsEnter+0xac>
    2024:	8c 81       	ldd	r24, Y+4	; 0x04
    2026:	9d 81       	ldd	r25, Y+5	; 0x05
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	91 05       	cpc	r25, r1
    202c:	21 f4       	brne	.+8      	; 0x2036 <carsEnter+0xa0>
    202e:	28 85       	ldd	r18, Y+8	; 0x08
    2030:	39 85       	ldd	r19, Y+9	; 0x09
    2032:	23 2b       	or	r18, r19
    2034:	31 f0       	breq	.+12     	; 0x2042 <carsEnter+0xac>
    2036:	89 2b       	or	r24, r25
    2038:	c1 f4       	brne	.+48     	; 0x206a <carsEnter+0xd4>
    203a:	8e 81       	ldd	r24, Y+6	; 0x06
    203c:	9f 81       	ldd	r25, Y+7	; 0x07
    203e:	89 2b       	or	r24, r25
    2040:	a1 f4       	brne	.+40     	; 0x206a <carsEnter+0xd4>
        if(self->onBridge==0 ) {
    2042:	8a 85       	ldd	r24, Y+10	; 0x0a
    2044:	9b 85       	ldd	r25, Y+11	; 0x0b
    2046:	89 2b       	or	r24, r25
    2048:	81 f4       	brne	.+32     	; 0x206a <carsEnter+0xd4>
            if(self->direction == southGreen) {
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
    204c:	9d 81       	ldd	r25, Y+5	; 0x05
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	91 05       	cpc	r25, r1
    2052:	19 f4       	brne	.+6      	; 0x205a <carsEnter+0xc4>
                self->direction = northGreen;
    2054:	1d 82       	std	Y+5, r1	; 0x05
    2056:	1c 82       	std	Y+4, r1	; 0x04
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <carsEnter+0xd0>
            } else if(self->direction == northGreen) {
    205a:	89 2b       	or	r24, r25
    205c:	21 f4       	brne	.+8      	; 0x2066 <carsEnter+0xd0>
                self->direction = southGreen;
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9d 83       	std	Y+5, r25	; 0x05
    2064:	8c 83       	std	Y+4, r24	; 0x04
            }
            self->carsPassed = 0; // Reset the count of cars passed
    2066:	1f 86       	std	Y+15, r1	; 0x0f
    2068:	1e 86       	std	Y+14, r1	; 0x0e
        }
    }

    // If no cars on the bridge and no cars in queue in current direction, switch direction
    if(self->onBridge==0 ) {
    206a:	8a 85       	ldd	r24, Y+10	; 0x0a
    206c:	9b 85       	ldd	r25, Y+11	; 0x0b
    206e:	89 2b       	or	r24, r25
    2070:	b1 f4       	brne	.+44     	; 0x209e <carsEnter+0x108>
        if(self->direction == southGreen && self->southQueue == 0) {
    2072:	8c 81       	ldd	r24, Y+4	; 0x04
    2074:	9d 81       	ldd	r25, Y+5	; 0x05
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	31 f4       	brne	.+12     	; 0x2086 <carsEnter+0xf0>
    207a:	88 85       	ldd	r24, Y+8	; 0x08
    207c:	99 85       	ldd	r25, Y+9	; 0x09
    207e:	89 2b       	or	r24, r25
    2080:	11 f4       	brne	.+4      	; 0x2086 <carsEnter+0xf0>
            self->direction = northGreen;
    2082:	1d 82       	std	Y+5, r1	; 0x05
    2084:	1c 82       	std	Y+4, r1	; 0x04
        }
        if(self->direction == northGreen && self->northQueue == 0) {
    2086:	8c 81       	ldd	r24, Y+4	; 0x04
    2088:	9d 81       	ldd	r25, Y+5	; 0x05
    208a:	89 2b       	or	r24, r25
    208c:	41 f4       	brne	.+16     	; 0x209e <carsEnter+0x108>
    208e:	8e 81       	ldd	r24, Y+6	; 0x06
    2090:	9f 81       	ldd	r25, Y+7	; 0x07
    2092:	89 2b       	or	r24, r25
    2094:	21 f4       	brne	.+8      	; 0x209e <carsEnter+0x108>
            self->direction = southGreen;
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	9d 83       	std	Y+5, r25	; 0x05
    209c:	8c 83       	std	Y+4, r24	; 0x04
        }
    }

    AFTER(SEC(1), self, carsEnter, NULL);
    209e:	c1 2c       	mov	r12, r1
    20a0:	d1 2c       	mov	r13, r1
    20a2:	0f 2e       	mov	r0, r31
    20a4:	fb ec       	ldi	r31, 0xCB	; 203
    20a6:	ef 2e       	mov	r14, r31
    20a8:	ff e0       	ldi	r31, 0x0F	; 15
    20aa:	ff 2e       	mov	r15, r31
    20ac:	f0 2d       	mov	r31, r0
    20ae:	8e 01       	movw	r16, r28
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	a9 01       	movw	r20, r18
    20b6:	62 e1       	ldi	r22, 0x12	; 18
    20b8:	7a e7       	ldi	r23, 0x7A	; 122
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
}
    20c2:	df 91       	pop	r29
    20c4:	cf 91       	pop	r28
    20c6:	1f 91       	pop	r17
    20c8:	0f 91       	pop	r16
    20ca:	ff 90       	pop	r15
    20cc:	ef 90       	pop	r14
    20ce:	df 90       	pop	r13
    20d0:	cf 90       	pop	r12
    20d2:	08 95       	ret

000020d4 <printCars>:
	printAt(self->northQueue,4);
	

}

void printCars(Bridge *self) {
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	ec 01       	movw	r28, r24
    // prints cars in queue and on bridge to LCD-display.
	printAt(self->southQueue,0);
    20da:	60 e0       	ldi	r22, 0x00	; 0
    20dc:	70 e0       	ldi	r23, 0x00	; 0
    20de:	88 85       	ldd	r24, Y+8	; 0x08
    20e0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printAt>
	printAt(self->onBridge,2);
    20e4:	62 e0       	ldi	r22, 0x02	; 2
    20e6:	70 e0       	ldi	r23, 0x00	; 0
    20e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ea:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printAt>
	printAt(self->northQueue,4);
    20ee:	64 e0       	ldi	r22, 0x04	; 4
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	8e 81       	ldd	r24, Y+6	; 0x06
    20f4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printAt>
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	08 95       	ret

000020fe <NorthboundArrival>:
#include <stdbool.h>
#include "trafficLights.h"
#include "TinyTimber.h"
#include <avr/io.h>

void NorthboundArrival(Bridge *self) {
    20fe:	cf 92       	push	r12
    2100:	df 92       	push	r13
    2102:	ef 92       	push	r14
    2104:	ff 92       	push	r15
    2106:	0f 93       	push	r16
    2108:	1f 93       	push	r17
    // adds car to the northbound bridge queue.
	self->northQueue += 1;
    210a:	fc 01       	movw	r30, r24
    210c:	26 81       	ldd	r18, Z+6	; 0x06
    210e:	37 81       	ldd	r19, Z+7	; 0x07
    2110:	2f 5f       	subi	r18, 0xFF	; 255
    2112:	3f 4f       	sbci	r19, 0xFF	; 255
    2114:	37 83       	std	Z+7, r19	; 0x07
    2116:	26 83       	std	Z+6, r18	; 0x06
	ASYNC(self, printCars, NULL);
    2118:	c1 2c       	mov	r12, r1
    211a:	d1 2c       	mov	r13, r1
    211c:	0f 2e       	mov	r0, r31
    211e:	fa e6       	ldi	r31, 0x6A	; 106
    2120:	ef 2e       	mov	r14, r31
    2122:	f0 e1       	ldi	r31, 0x10	; 16
    2124:	ff 2e       	mov	r15, r31
    2126:	f0 2d       	mov	r31, r0
    2128:	8c 01       	movw	r16, r24
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	a9 01       	movw	r20, r18
    2130:	60 e0       	ldi	r22, 0x00	; 0
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	cb 01       	movw	r24, r22
    2136:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
}
    213a:	1f 91       	pop	r17
    213c:	0f 91       	pop	r16
    213e:	ff 90       	pop	r15
    2140:	ef 90       	pop	r14
    2142:	df 90       	pop	r13
    2144:	cf 90       	pop	r12
    2146:	08 95       	ret

00002148 <SouthboundArrival>:

void SouthboundArrival(Bridge *self) {
    2148:	cf 92       	push	r12
    214a:	df 92       	push	r13
    214c:	ef 92       	push	r14
    214e:	ff 92       	push	r15
    2150:	0f 93       	push	r16
    2152:	1f 93       	push	r17
    // adds car to the southbound bridge queue.
	self->southQueue += 1;
    2154:	fc 01       	movw	r30, r24
    2156:	20 85       	ldd	r18, Z+8	; 0x08
    2158:	31 85       	ldd	r19, Z+9	; 0x09
    215a:	2f 5f       	subi	r18, 0xFF	; 255
    215c:	3f 4f       	sbci	r19, 0xFF	; 255
    215e:	31 87       	std	Z+9, r19	; 0x09
    2160:	20 87       	std	Z+8, r18	; 0x08
	ASYNC(self, printCars, NULL);
    2162:	c1 2c       	mov	r12, r1
    2164:	d1 2c       	mov	r13, r1
    2166:	0f 2e       	mov	r0, r31
    2168:	fa e6       	ldi	r31, 0x6A	; 106
    216a:	ef 2e       	mov	r14, r31
    216c:	f0 e1       	ldi	r31, 0x10	; 16
    216e:	ff 2e       	mov	r15, r31
    2170:	f0 2d       	mov	r31, r0
    2172:	8c 01       	movw	r16, r24
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	a9 01       	movw	r20, r18
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	cb 01       	movw	r24, r22
    2180:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
}
    2184:	1f 91       	pop	r17
    2186:	0f 91       	pop	r16
    2188:	ff 90       	pop	r15
    218a:	ef 90       	pop	r14
    218c:	df 90       	pop	r13
    218e:	cf 90       	pop	r12
    2190:	08 95       	ret

00002192 <enterSouth>:

void enterSouth(Bridge *self) {
    2192:	cf 92       	push	r12
    2194:	df 92       	push	r13
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	fc 01       	movw	r30, r24
    // Creates car event on bridge from south
    self->southQueue -= 1;
    21a0:	80 85       	ldd	r24, Z+8	; 0x08
    21a2:	91 85       	ldd	r25, Z+9	; 0x09
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	91 87       	std	Z+9, r25	; 0x09
    21a8:	80 87       	std	Z+8, r24	; 0x08
    self->onBridge += 1;
    21aa:	82 85       	ldd	r24, Z+10	; 0x0a
    21ac:	93 85       	ldd	r25, Z+11	; 0x0b
    21ae:	01 96       	adiw	r24, 0x01	; 1
    21b0:	93 87       	std	Z+11, r25	; 0x0b
    21b2:	82 87       	std	Z+10, r24	; 0x0a
    // AFTER(SEC(5), self, carDestroy, NULL); // 5 sec to cross bridge
    ASYNC(self, printCars, NULL);
    21b4:	c1 2c       	mov	r12, r1
    21b6:	d1 2c       	mov	r13, r1
    21b8:	0f 2e       	mov	r0, r31
    21ba:	fa e6       	ldi	r31, 0x6A	; 106
    21bc:	ef 2e       	mov	r14, r31
    21be:	f0 e1       	ldi	r31, 0x10	; 16
    21c0:	ff 2e       	mov	r15, r31
    21c2:	f0 2d       	mov	r31, r0
    21c4:	8f 01       	movw	r16, r30
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	a9 01       	movw	r20, r18
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	70 e0       	ldi	r23, 0x00	; 0
    21d0:	cb 01       	movw	r24, r22
    21d2:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
}
    21d6:	1f 91       	pop	r17
    21d8:	0f 91       	pop	r16
    21da:	ff 90       	pop	r15
    21dc:	ef 90       	pop	r14
    21de:	df 90       	pop	r13
    21e0:	cf 90       	pop	r12
    21e2:	08 95       	ret

000021e4 <enterNorth>:



void enterNorth(Bridge *self) {
    21e4:	cf 92       	push	r12
    21e6:	df 92       	push	r13
    21e8:	ef 92       	push	r14
    21ea:	ff 92       	push	r15
    21ec:	0f 93       	push	r16
    21ee:	1f 93       	push	r17
    21f0:	fc 01       	movw	r30, r24
    // Creates car event on bridge from north
    self->northQueue -= 1;
    21f2:	86 81       	ldd	r24, Z+6	; 0x06
    21f4:	97 81       	ldd	r25, Z+7	; 0x07
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	97 83       	std	Z+7, r25	; 0x07
    21fa:	86 83       	std	Z+6, r24	; 0x06
    self->onBridge += 1;
    21fc:	82 85       	ldd	r24, Z+10	; 0x0a
    21fe:	93 85       	ldd	r25, Z+11	; 0x0b
    2200:	01 96       	adiw	r24, 0x01	; 1
    2202:	93 87       	std	Z+11, r25	; 0x0b
    2204:	82 87       	std	Z+10, r24	; 0x0a
    // AFTER(SEC(5), self, carDestroy, NULL); // 5 sec to cross bridge
    ASYNC(self, printCars, NULL);
    2206:	c1 2c       	mov	r12, r1
    2208:	d1 2c       	mov	r13, r1
    220a:	0f 2e       	mov	r0, r31
    220c:	fa e6       	ldi	r31, 0x6A	; 106
    220e:	ef 2e       	mov	r14, r31
    2210:	f0 e1       	ldi	r31, 0x10	; 16
    2212:	ff 2e       	mov	r15, r31
    2214:	f0 2d       	mov	r31, r0
    2216:	8f 01       	movw	r16, r30
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	a9 01       	movw	r20, r18
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	70 e0       	ldi	r23, 0x00	; 0
    2222:	cb 01       	movw	r24, r22
    2224:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
}
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	ff 90       	pop	r15
    222e:	ef 90       	pop	r14
    2230:	df 90       	pop	r13
    2232:	cf 90       	pop	r12
    2234:	08 95       	ret

00002236 <carDestroy>:

    AFTER(SEC(1), self, carsEnter, NULL);
}
	

void carDestroy(Bridge *self) {
    2236:	cf 92       	push	r12
    2238:	df 92       	push	r13
    223a:	ef 92       	push	r14
    223c:	ff 92       	push	r15
    223e:	0f 93       	push	r16
    2240:	1f 93       	push	r17
    // demolishes car from simulation
	if(self->onBridge > 0) {
    2242:	fc 01       	movw	r30, r24
    2244:	22 85       	ldd	r18, Z+10	; 0x0a
    2246:	33 85       	ldd	r19, Z+11	; 0x0b
    2248:	12 16       	cp	r1, r18
    224a:	13 06       	cpc	r1, r19
    224c:	ac f4       	brge	.+42     	; 0x2278 <carDestroy+0x42>
    224e:	8c 01       	movw	r16, r24
		self->onBridge -= 1;
    2250:	21 50       	subi	r18, 0x01	; 1
    2252:	31 09       	sbc	r19, r1
    2254:	33 87       	std	Z+11, r19	; 0x0b
    2256:	22 87       	std	Z+10, r18	; 0x0a
		ASYNC(self, printCars, NULL);
    2258:	c1 2c       	mov	r12, r1
    225a:	d1 2c       	mov	r13, r1
    225c:	0f 2e       	mov	r0, r31
    225e:	fa e6       	ldi	r31, 0x6A	; 106
    2260:	ef 2e       	mov	r14, r31
    2262:	f0 e1       	ldi	r31, 0x10	; 16
    2264:	ff 2e       	mov	r15, r31
    2266:	f0 2d       	mov	r31, r0
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	a9 01       	movw	r20, r18
    226e:	60 e0       	ldi	r22, 0x00	; 0
    2270:	70 e0       	ldi	r23, 0x00	; 0
    2272:	cb 01       	movw	r24, r22
    2274:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <async>
	}
}
    2278:	1f 91       	pop	r17
    227a:	0f 91       	pop	r16
    227c:	ff 90       	pop	r15
    227e:	ef 90       	pop	r14
    2280:	df 90       	pop	r13
    2282:	cf 90       	pop	r12
    2284:	08 95       	ret

00002286 <init>:

void init(Bridge *self) {
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	ec 01       	movw	r28, r24
	// initiates bridge and starts car event.
	printAt(self->southQueue,0);
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	70 e0       	ldi	r23, 0x00	; 0
    2290:	88 85       	ldd	r24, Y+8	; 0x08
    2292:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printAt>
 	printAt(self->onBridge,2);
    2296:	62 e0       	ldi	r22, 0x02	; 2
    2298:	70 e0       	ldi	r23, 0x00	; 0
    229a:	8a 85       	ldd	r24, Y+10	; 0x0a
    229c:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printAt>
	printAt(self->northQueue,4);
    22a0:	64 e0       	ldi	r22, 0x04	; 4
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	8e 81       	ldd	r24, Y+6	; 0x06
    22a6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <printAt>
	

}
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	08 95       	ret

000022b0 <USART_Receive2>:
#include "Gui.h"
#include "USART_Receive.h"
#include <avr/io.h>

// - handles input data from simulation.
uint8_t USART_Receive2() {
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	1f 92       	push	r1
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62

    // - Wait for data to be received in buffer.
    while(!(UCSR0A & (1<<RXC0)));
    22ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
    22be:	88 23       	and	r24, r24
    22c0:	e4 f7       	brge	.-8      	; 0x22ba <USART_Receive2+0xa>

    // - Make received input data from buffer 8 bit length for comparing.
    volatile uint8_t input = UDR0;
    22c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    22c6:	89 83       	std	Y+1, r24	; 0x01

    return input;
    22c8:	89 81       	ldd	r24, Y+1	; 0x01

}
    22ca:	0f 90       	pop	r0
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	08 95       	ret

000022d2 <USART_Transmit>:


void USART_Transmit(unsigned char data) {
    // - Transmit light status to simulation.
    while(!(UCSR0A & (1<<UDRE0)));
    22d2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
    22d6:	95 ff       	sbrs	r25, 5
    22d8:	fc cf       	rjmp	.-8      	; 0x22d2 <USART_Transmit>
    UDR0 = data;
    22da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    22de:	08 95       	ret

000022e0 <__tablejump2__>:
    22e0:	ee 0f       	add	r30, r30
    22e2:	ff 1f       	adc	r31, r31
    22e4:	05 90       	lpm	r0, Z+
    22e6:	f4 91       	lpm	r31, Z
    22e8:	e0 2d       	mov	r30, r0
    22ea:	09 94       	ijmp

000022ec <setjmp>:
    22ec:	dc 01       	movw	r26, r24
    22ee:	2d 92       	st	X+, r2
    22f0:	3d 92       	st	X+, r3
    22f2:	4d 92       	st	X+, r4
    22f4:	5d 92       	st	X+, r5
    22f6:	6d 92       	st	X+, r6
    22f8:	7d 92       	st	X+, r7
    22fa:	8d 92       	st	X+, r8
    22fc:	9d 92       	st	X+, r9
    22fe:	ad 92       	st	X+, r10
    2300:	bd 92       	st	X+, r11
    2302:	cd 92       	st	X+, r12
    2304:	dd 92       	st	X+, r13
    2306:	ed 92       	st	X+, r14
    2308:	fd 92       	st	X+, r15
    230a:	0d 93       	st	X+, r16
    230c:	1d 93       	st	X+, r17
    230e:	cd 93       	st	X+, r28
    2310:	dd 93       	st	X+, r29
    2312:	ff 91       	pop	r31
    2314:	ef 91       	pop	r30
    2316:	8d b7       	in	r24, 0x3d	; 61
    2318:	8d 93       	st	X+, r24
    231a:	8e b7       	in	r24, 0x3e	; 62
    231c:	8d 93       	st	X+, r24
    231e:	8f b7       	in	r24, 0x3f	; 63
    2320:	8d 93       	st	X+, r24
    2322:	ed 93       	st	X+, r30
    2324:	fd 93       	st	X+, r31
    2326:	88 27       	eor	r24, r24
    2328:	99 27       	eor	r25, r25
    232a:	09 94       	ijmp

0000232c <longjmp>:
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	91 05       	cpc	r25, r1
    2334:	81 1d       	adc	r24, r1
    2336:	2d 90       	ld	r2, X+
    2338:	3d 90       	ld	r3, X+
    233a:	4d 90       	ld	r4, X+
    233c:	5d 90       	ld	r5, X+
    233e:	6d 90       	ld	r6, X+
    2340:	7d 90       	ld	r7, X+
    2342:	8d 90       	ld	r8, X+
    2344:	9d 90       	ld	r9, X+
    2346:	ad 90       	ld	r10, X+
    2348:	bd 90       	ld	r11, X+
    234a:	cd 90       	ld	r12, X+
    234c:	dd 90       	ld	r13, X+
    234e:	ed 90       	ld	r14, X+
    2350:	fd 90       	ld	r15, X+
    2352:	0d 91       	ld	r16, X+
    2354:	1d 91       	ld	r17, X+
    2356:	cd 91       	ld	r28, X+
    2358:	dd 91       	ld	r29, X+
    235a:	ed 91       	ld	r30, X+
    235c:	fd 91       	ld	r31, X+
    235e:	0d 90       	ld	r0, X+
    2360:	f8 94       	cli
    2362:	fe bf       	out	0x3e, r31	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	ed bf       	out	0x3d, r30	; 61
    2368:	ed 91       	ld	r30, X+
    236a:	fd 91       	ld	r31, X+
    236c:	09 94       	ijmp

0000236e <printf>:
    236e:	a0 e0       	ldi	r26, 0x00	; 0
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	ed eb       	ldi	r30, 0xBD	; 189
    2374:	f1 e1       	ldi	r31, 0x11	; 17
    2376:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__+0x20>
    237a:	ae 01       	movw	r20, r28
    237c:	4b 5f       	subi	r20, 0xFB	; 251
    237e:	5f 4f       	sbci	r21, 0xFF	; 255
    2380:	fa 01       	movw	r30, r20
    2382:	61 91       	ld	r22, Z+
    2384:	71 91       	ld	r23, Z+
    2386:	af 01       	movw	r20, r30
    2388:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <__iob+0x2>
    238c:	90 91 77 04 	lds	r25, 0x0477	; 0x800477 <__iob+0x3>
    2390:	0e 94 cd 11 	call	0x239a	; 0x239a <vfprintf>
    2394:	e2 e0       	ldi	r30, 0x02	; 2
    2396:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__+0x20>

0000239a <vfprintf>:
    239a:	ab e0       	ldi	r26, 0x0B	; 11
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e3 ed       	ldi	r30, 0xD3	; 211
    23a0:	f1 e1       	ldi	r31, 0x11	; 17
    23a2:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__prologue_saves__>
    23a6:	6c 01       	movw	r12, r24
    23a8:	7b 01       	movw	r14, r22
    23aa:	8a 01       	movw	r16, r20
    23ac:	fc 01       	movw	r30, r24
    23ae:	17 82       	std	Z+7, r1	; 0x07
    23b0:	16 82       	std	Z+6, r1	; 0x06
    23b2:	83 81       	ldd	r24, Z+3	; 0x03
    23b4:	81 ff       	sbrs	r24, 1
    23b6:	cc c1       	rjmp	.+920    	; 0x2750 <vfprintf+0x3b6>
    23b8:	ce 01       	movw	r24, r28
    23ba:	01 96       	adiw	r24, 0x01	; 1
    23bc:	3c 01       	movw	r6, r24
    23be:	f6 01       	movw	r30, r12
    23c0:	93 81       	ldd	r25, Z+3	; 0x03
    23c2:	f7 01       	movw	r30, r14
    23c4:	93 fd       	sbrc	r25, 3
    23c6:	85 91       	lpm	r24, Z+
    23c8:	93 ff       	sbrs	r25, 3
    23ca:	81 91       	ld	r24, Z+
    23cc:	7f 01       	movw	r14, r30
    23ce:	88 23       	and	r24, r24
    23d0:	09 f4       	brne	.+2      	; 0x23d4 <vfprintf+0x3a>
    23d2:	ba c1       	rjmp	.+884    	; 0x2748 <vfprintf+0x3ae>
    23d4:	85 32       	cpi	r24, 0x25	; 37
    23d6:	39 f4       	brne	.+14     	; 0x23e6 <vfprintf+0x4c>
    23d8:	93 fd       	sbrc	r25, 3
    23da:	85 91       	lpm	r24, Z+
    23dc:	93 ff       	sbrs	r25, 3
    23de:	81 91       	ld	r24, Z+
    23e0:	7f 01       	movw	r14, r30
    23e2:	85 32       	cpi	r24, 0x25	; 37
    23e4:	29 f4       	brne	.+10     	; 0x23f0 <vfprintf+0x56>
    23e6:	b6 01       	movw	r22, r12
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 c4 13 	call	0x2788	; 0x2788 <fputc>
    23ee:	e7 cf       	rjmp	.-50     	; 0x23be <vfprintf+0x24>
    23f0:	91 2c       	mov	r9, r1
    23f2:	21 2c       	mov	r2, r1
    23f4:	31 2c       	mov	r3, r1
    23f6:	ff e1       	ldi	r31, 0x1F	; 31
    23f8:	f3 15       	cp	r31, r3
    23fa:	d8 f0       	brcs	.+54     	; 0x2432 <vfprintf+0x98>
    23fc:	8b 32       	cpi	r24, 0x2B	; 43
    23fe:	79 f0       	breq	.+30     	; 0x241e <vfprintf+0x84>
    2400:	38 f4       	brcc	.+14     	; 0x2410 <vfprintf+0x76>
    2402:	80 32       	cpi	r24, 0x20	; 32
    2404:	79 f0       	breq	.+30     	; 0x2424 <vfprintf+0x8a>
    2406:	83 32       	cpi	r24, 0x23	; 35
    2408:	a1 f4       	brne	.+40     	; 0x2432 <vfprintf+0x98>
    240a:	23 2d       	mov	r18, r3
    240c:	20 61       	ori	r18, 0x10	; 16
    240e:	1d c0       	rjmp	.+58     	; 0x244a <vfprintf+0xb0>
    2410:	8d 32       	cpi	r24, 0x2D	; 45
    2412:	61 f0       	breq	.+24     	; 0x242c <vfprintf+0x92>
    2414:	80 33       	cpi	r24, 0x30	; 48
    2416:	69 f4       	brne	.+26     	; 0x2432 <vfprintf+0x98>
    2418:	23 2d       	mov	r18, r3
    241a:	21 60       	ori	r18, 0x01	; 1
    241c:	16 c0       	rjmp	.+44     	; 0x244a <vfprintf+0xb0>
    241e:	83 2d       	mov	r24, r3
    2420:	82 60       	ori	r24, 0x02	; 2
    2422:	38 2e       	mov	r3, r24
    2424:	e3 2d       	mov	r30, r3
    2426:	e4 60       	ori	r30, 0x04	; 4
    2428:	3e 2e       	mov	r3, r30
    242a:	2a c0       	rjmp	.+84     	; 0x2480 <vfprintf+0xe6>
    242c:	f3 2d       	mov	r31, r3
    242e:	f8 60       	ori	r31, 0x08	; 8
    2430:	1d c0       	rjmp	.+58     	; 0x246c <vfprintf+0xd2>
    2432:	37 fc       	sbrc	r3, 7
    2434:	2d c0       	rjmp	.+90     	; 0x2490 <vfprintf+0xf6>
    2436:	20 ed       	ldi	r18, 0xD0	; 208
    2438:	28 0f       	add	r18, r24
    243a:	2a 30       	cpi	r18, 0x0A	; 10
    243c:	40 f0       	brcs	.+16     	; 0x244e <vfprintf+0xb4>
    243e:	8e 32       	cpi	r24, 0x2E	; 46
    2440:	b9 f4       	brne	.+46     	; 0x2470 <vfprintf+0xd6>
    2442:	36 fc       	sbrc	r3, 6
    2444:	81 c1       	rjmp	.+770    	; 0x2748 <vfprintf+0x3ae>
    2446:	23 2d       	mov	r18, r3
    2448:	20 64       	ori	r18, 0x40	; 64
    244a:	32 2e       	mov	r3, r18
    244c:	19 c0       	rjmp	.+50     	; 0x2480 <vfprintf+0xe6>
    244e:	36 fe       	sbrs	r3, 6
    2450:	06 c0       	rjmp	.+12     	; 0x245e <vfprintf+0xc4>
    2452:	8a e0       	ldi	r24, 0x0A	; 10
    2454:	98 9e       	mul	r9, r24
    2456:	20 0d       	add	r18, r0
    2458:	11 24       	eor	r1, r1
    245a:	92 2e       	mov	r9, r18
    245c:	11 c0       	rjmp	.+34     	; 0x2480 <vfprintf+0xe6>
    245e:	ea e0       	ldi	r30, 0x0A	; 10
    2460:	2e 9e       	mul	r2, r30
    2462:	20 0d       	add	r18, r0
    2464:	11 24       	eor	r1, r1
    2466:	22 2e       	mov	r2, r18
    2468:	f3 2d       	mov	r31, r3
    246a:	f0 62       	ori	r31, 0x20	; 32
    246c:	3f 2e       	mov	r3, r31
    246e:	08 c0       	rjmp	.+16     	; 0x2480 <vfprintf+0xe6>
    2470:	8c 36       	cpi	r24, 0x6C	; 108
    2472:	21 f4       	brne	.+8      	; 0x247c <vfprintf+0xe2>
    2474:	83 2d       	mov	r24, r3
    2476:	80 68       	ori	r24, 0x80	; 128
    2478:	38 2e       	mov	r3, r24
    247a:	02 c0       	rjmp	.+4      	; 0x2480 <vfprintf+0xe6>
    247c:	88 36       	cpi	r24, 0x68	; 104
    247e:	41 f4       	brne	.+16     	; 0x2490 <vfprintf+0xf6>
    2480:	f7 01       	movw	r30, r14
    2482:	93 fd       	sbrc	r25, 3
    2484:	85 91       	lpm	r24, Z+
    2486:	93 ff       	sbrs	r25, 3
    2488:	81 91       	ld	r24, Z+
    248a:	7f 01       	movw	r14, r30
    248c:	81 11       	cpse	r24, r1
    248e:	b3 cf       	rjmp	.-154    	; 0x23f6 <vfprintf+0x5c>
    2490:	98 2f       	mov	r25, r24
    2492:	9f 7d       	andi	r25, 0xDF	; 223
    2494:	95 54       	subi	r25, 0x45	; 69
    2496:	93 30       	cpi	r25, 0x03	; 3
    2498:	28 f4       	brcc	.+10     	; 0x24a4 <vfprintf+0x10a>
    249a:	0c 5f       	subi	r16, 0xFC	; 252
    249c:	1f 4f       	sbci	r17, 0xFF	; 255
    249e:	9f e3       	ldi	r25, 0x3F	; 63
    24a0:	99 83       	std	Y+1, r25	; 0x01
    24a2:	0d c0       	rjmp	.+26     	; 0x24be <vfprintf+0x124>
    24a4:	83 36       	cpi	r24, 0x63	; 99
    24a6:	31 f0       	breq	.+12     	; 0x24b4 <vfprintf+0x11a>
    24a8:	83 37       	cpi	r24, 0x73	; 115
    24aa:	71 f0       	breq	.+28     	; 0x24c8 <vfprintf+0x12e>
    24ac:	83 35       	cpi	r24, 0x53	; 83
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <vfprintf+0x118>
    24b0:	59 c0       	rjmp	.+178    	; 0x2564 <vfprintf+0x1ca>
    24b2:	21 c0       	rjmp	.+66     	; 0x24f6 <vfprintf+0x15c>
    24b4:	f8 01       	movw	r30, r16
    24b6:	80 81       	ld	r24, Z
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	0e 5f       	subi	r16, 0xFE	; 254
    24bc:	1f 4f       	sbci	r17, 0xFF	; 255
    24be:	88 24       	eor	r8, r8
    24c0:	83 94       	inc	r8
    24c2:	91 2c       	mov	r9, r1
    24c4:	53 01       	movw	r10, r6
    24c6:	13 c0       	rjmp	.+38     	; 0x24ee <vfprintf+0x154>
    24c8:	28 01       	movw	r4, r16
    24ca:	f2 e0       	ldi	r31, 0x02	; 2
    24cc:	4f 0e       	add	r4, r31
    24ce:	51 1c       	adc	r5, r1
    24d0:	f8 01       	movw	r30, r16
    24d2:	a0 80       	ld	r10, Z
    24d4:	b1 80       	ldd	r11, Z+1	; 0x01
    24d6:	36 fe       	sbrs	r3, 6
    24d8:	03 c0       	rjmp	.+6      	; 0x24e0 <vfprintf+0x146>
    24da:	69 2d       	mov	r22, r9
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <vfprintf+0x14a>
    24e0:	6f ef       	ldi	r22, 0xFF	; 255
    24e2:	7f ef       	ldi	r23, 0xFF	; 255
    24e4:	c5 01       	movw	r24, r10
    24e6:	0e 94 b9 13 	call	0x2772	; 0x2772 <strnlen>
    24ea:	4c 01       	movw	r8, r24
    24ec:	82 01       	movw	r16, r4
    24ee:	f3 2d       	mov	r31, r3
    24f0:	ff 77       	andi	r31, 0x7F	; 127
    24f2:	3f 2e       	mov	r3, r31
    24f4:	16 c0       	rjmp	.+44     	; 0x2522 <vfprintf+0x188>
    24f6:	28 01       	movw	r4, r16
    24f8:	22 e0       	ldi	r18, 0x02	; 2
    24fa:	42 0e       	add	r4, r18
    24fc:	51 1c       	adc	r5, r1
    24fe:	f8 01       	movw	r30, r16
    2500:	a0 80       	ld	r10, Z
    2502:	b1 80       	ldd	r11, Z+1	; 0x01
    2504:	36 fe       	sbrs	r3, 6
    2506:	03 c0       	rjmp	.+6      	; 0x250e <vfprintf+0x174>
    2508:	69 2d       	mov	r22, r9
    250a:	70 e0       	ldi	r23, 0x00	; 0
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <vfprintf+0x178>
    250e:	6f ef       	ldi	r22, 0xFF	; 255
    2510:	7f ef       	ldi	r23, 0xFF	; 255
    2512:	c5 01       	movw	r24, r10
    2514:	0e 94 ae 13 	call	0x275c	; 0x275c <strnlen_P>
    2518:	4c 01       	movw	r8, r24
    251a:	f3 2d       	mov	r31, r3
    251c:	f0 68       	ori	r31, 0x80	; 128
    251e:	3f 2e       	mov	r3, r31
    2520:	82 01       	movw	r16, r4
    2522:	33 fc       	sbrc	r3, 3
    2524:	1b c0       	rjmp	.+54     	; 0x255c <vfprintf+0x1c2>
    2526:	82 2d       	mov	r24, r2
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	88 16       	cp	r8, r24
    252c:	99 06       	cpc	r9, r25
    252e:	b0 f4       	brcc	.+44     	; 0x255c <vfprintf+0x1c2>
    2530:	b6 01       	movw	r22, r12
    2532:	80 e2       	ldi	r24, 0x20	; 32
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	0e 94 c4 13 	call	0x2788	; 0x2788 <fputc>
    253a:	2a 94       	dec	r2
    253c:	f4 cf       	rjmp	.-24     	; 0x2526 <vfprintf+0x18c>
    253e:	f5 01       	movw	r30, r10
    2540:	37 fc       	sbrc	r3, 7
    2542:	85 91       	lpm	r24, Z+
    2544:	37 fe       	sbrs	r3, 7
    2546:	81 91       	ld	r24, Z+
    2548:	5f 01       	movw	r10, r30
    254a:	b6 01       	movw	r22, r12
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 c4 13 	call	0x2788	; 0x2788 <fputc>
    2552:	21 10       	cpse	r2, r1
    2554:	2a 94       	dec	r2
    2556:	21 e0       	ldi	r18, 0x01	; 1
    2558:	82 1a       	sub	r8, r18
    255a:	91 08       	sbc	r9, r1
    255c:	81 14       	cp	r8, r1
    255e:	91 04       	cpc	r9, r1
    2560:	71 f7       	brne	.-36     	; 0x253e <vfprintf+0x1a4>
    2562:	e8 c0       	rjmp	.+464    	; 0x2734 <vfprintf+0x39a>
    2564:	84 36       	cpi	r24, 0x64	; 100
    2566:	11 f0       	breq	.+4      	; 0x256c <vfprintf+0x1d2>
    2568:	89 36       	cpi	r24, 0x69	; 105
    256a:	41 f5       	brne	.+80     	; 0x25bc <vfprintf+0x222>
    256c:	f8 01       	movw	r30, r16
    256e:	37 fe       	sbrs	r3, 7
    2570:	07 c0       	rjmp	.+14     	; 0x2580 <vfprintf+0x1e6>
    2572:	60 81       	ld	r22, Z
    2574:	71 81       	ldd	r23, Z+1	; 0x01
    2576:	82 81       	ldd	r24, Z+2	; 0x02
    2578:	93 81       	ldd	r25, Z+3	; 0x03
    257a:	0c 5f       	subi	r16, 0xFC	; 252
    257c:	1f 4f       	sbci	r17, 0xFF	; 255
    257e:	08 c0       	rjmp	.+16     	; 0x2590 <vfprintf+0x1f6>
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	07 2e       	mov	r0, r23
    2586:	00 0c       	add	r0, r0
    2588:	88 0b       	sbc	r24, r24
    258a:	99 0b       	sbc	r25, r25
    258c:	0e 5f       	subi	r16, 0xFE	; 254
    258e:	1f 4f       	sbci	r17, 0xFF	; 255
    2590:	f3 2d       	mov	r31, r3
    2592:	ff 76       	andi	r31, 0x6F	; 111
    2594:	3f 2e       	mov	r3, r31
    2596:	97 ff       	sbrs	r25, 7
    2598:	09 c0       	rjmp	.+18     	; 0x25ac <vfprintf+0x212>
    259a:	90 95       	com	r25
    259c:	80 95       	com	r24
    259e:	70 95       	com	r23
    25a0:	61 95       	neg	r22
    25a2:	7f 4f       	sbci	r23, 0xFF	; 255
    25a4:	8f 4f       	sbci	r24, 0xFF	; 255
    25a6:	9f 4f       	sbci	r25, 0xFF	; 255
    25a8:	f0 68       	ori	r31, 0x80	; 128
    25aa:	3f 2e       	mov	r3, r31
    25ac:	2a e0       	ldi	r18, 0x0A	; 10
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	a3 01       	movw	r20, r6
    25b2:	0e 94 00 14 	call	0x2800	; 0x2800 <__ultoa_invert>
    25b6:	88 2e       	mov	r8, r24
    25b8:	86 18       	sub	r8, r6
    25ba:	45 c0       	rjmp	.+138    	; 0x2646 <vfprintf+0x2ac>
    25bc:	85 37       	cpi	r24, 0x75	; 117
    25be:	31 f4       	brne	.+12     	; 0x25cc <vfprintf+0x232>
    25c0:	23 2d       	mov	r18, r3
    25c2:	2f 7e       	andi	r18, 0xEF	; 239
    25c4:	b2 2e       	mov	r11, r18
    25c6:	2a e0       	ldi	r18, 0x0A	; 10
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	25 c0       	rjmp	.+74     	; 0x2616 <vfprintf+0x27c>
    25cc:	93 2d       	mov	r25, r3
    25ce:	99 7f       	andi	r25, 0xF9	; 249
    25d0:	b9 2e       	mov	r11, r25
    25d2:	8f 36       	cpi	r24, 0x6F	; 111
    25d4:	c1 f0       	breq	.+48     	; 0x2606 <vfprintf+0x26c>
    25d6:	18 f4       	brcc	.+6      	; 0x25de <vfprintf+0x244>
    25d8:	88 35       	cpi	r24, 0x58	; 88
    25da:	79 f0       	breq	.+30     	; 0x25fa <vfprintf+0x260>
    25dc:	b5 c0       	rjmp	.+362    	; 0x2748 <vfprintf+0x3ae>
    25de:	80 37       	cpi	r24, 0x70	; 112
    25e0:	19 f0       	breq	.+6      	; 0x25e8 <vfprintf+0x24e>
    25e2:	88 37       	cpi	r24, 0x78	; 120
    25e4:	21 f0       	breq	.+8      	; 0x25ee <vfprintf+0x254>
    25e6:	b0 c0       	rjmp	.+352    	; 0x2748 <vfprintf+0x3ae>
    25e8:	e9 2f       	mov	r30, r25
    25ea:	e0 61       	ori	r30, 0x10	; 16
    25ec:	be 2e       	mov	r11, r30
    25ee:	b4 fe       	sbrs	r11, 4
    25f0:	0d c0       	rjmp	.+26     	; 0x260c <vfprintf+0x272>
    25f2:	fb 2d       	mov	r31, r11
    25f4:	f4 60       	ori	r31, 0x04	; 4
    25f6:	bf 2e       	mov	r11, r31
    25f8:	09 c0       	rjmp	.+18     	; 0x260c <vfprintf+0x272>
    25fa:	34 fe       	sbrs	r3, 4
    25fc:	0a c0       	rjmp	.+20     	; 0x2612 <vfprintf+0x278>
    25fe:	29 2f       	mov	r18, r25
    2600:	26 60       	ori	r18, 0x06	; 6
    2602:	b2 2e       	mov	r11, r18
    2604:	06 c0       	rjmp	.+12     	; 0x2612 <vfprintf+0x278>
    2606:	28 e0       	ldi	r18, 0x08	; 8
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	05 c0       	rjmp	.+10     	; 0x2616 <vfprintf+0x27c>
    260c:	20 e1       	ldi	r18, 0x10	; 16
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <vfprintf+0x27c>
    2612:	20 e1       	ldi	r18, 0x10	; 16
    2614:	32 e0       	ldi	r19, 0x02	; 2
    2616:	f8 01       	movw	r30, r16
    2618:	b7 fe       	sbrs	r11, 7
    261a:	07 c0       	rjmp	.+14     	; 0x262a <vfprintf+0x290>
    261c:	60 81       	ld	r22, Z
    261e:	71 81       	ldd	r23, Z+1	; 0x01
    2620:	82 81       	ldd	r24, Z+2	; 0x02
    2622:	93 81       	ldd	r25, Z+3	; 0x03
    2624:	0c 5f       	subi	r16, 0xFC	; 252
    2626:	1f 4f       	sbci	r17, 0xFF	; 255
    2628:	06 c0       	rjmp	.+12     	; 0x2636 <vfprintf+0x29c>
    262a:	60 81       	ld	r22, Z
    262c:	71 81       	ldd	r23, Z+1	; 0x01
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	0e 5f       	subi	r16, 0xFE	; 254
    2634:	1f 4f       	sbci	r17, 0xFF	; 255
    2636:	a3 01       	movw	r20, r6
    2638:	0e 94 00 14 	call	0x2800	; 0x2800 <__ultoa_invert>
    263c:	88 2e       	mov	r8, r24
    263e:	86 18       	sub	r8, r6
    2640:	fb 2d       	mov	r31, r11
    2642:	ff 77       	andi	r31, 0x7F	; 127
    2644:	3f 2e       	mov	r3, r31
    2646:	36 fe       	sbrs	r3, 6
    2648:	0d c0       	rjmp	.+26     	; 0x2664 <vfprintf+0x2ca>
    264a:	23 2d       	mov	r18, r3
    264c:	2e 7f       	andi	r18, 0xFE	; 254
    264e:	a2 2e       	mov	r10, r18
    2650:	89 14       	cp	r8, r9
    2652:	58 f4       	brcc	.+22     	; 0x266a <vfprintf+0x2d0>
    2654:	34 fe       	sbrs	r3, 4
    2656:	0b c0       	rjmp	.+22     	; 0x266e <vfprintf+0x2d4>
    2658:	32 fc       	sbrc	r3, 2
    265a:	09 c0       	rjmp	.+18     	; 0x266e <vfprintf+0x2d4>
    265c:	83 2d       	mov	r24, r3
    265e:	8e 7e       	andi	r24, 0xEE	; 238
    2660:	a8 2e       	mov	r10, r24
    2662:	05 c0       	rjmp	.+10     	; 0x266e <vfprintf+0x2d4>
    2664:	b8 2c       	mov	r11, r8
    2666:	a3 2c       	mov	r10, r3
    2668:	03 c0       	rjmp	.+6      	; 0x2670 <vfprintf+0x2d6>
    266a:	b8 2c       	mov	r11, r8
    266c:	01 c0       	rjmp	.+2      	; 0x2670 <vfprintf+0x2d6>
    266e:	b9 2c       	mov	r11, r9
    2670:	a4 fe       	sbrs	r10, 4
    2672:	0f c0       	rjmp	.+30     	; 0x2692 <vfprintf+0x2f8>
    2674:	fe 01       	movw	r30, r28
    2676:	e8 0d       	add	r30, r8
    2678:	f1 1d       	adc	r31, r1
    267a:	80 81       	ld	r24, Z
    267c:	80 33       	cpi	r24, 0x30	; 48
    267e:	21 f4       	brne	.+8      	; 0x2688 <vfprintf+0x2ee>
    2680:	9a 2d       	mov	r25, r10
    2682:	99 7e       	andi	r25, 0xE9	; 233
    2684:	a9 2e       	mov	r10, r25
    2686:	09 c0       	rjmp	.+18     	; 0x269a <vfprintf+0x300>
    2688:	a2 fe       	sbrs	r10, 2
    268a:	06 c0       	rjmp	.+12     	; 0x2698 <vfprintf+0x2fe>
    268c:	b3 94       	inc	r11
    268e:	b3 94       	inc	r11
    2690:	04 c0       	rjmp	.+8      	; 0x269a <vfprintf+0x300>
    2692:	8a 2d       	mov	r24, r10
    2694:	86 78       	andi	r24, 0x86	; 134
    2696:	09 f0       	breq	.+2      	; 0x269a <vfprintf+0x300>
    2698:	b3 94       	inc	r11
    269a:	a3 fc       	sbrc	r10, 3
    269c:	11 c0       	rjmp	.+34     	; 0x26c0 <vfprintf+0x326>
    269e:	a0 fe       	sbrs	r10, 0
    26a0:	06 c0       	rjmp	.+12     	; 0x26ae <vfprintf+0x314>
    26a2:	b2 14       	cp	r11, r2
    26a4:	88 f4       	brcc	.+34     	; 0x26c8 <vfprintf+0x32e>
    26a6:	28 0c       	add	r2, r8
    26a8:	92 2c       	mov	r9, r2
    26aa:	9b 18       	sub	r9, r11
    26ac:	0e c0       	rjmp	.+28     	; 0x26ca <vfprintf+0x330>
    26ae:	b2 14       	cp	r11, r2
    26b0:	60 f4       	brcc	.+24     	; 0x26ca <vfprintf+0x330>
    26b2:	b6 01       	movw	r22, r12
    26b4:	80 e2       	ldi	r24, 0x20	; 32
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	0e 94 c4 13 	call	0x2788	; 0x2788 <fputc>
    26bc:	b3 94       	inc	r11
    26be:	f7 cf       	rjmp	.-18     	; 0x26ae <vfprintf+0x314>
    26c0:	b2 14       	cp	r11, r2
    26c2:	18 f4       	brcc	.+6      	; 0x26ca <vfprintf+0x330>
    26c4:	2b 18       	sub	r2, r11
    26c6:	02 c0       	rjmp	.+4      	; 0x26cc <vfprintf+0x332>
    26c8:	98 2c       	mov	r9, r8
    26ca:	21 2c       	mov	r2, r1
    26cc:	a4 fe       	sbrs	r10, 4
    26ce:	10 c0       	rjmp	.+32     	; 0x26f0 <vfprintf+0x356>
    26d0:	b6 01       	movw	r22, r12
    26d2:	80 e3       	ldi	r24, 0x30	; 48
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 c4 13 	call	0x2788	; 0x2788 <fputc>
    26da:	a2 fe       	sbrs	r10, 2
    26dc:	17 c0       	rjmp	.+46     	; 0x270c <vfprintf+0x372>
    26de:	a1 fc       	sbrc	r10, 1
    26e0:	03 c0       	rjmp	.+6      	; 0x26e8 <vfprintf+0x34e>
    26e2:	88 e7       	ldi	r24, 0x78	; 120
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	02 c0       	rjmp	.+4      	; 0x26ec <vfprintf+0x352>
    26e8:	88 e5       	ldi	r24, 0x58	; 88
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	b6 01       	movw	r22, r12
    26ee:	0c c0       	rjmp	.+24     	; 0x2708 <vfprintf+0x36e>
    26f0:	8a 2d       	mov	r24, r10
    26f2:	86 78       	andi	r24, 0x86	; 134
    26f4:	59 f0       	breq	.+22     	; 0x270c <vfprintf+0x372>
    26f6:	a1 fe       	sbrs	r10, 1
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <vfprintf+0x364>
    26fa:	8b e2       	ldi	r24, 0x2B	; 43
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <vfprintf+0x366>
    26fe:	80 e2       	ldi	r24, 0x20	; 32
    2700:	a7 fc       	sbrc	r10, 7
    2702:	8d e2       	ldi	r24, 0x2D	; 45
    2704:	b6 01       	movw	r22, r12
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 c4 13 	call	0x2788	; 0x2788 <fputc>
    270c:	89 14       	cp	r8, r9
    270e:	38 f4       	brcc	.+14     	; 0x271e <vfprintf+0x384>
    2710:	b6 01       	movw	r22, r12
    2712:	80 e3       	ldi	r24, 0x30	; 48
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 c4 13 	call	0x2788	; 0x2788 <fputc>
    271a:	9a 94       	dec	r9
    271c:	f7 cf       	rjmp	.-18     	; 0x270c <vfprintf+0x372>
    271e:	8a 94       	dec	r8
    2720:	f3 01       	movw	r30, r6
    2722:	e8 0d       	add	r30, r8
    2724:	f1 1d       	adc	r31, r1
    2726:	80 81       	ld	r24, Z
    2728:	b6 01       	movw	r22, r12
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	0e 94 c4 13 	call	0x2788	; 0x2788 <fputc>
    2730:	81 10       	cpse	r8, r1
    2732:	f5 cf       	rjmp	.-22     	; 0x271e <vfprintf+0x384>
    2734:	22 20       	and	r2, r2
    2736:	09 f4       	brne	.+2      	; 0x273a <vfprintf+0x3a0>
    2738:	42 ce       	rjmp	.-892    	; 0x23be <vfprintf+0x24>
    273a:	b6 01       	movw	r22, r12
    273c:	80 e2       	ldi	r24, 0x20	; 32
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	0e 94 c4 13 	call	0x2788	; 0x2788 <fputc>
    2744:	2a 94       	dec	r2
    2746:	f6 cf       	rjmp	.-20     	; 0x2734 <vfprintf+0x39a>
    2748:	f6 01       	movw	r30, r12
    274a:	86 81       	ldd	r24, Z+6	; 0x06
    274c:	97 81       	ldd	r25, Z+7	; 0x07
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <vfprintf+0x3ba>
    2750:	8f ef       	ldi	r24, 0xFF	; 255
    2752:	9f ef       	ldi	r25, 0xFF	; 255
    2754:	2b 96       	adiw	r28, 0x0b	; 11
    2756:	e2 e1       	ldi	r30, 0x12	; 18
    2758:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__epilogue_restores__>

0000275c <strnlen_P>:
    275c:	fc 01       	movw	r30, r24
    275e:	05 90       	lpm	r0, Z+
    2760:	61 50       	subi	r22, 0x01	; 1
    2762:	70 40       	sbci	r23, 0x00	; 0
    2764:	01 10       	cpse	r0, r1
    2766:	d8 f7       	brcc	.-10     	; 0x275e <strnlen_P+0x2>
    2768:	80 95       	com	r24
    276a:	90 95       	com	r25
    276c:	8e 0f       	add	r24, r30
    276e:	9f 1f       	adc	r25, r31
    2770:	08 95       	ret

00002772 <strnlen>:
    2772:	fc 01       	movw	r30, r24
    2774:	61 50       	subi	r22, 0x01	; 1
    2776:	70 40       	sbci	r23, 0x00	; 0
    2778:	01 90       	ld	r0, Z+
    277a:	01 10       	cpse	r0, r1
    277c:	d8 f7       	brcc	.-10     	; 0x2774 <strnlen+0x2>
    277e:	80 95       	com	r24
    2780:	90 95       	com	r25
    2782:	8e 0f       	add	r24, r30
    2784:	9f 1f       	adc	r25, r31
    2786:	08 95       	ret

00002788 <fputc>:
    2788:	0f 93       	push	r16
    278a:	1f 93       	push	r17
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	fb 01       	movw	r30, r22
    2792:	23 81       	ldd	r18, Z+3	; 0x03
    2794:	21 fd       	sbrc	r18, 1
    2796:	03 c0       	rjmp	.+6      	; 0x279e <fputc+0x16>
    2798:	8f ef       	ldi	r24, 0xFF	; 255
    279a:	9f ef       	ldi	r25, 0xFF	; 255
    279c:	2c c0       	rjmp	.+88     	; 0x27f6 <fputc+0x6e>
    279e:	22 ff       	sbrs	r18, 2
    27a0:	16 c0       	rjmp	.+44     	; 0x27ce <fputc+0x46>
    27a2:	46 81       	ldd	r20, Z+6	; 0x06
    27a4:	57 81       	ldd	r21, Z+7	; 0x07
    27a6:	24 81       	ldd	r18, Z+4	; 0x04
    27a8:	35 81       	ldd	r19, Z+5	; 0x05
    27aa:	42 17       	cp	r20, r18
    27ac:	53 07       	cpc	r21, r19
    27ae:	44 f4       	brge	.+16     	; 0x27c0 <fputc+0x38>
    27b0:	a0 81       	ld	r26, Z
    27b2:	b1 81       	ldd	r27, Z+1	; 0x01
    27b4:	9d 01       	movw	r18, r26
    27b6:	2f 5f       	subi	r18, 0xFF	; 255
    27b8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ba:	31 83       	std	Z+1, r19	; 0x01
    27bc:	20 83       	st	Z, r18
    27be:	8c 93       	st	X, r24
    27c0:	26 81       	ldd	r18, Z+6	; 0x06
    27c2:	37 81       	ldd	r19, Z+7	; 0x07
    27c4:	2f 5f       	subi	r18, 0xFF	; 255
    27c6:	3f 4f       	sbci	r19, 0xFF	; 255
    27c8:	37 83       	std	Z+7, r19	; 0x07
    27ca:	26 83       	std	Z+6, r18	; 0x06
    27cc:	14 c0       	rjmp	.+40     	; 0x27f6 <fputc+0x6e>
    27ce:	8b 01       	movw	r16, r22
    27d0:	ec 01       	movw	r28, r24
    27d2:	fb 01       	movw	r30, r22
    27d4:	00 84       	ldd	r0, Z+8	; 0x08
    27d6:	f1 85       	ldd	r31, Z+9	; 0x09
    27d8:	e0 2d       	mov	r30, r0
    27da:	09 95       	icall
    27dc:	89 2b       	or	r24, r25
    27de:	e1 f6       	brne	.-72     	; 0x2798 <fputc+0x10>
    27e0:	d8 01       	movw	r26, r16
    27e2:	16 96       	adiw	r26, 0x06	; 6
    27e4:	8d 91       	ld	r24, X+
    27e6:	9c 91       	ld	r25, X
    27e8:	17 97       	sbiw	r26, 0x07	; 7
    27ea:	01 96       	adiw	r24, 0x01	; 1
    27ec:	17 96       	adiw	r26, 0x07	; 7
    27ee:	9c 93       	st	X, r25
    27f0:	8e 93       	st	-X, r24
    27f2:	16 97       	sbiw	r26, 0x06	; 6
    27f4:	ce 01       	movw	r24, r28
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	08 95       	ret

00002800 <__ultoa_invert>:
    2800:	fa 01       	movw	r30, r20
    2802:	aa 27       	eor	r26, r26
    2804:	28 30       	cpi	r18, 0x08	; 8
    2806:	51 f1       	breq	.+84     	; 0x285c <__ultoa_invert+0x5c>
    2808:	20 31       	cpi	r18, 0x10	; 16
    280a:	81 f1       	breq	.+96     	; 0x286c <__ultoa_invert+0x6c>
    280c:	e8 94       	clt
    280e:	6f 93       	push	r22
    2810:	6e 7f       	andi	r22, 0xFE	; 254
    2812:	6e 5f       	subi	r22, 0xFE	; 254
    2814:	7f 4f       	sbci	r23, 0xFF	; 255
    2816:	8f 4f       	sbci	r24, 0xFF	; 255
    2818:	9f 4f       	sbci	r25, 0xFF	; 255
    281a:	af 4f       	sbci	r26, 0xFF	; 255
    281c:	b1 e0       	ldi	r27, 0x01	; 1
    281e:	3e d0       	rcall	.+124    	; 0x289c <__ultoa_invert+0x9c>
    2820:	b4 e0       	ldi	r27, 0x04	; 4
    2822:	3c d0       	rcall	.+120    	; 0x289c <__ultoa_invert+0x9c>
    2824:	67 0f       	add	r22, r23
    2826:	78 1f       	adc	r23, r24
    2828:	89 1f       	adc	r24, r25
    282a:	9a 1f       	adc	r25, r26
    282c:	a1 1d       	adc	r26, r1
    282e:	68 0f       	add	r22, r24
    2830:	79 1f       	adc	r23, r25
    2832:	8a 1f       	adc	r24, r26
    2834:	91 1d       	adc	r25, r1
    2836:	a1 1d       	adc	r26, r1
    2838:	6a 0f       	add	r22, r26
    283a:	71 1d       	adc	r23, r1
    283c:	81 1d       	adc	r24, r1
    283e:	91 1d       	adc	r25, r1
    2840:	a1 1d       	adc	r26, r1
    2842:	20 d0       	rcall	.+64     	; 0x2884 <__ultoa_invert+0x84>
    2844:	09 f4       	brne	.+2      	; 0x2848 <__ultoa_invert+0x48>
    2846:	68 94       	set
    2848:	3f 91       	pop	r19
    284a:	2a e0       	ldi	r18, 0x0A	; 10
    284c:	26 9f       	mul	r18, r22
    284e:	11 24       	eor	r1, r1
    2850:	30 19       	sub	r19, r0
    2852:	30 5d       	subi	r19, 0xD0	; 208
    2854:	31 93       	st	Z+, r19
    2856:	de f6       	brtc	.-74     	; 0x280e <__ultoa_invert+0xe>
    2858:	cf 01       	movw	r24, r30
    285a:	08 95       	ret
    285c:	46 2f       	mov	r20, r22
    285e:	47 70       	andi	r20, 0x07	; 7
    2860:	40 5d       	subi	r20, 0xD0	; 208
    2862:	41 93       	st	Z+, r20
    2864:	b3 e0       	ldi	r27, 0x03	; 3
    2866:	0f d0       	rcall	.+30     	; 0x2886 <__ultoa_invert+0x86>
    2868:	c9 f7       	brne	.-14     	; 0x285c <__ultoa_invert+0x5c>
    286a:	f6 cf       	rjmp	.-20     	; 0x2858 <__ultoa_invert+0x58>
    286c:	46 2f       	mov	r20, r22
    286e:	4f 70       	andi	r20, 0x0F	; 15
    2870:	40 5d       	subi	r20, 0xD0	; 208
    2872:	4a 33       	cpi	r20, 0x3A	; 58
    2874:	18 f0       	brcs	.+6      	; 0x287c <__ultoa_invert+0x7c>
    2876:	49 5d       	subi	r20, 0xD9	; 217
    2878:	31 fd       	sbrc	r19, 1
    287a:	40 52       	subi	r20, 0x20	; 32
    287c:	41 93       	st	Z+, r20
    287e:	02 d0       	rcall	.+4      	; 0x2884 <__ultoa_invert+0x84>
    2880:	a9 f7       	brne	.-22     	; 0x286c <__ultoa_invert+0x6c>
    2882:	ea cf       	rjmp	.-44     	; 0x2858 <__ultoa_invert+0x58>
    2884:	b4 e0       	ldi	r27, 0x04	; 4
    2886:	a6 95       	lsr	r26
    2888:	97 95       	ror	r25
    288a:	87 95       	ror	r24
    288c:	77 95       	ror	r23
    288e:	67 95       	ror	r22
    2890:	ba 95       	dec	r27
    2892:	c9 f7       	brne	.-14     	; 0x2886 <__ultoa_invert+0x86>
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	61 05       	cpc	r22, r1
    2898:	71 05       	cpc	r23, r1
    289a:	08 95       	ret
    289c:	9b 01       	movw	r18, r22
    289e:	ac 01       	movw	r20, r24
    28a0:	0a 2e       	mov	r0, r26
    28a2:	06 94       	lsr	r0
    28a4:	57 95       	ror	r21
    28a6:	47 95       	ror	r20
    28a8:	37 95       	ror	r19
    28aa:	27 95       	ror	r18
    28ac:	ba 95       	dec	r27
    28ae:	c9 f7       	brne	.-14     	; 0x28a2 <__ultoa_invert+0xa2>
    28b0:	62 0f       	add	r22, r18
    28b2:	73 1f       	adc	r23, r19
    28b4:	84 1f       	adc	r24, r20
    28b6:	95 1f       	adc	r25, r21
    28b8:	a0 1d       	adc	r26, r0
    28ba:	08 95       	ret

000028bc <__prologue_saves__>:
    28bc:	2f 92       	push	r2
    28be:	3f 92       	push	r3
    28c0:	4f 92       	push	r4
    28c2:	5f 92       	push	r5
    28c4:	6f 92       	push	r6
    28c6:	7f 92       	push	r7
    28c8:	8f 92       	push	r8
    28ca:	9f 92       	push	r9
    28cc:	af 92       	push	r10
    28ce:	bf 92       	push	r11
    28d0:	cf 92       	push	r12
    28d2:	df 92       	push	r13
    28d4:	ef 92       	push	r14
    28d6:	ff 92       	push	r15
    28d8:	0f 93       	push	r16
    28da:	1f 93       	push	r17
    28dc:	cf 93       	push	r28
    28de:	df 93       	push	r29
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	ca 1b       	sub	r28, r26
    28e6:	db 0b       	sbc	r29, r27
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	09 94       	ijmp

000028f4 <__epilogue_restores__>:
    28f4:	2a 88       	ldd	r2, Y+18	; 0x12
    28f6:	39 88       	ldd	r3, Y+17	; 0x11
    28f8:	48 88       	ldd	r4, Y+16	; 0x10
    28fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    28fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    28fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2900:	8c 84       	ldd	r8, Y+12	; 0x0c
    2902:	9b 84       	ldd	r9, Y+11	; 0x0b
    2904:	aa 84       	ldd	r10, Y+10	; 0x0a
    2906:	b9 84       	ldd	r11, Y+9	; 0x09
    2908:	c8 84       	ldd	r12, Y+8	; 0x08
    290a:	df 80       	ldd	r13, Y+7	; 0x07
    290c:	ee 80       	ldd	r14, Y+6	; 0x06
    290e:	fd 80       	ldd	r15, Y+5	; 0x05
    2910:	0c 81       	ldd	r16, Y+4	; 0x04
    2912:	1b 81       	ldd	r17, Y+3	; 0x03
    2914:	aa 81       	ldd	r26, Y+2	; 0x02
    2916:	b9 81       	ldd	r27, Y+1	; 0x01
    2918:	ce 0f       	add	r28, r30
    291a:	d1 1d       	adc	r29, r1
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	ed 01       	movw	r28, r26
    2928:	08 95       	ret

0000292a <_exit>:
    292a:	f8 94       	cli

0000292c <__stop_program>:
    292c:	ff cf       	rjmp	.-2      	; 0x292c <__stop_program>
